{"version":3,"file":"square.esm.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/models/registerDomainRequest.ts","../src/models/error.ts","../src/models/registerDomainResponse.ts","../src/api/baseApi.ts","../src/api/applePayApi.ts","../src/models/bankAccount.ts","../src/models/getBankAccountByV1IdResponse.ts","../src/models/getBankAccountResponse.ts","../src/models/listBankAccountsResponse.ts","../src/api/bankAccountsApi.ts","../src/models/cancelBookingRequest.ts","../src/models/appointmentSegment.ts","../src/models/bookingCreatorDetails.ts","../src/models/booking.ts","../src/models/cancelBookingResponse.ts","../src/models/createBookingRequest.ts","../src/models/createBookingResponse.ts","../src/models/listBookingsResponse.ts","../src/models/teamMemberBookingProfile.ts","../src/models/listTeamMemberBookingProfilesResponse.ts","../src/models/retrieveBookingResponse.ts","../src/models/money.ts","../src/models/businessAppointmentSettings.ts","../src/models/businessBookingProfile.ts","../src/models/retrieveBusinessBookingProfileResponse.ts","../src/models/retrieveTeamMemberBookingProfileResponse.ts","../src/models/filterValue.ts","../src/models/segmentFilter.ts","../src/models/timeRange.ts","../src/models/searchAvailabilityFilter.ts","../src/models/searchAvailabilityQuery.ts","../src/models/searchAvailabilityRequest.ts","../src/models/availability.ts","../src/models/searchAvailabilityResponse.ts","../src/models/updateBookingRequest.ts","../src/models/updateBookingResponse.ts","../src/api/bookingsApi.ts","../src/models/address.ts","../src/models/card.ts","../src/models/createCardRequest.ts","../src/models/createCardResponse.ts","../src/models/disableCardResponse.ts","../src/models/listCardsResponse.ts","../src/models/retrieveCardResponse.ts","../src/api/cardsApi.ts","../src/models/cashDrawerShiftEvent.ts","../src/models/listCashDrawerShiftEventsResponse.ts","../src/models/cashDrawerShiftSummary.ts","../src/models/listCashDrawerShiftsResponse.ts","../src/models/cashDrawerDevice.ts","../src/models/cashDrawerShift.ts","../src/models/retrieveCashDrawerShiftResponse.ts","../src/api/cashDrawersApi.ts","../src/models/batchDeleteCatalogObjectsRequest.ts","../src/models/batchDeleteCatalogObjectsResponse.ts","../src/models/batchRetrieveCatalogObjectsRequest.ts","../src/models/catalogCategory.ts","../src/models/catalogCustomAttributeDefinitionNumberConfig.ts","../src/models/catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection.ts","../src/models/catalogCustomAttributeDefinitionSelectionConfig.ts","../src/models/catalogCustomAttributeDefinitionStringConfig.ts","../src/models/sourceApplication.ts","../src/models/catalogCustomAttributeDefinition.ts","../src/models/catalogCustomAttributeValue.ts","../src/models/catalogDiscount.ts","../src/models/catalogImage.ts","../src/models/catalogModifierOverride.ts","../src/models/catalogItemModifierListInfo.ts","../src/models/catalogItemOptionForItem.ts","../src/models/catalogItem.ts","../src/models/catalogItemOption.ts","../src/models/catalogItemOptionValue.ts","../src/models/catalogItemOptionValueForItemVariation.ts","../src/models/catalogStockConversion.ts","../src/models/itemVariationLocationOverrides.ts","../src/models/catalogItemVariation.ts","../src/models/measurementUnitCustom.ts","../src/models/measurementUnit.ts","../src/models/catalogMeasurementUnit.ts","../src/models/catalogModifier.ts","../src/models/catalogModifierList.ts","../src/models/catalogPricingRule.ts","../src/models/catalogProductSet.ts","../src/models/catalogQuickAmount.ts","../src/models/catalogQuickAmountsSettings.ts","../src/models/subscriptionPhase.ts","../src/models/catalogSubscriptionPlan.ts","../src/models/catalogTax.ts","../src/models/catalogTimePeriod.ts","../src/models/catalogV1Id.ts","../src/models/catalogObject.ts","../src/models/batchRetrieveCatalogObjectsResponse.ts","../src/models/catalogObjectBatch.ts","../src/models/batchUpsertCatalogObjectsRequest.ts","../src/models/catalogIdMapping.ts","../src/models/batchUpsertCatalogObjectsResponse.ts","../src/models/catalogInfoResponseLimits.ts","../src/models/standardUnitDescription.ts","../src/models/standardUnitDescriptionGroup.ts","../src/models/catalogInfoResponse.ts","../src/models/createCatalogImageRequest.ts","../src/models/createCatalogImageResponse.ts","../src/models/deleteCatalogObjectResponse.ts","../src/models/listCatalogResponse.ts","../src/models/retrieveCatalogObjectResponse.ts","../src/models/range.ts","../src/models/customAttributeFilter.ts","../src/models/searchCatalogItemsRequest.ts","../src/models/searchCatalogItemsResponse.ts","../src/models/catalogQueryExact.ts","../src/models/catalogQueryItemsForItemOptions.ts","../src/models/catalogQueryItemsForModifierList.ts","../src/models/catalogQueryItemsForTax.ts","../src/models/catalogQueryItemVariationsForItemOptionValues.ts","../src/models/catalogQueryPrefix.ts","../src/models/catalogQueryRange.ts","../src/models/catalogQuerySet.ts","../src/models/catalogQuerySortedAttribute.ts","../src/models/catalogQueryText.ts","../src/models/catalogQuery.ts","../src/models/searchCatalogObjectsRequest.ts","../src/models/searchCatalogObjectsResponse.ts","../src/models/updateCatalogImageRequest.ts","../src/models/updateCatalogImageResponse.ts","../src/models/updateItemModifierListsRequest.ts","../src/models/updateItemModifierListsResponse.ts","../src/models/updateItemTaxesRequest.ts","../src/models/updateItemTaxesResponse.ts","../src/models/upsertCatalogObjectRequest.ts","../src/models/upsertCatalogObjectResponse.ts","../src/api/catalogApi.ts","../src/models/chargeRequestAdditionalRecipient.ts","../src/models/orderFulfillmentFulfillmentEntry.ts","../src/models/orderFulfillmentPickupDetailsCurbsidePickupDetails.ts","../src/models/orderFulfillmentRecipient.ts","../src/models/orderFulfillmentPickupDetails.ts","../src/models/orderFulfillmentShipmentDetails.ts","../src/models/orderFulfillment.ts","../src/models/orderLineItemAppliedDiscount.ts","../src/models/orderLineItemAppliedTax.ts","../src/models/orderLineItemModifier.ts","../src/models/orderLineItemPricingBlocklistsBlockedDiscount.ts","../src/models/orderLineItemPricingBlocklistsBlockedTax.ts","../src/models/orderLineItemPricingBlocklists.ts","../src/models/orderQuantityUnit.ts","../src/models/orderLineItem.ts","../src/models/orderLineItemDiscount.ts","../src/models/orderLineItemTax.ts","../src/models/orderMoneyAmounts.ts","../src/models/orderPricingOptions.ts","../src/models/orderReturnDiscount.ts","../src/models/orderReturnLineItemModifier.ts","../src/models/orderReturnLineItem.ts","../src/models/orderReturnServiceCharge.ts","../src/models/orderReturnTax.ts","../src/models/orderRoundingAdjustment.ts","../src/models/orderReturn.ts","../src/models/orderReward.ts","../src/models/orderServiceCharge.ts","../src/models/orderSource.ts","../src/models/additionalRecipient.ts","../src/models/refund.ts","../src/models/tenderCardDetails.ts","../src/models/tenderCashDetails.ts","../src/models/tender.ts","../src/models/order.ts","../src/models/createOrderRequest.ts","../src/models/createCheckoutRequest.ts","../src/models/checkout.ts","../src/models/createCheckoutResponse.ts","../src/api/checkoutApi.ts","../src/models/customerGroup.ts","../src/models/createCustomerGroupRequest.ts","../src/models/createCustomerGroupResponse.ts","../src/models/deleteCustomerGroupResponse.ts","../src/models/listCustomerGroupsResponse.ts","../src/models/retrieveCustomerGroupResponse.ts","../src/models/updateCustomerGroupRequest.ts","../src/models/updateCustomerGroupResponse.ts","../src/api/customerGroupsApi.ts","../src/models/addGroupToCustomerResponse.ts","../src/models/createCustomerCardRequest.ts","../src/models/createCustomerCardResponse.ts","../src/models/customerTaxIds.ts","../src/models/createCustomerRequest.ts","../src/models/customerPreferences.ts","../src/models/customer.ts","../src/models/createCustomerResponse.ts","../src/models/deleteCustomerCardResponse.ts","../src/models/deleteCustomerResponse.ts","../src/models/listCustomersResponse.ts","../src/models/removeGroupFromCustomerResponse.ts","../src/models/retrieveCustomerResponse.ts","../src/models/customerCreationSourceFilter.ts","../src/models/customerTextFilter.ts","../src/models/customerFilter.ts","../src/models/customerSort.ts","../src/models/customerQuery.ts","../src/models/searchCustomersRequest.ts","../src/models/searchCustomersResponse.ts","../src/models/updateCustomerRequest.ts","../src/models/updateCustomerResponse.ts","../src/api/customersApi.ts","../src/models/customerSegment.ts","../src/models/listCustomerSegmentsResponse.ts","../src/models/retrieveCustomerSegmentResponse.ts","../src/api/customerSegmentsApi.ts","../src/models/deviceCode.ts","../src/models/createDeviceCodeRequest.ts","../src/models/createDeviceCodeResponse.ts","../src/models/getDeviceCodeResponse.ts","../src/models/listDeviceCodesResponse.ts","../src/api/devicesApi.ts","../src/models/disputedPayment.ts","../src/models/dispute.ts","../src/models/acceptDisputeResponse.ts","../src/models/createDisputeEvidenceFileRequest.ts","../src/models/disputeEvidenceFile.ts","../src/models/disputeEvidence.ts","../src/models/createDisputeEvidenceFileResponse.ts","../src/models/createDisputeEvidenceTextRequest.ts","../src/models/createDisputeEvidenceTextResponse.ts","../src/models/deleteDisputeEvidenceResponse.ts","../src/models/listDisputeEvidenceResponse.ts","../src/models/listDisputesResponse.ts","../src/models/retrieveDisputeEvidenceResponse.ts","../src/models/retrieveDisputeResponse.ts","../src/models/submitEvidenceResponse.ts","../src/api/disputesApi.ts","../src/models/employee.ts","../src/models/listEmployeesResponse.ts","../src/models/retrieveEmployeeResponse.ts","../src/api/employeesApi.ts","../src/models/giftCardActivityActivate.ts","../src/models/giftCardActivityAdjustDecrement.ts","../src/models/giftCardActivityAdjustIncrement.ts","../src/models/giftCardActivityBlock.ts","../src/models/giftCardActivityClearBalance.ts","../src/models/giftCardActivityDeactivate.ts","../src/models/giftCardActivityImport.ts","../src/models/giftCardActivityImportReversal.ts","../src/models/giftCardActivityLoad.ts","../src/models/giftCardActivityRedeem.ts","../src/models/giftCardActivityRefund.ts","../src/models/giftCardActivityUnblock.ts","../src/models/giftCardActivityUnlinkedActivityRefund.ts","../src/models/giftCardActivity.ts","../src/models/createGiftCardActivityRequest.ts","../src/models/createGiftCardActivityResponse.ts","../src/models/listGiftCardActivitiesResponse.ts","../src/api/giftCardActivitiesApi.ts","../src/models/giftCard.ts","../src/models/createGiftCardRequest.ts","../src/models/createGiftCardResponse.ts","../src/models/linkCustomerToGiftCardRequest.ts","../src/models/linkCustomerToGiftCardResponse.ts","../src/models/listGiftCardsResponse.ts","../src/models/retrieveGiftCardFromGANRequest.ts","../src/models/retrieveGiftCardFromGANResponse.ts","../src/models/retrieveGiftCardFromNonceRequest.ts","../src/models/retrieveGiftCardFromNonceResponse.ts","../src/models/retrieveGiftCardResponse.ts","../src/models/unlinkCustomerFromGiftCardRequest.ts","../src/models/unlinkCustomerFromGiftCardResponse.ts","../src/api/giftCardsApi.ts","../src/models/inventoryAdjustmentGroup.ts","../src/models/inventoryAdjustment.ts","../src/models/inventoryPhysicalCount.ts","../src/models/inventoryTransfer.ts","../src/models/inventoryChange.ts","../src/models/batchChangeInventoryRequest.ts","../src/models/inventoryCount.ts","../src/models/batchChangeInventoryResponse.ts","../src/models/batchRetrieveInventoryChangesRequest.ts","../src/models/batchRetrieveInventoryChangesResponse.ts","../src/models/batchRetrieveInventoryCountsRequest.ts","../src/models/batchRetrieveInventoryCountsResponse.ts","../src/models/retrieveInventoryAdjustmentResponse.ts","../src/models/retrieveInventoryChangesResponse.ts","../src/models/retrieveInventoryCountResponse.ts","../src/models/retrieveInventoryPhysicalCountResponse.ts","../src/models/retrieveInventoryTransferResponse.ts","../src/api/inventoryApi.ts","../src/models/cancelInvoiceRequest.ts","../src/models/invoiceAcceptedPaymentMethods.ts","../src/models/invoiceCustomField.ts","../src/models/invoicePaymentReminder.ts","../src/models/invoicePaymentRequest.ts","../src/models/invoiceRecipientTaxIds.ts","../src/models/invoiceRecipient.ts","../src/models/invoice.ts","../src/models/cancelInvoiceResponse.ts","../src/models/createInvoiceRequest.ts","../src/models/createInvoiceResponse.ts","../src/models/deleteInvoiceResponse.ts","../src/models/getInvoiceResponse.ts","../src/models/listInvoicesResponse.ts","../src/models/publishInvoiceRequest.ts","../src/models/publishInvoiceResponse.ts","../src/models/invoiceFilter.ts","../src/models/invoiceSort.ts","../src/models/invoiceQuery.ts","../src/models/searchInvoicesRequest.ts","../src/models/searchInvoicesResponse.ts","../src/models/updateInvoiceRequest.ts","../src/models/updateInvoiceResponse.ts","../src/api/invoicesApi.ts","../src/models/breakType.ts","../src/models/createBreakTypeRequest.ts","../src/models/createBreakTypeResponse.ts","../src/models/break.ts","../src/models/shiftWage.ts","../src/models/shift.ts","../src/models/createShiftRequest.ts","../src/models/createShiftResponse.ts","../src/models/deleteBreakTypeResponse.ts","../src/models/deleteShiftResponse.ts","../src/models/getBreakTypeResponse.ts","../src/models/employeeWage.ts","../src/models/getEmployeeWageResponse.ts","../src/models/getShiftResponse.ts","../src/models/teamMemberWage.ts","../src/models/getTeamMemberWageResponse.ts","../src/models/listBreakTypesResponse.ts","../src/models/listEmployeeWagesResponse.ts","../src/models/listTeamMemberWagesResponse.ts","../src/models/workweekConfig.ts","../src/models/listWorkweekConfigsResponse.ts","../src/models/dateRange.ts","../src/models/shiftWorkday.ts","../src/models/shiftFilter.ts","../src/models/shiftSort.ts","../src/models/shiftQuery.ts","../src/models/searchShiftsRequest.ts","../src/models/searchShiftsResponse.ts","../src/models/updateBreakTypeRequest.ts","../src/models/updateBreakTypeResponse.ts","../src/models/updateShiftRequest.ts","../src/models/updateShiftResponse.ts","../src/models/updateWorkweekConfigRequest.ts","../src/models/updateWorkweekConfigResponse.ts","../src/api/laborApi.ts","../src/models/businessHoursPeriod.ts","../src/models/businessHours.ts","../src/models/coordinates.ts","../src/models/taxIds.ts","../src/models/location.ts","../src/models/createLocationRequest.ts","../src/models/createLocationResponse.ts","../src/models/listLocationsResponse.ts","../src/models/retrieveLocationResponse.ts","../src/models/updateLocationRequest.ts","../src/models/updateLocationResponse.ts","../src/api/locationsApi.ts","../src/models/loyaltyEventAccumulatePoints.ts","../src/models/accumulateLoyaltyPointsRequest.ts","../src/models/loyaltyEventAdjustPoints.ts","../src/models/loyaltyEventCreateReward.ts","../src/models/loyaltyEventDeleteReward.ts","../src/models/loyaltyEventExpirePoints.ts","../src/models/loyaltyEventOther.ts","../src/models/loyaltyEventRedeemReward.ts","../src/models/loyaltyEvent.ts","../src/models/accumulateLoyaltyPointsResponse.ts","../src/models/adjustLoyaltyPointsRequest.ts","../src/models/adjustLoyaltyPointsResponse.ts","../src/models/calculateLoyaltyPointsRequest.ts","../src/models/calculateLoyaltyPointsResponse.ts","../src/models/loyaltyAccountExpiringPointDeadline.ts","../src/models/loyaltyAccountMapping.ts","../src/models/loyaltyAccount.ts","../src/models/createLoyaltyAccountRequest.ts","../src/models/createLoyaltyAccountResponse.ts","../src/models/loyaltyReward.ts","../src/models/createLoyaltyRewardRequest.ts","../src/models/createLoyaltyRewardResponse.ts","../src/models/deleteLoyaltyRewardResponse.ts","../src/models/loyaltyProgramAccrualRuleCategoryData.ts","../src/models/loyaltyProgramAccrualRuleItemVariationData.ts","../src/models/loyaltyProgramAccrualRuleSpendData.ts","../src/models/loyaltyProgramAccrualRuleVisitData.ts","../src/models/loyaltyProgramAccrualRule.ts","../src/models/loyaltyProgramExpirationPolicy.ts","../src/models/catalogObjectReference.ts","../src/models/loyaltyProgramRewardDefinition.ts","../src/models/loyaltyProgramRewardTier.ts","../src/models/loyaltyProgramTerminology.ts","../src/models/loyaltyProgram.ts","../src/models/listLoyaltyProgramsResponse.ts","../src/models/redeemLoyaltyRewardRequest.ts","../src/models/redeemLoyaltyRewardResponse.ts","../src/models/retrieveLoyaltyAccountResponse.ts","../src/models/retrieveLoyaltyProgramResponse.ts","../src/models/retrieveLoyaltyRewardResponse.ts","../src/models/searchLoyaltyAccountsRequestLoyaltyAccountQuery.ts","../src/models/searchLoyaltyAccountsRequest.ts","../src/models/searchLoyaltyAccountsResponse.ts","../src/models/loyaltyEventDateTimeFilter.ts","../src/models/loyaltyEventLocationFilter.ts","../src/models/loyaltyEventLoyaltyAccountFilter.ts","../src/models/loyaltyEventOrderFilter.ts","../src/models/loyaltyEventTypeFilter.ts","../src/models/loyaltyEventFilter.ts","../src/models/loyaltyEventQuery.ts","../src/models/searchLoyaltyEventsRequest.ts","../src/models/searchLoyaltyEventsResponse.ts","../src/models/searchLoyaltyRewardsRequestLoyaltyRewardQuery.ts","../src/models/searchLoyaltyRewardsRequest.ts","../src/models/searchLoyaltyRewardsResponse.ts","../src/api/loyaltyApi.ts","../src/models/merchant.ts","../src/models/listMerchantsResponse.ts","../src/models/retrieveMerchantResponse.ts","../src/api/merchantsApi.ts","../src/models/createMobileAuthorizationCodeRequest.ts","../src/models/createMobileAuthorizationCodeResponse.ts","../src/api/mobileAuthorizationApi.ts","../src/models/obtainTokenRequest.ts","../src/models/obtainTokenResponse.ts","../src/models/renewTokenRequest.ts","../src/models/renewTokenResponse.ts","../src/models/revokeTokenRequest.ts","../src/models/revokeTokenResponse.ts","../src/api/oAuthApi.ts","../src/models/batchRetrieveOrdersRequest.ts","../src/models/batchRetrieveOrdersResponse.ts","../src/models/calculateOrderRequest.ts","../src/models/calculateOrderResponse.ts","../src/models/cloneOrderRequest.ts","../src/models/cloneOrderResponse.ts","../src/models/createOrderResponse.ts","../src/models/payOrderRequest.ts","../src/models/payOrderResponse.ts","../src/models/retrieveOrderResponse.ts","../src/models/searchOrdersCustomerFilter.ts","../src/models/searchOrdersDateTimeFilter.ts","../src/models/searchOrdersFulfillmentFilter.ts","../src/models/searchOrdersSourceFilter.ts","../src/models/searchOrdersStateFilter.ts","../src/models/searchOrdersFilter.ts","../src/models/searchOrdersSort.ts","../src/models/searchOrdersQuery.ts","../src/models/searchOrdersRequest.ts","../src/models/orderEntry.ts","../src/models/searchOrdersResponse.ts","../src/models/updateOrderRequest.ts","../src/models/updateOrderResponse.ts","../src/api/ordersApi.ts","../src/models/cancelPaymentByIdempotencyKeyRequest.ts","../src/models/cancelPaymentByIdempotencyKeyResponse.ts","../src/models/applicationDetails.ts","../src/models/aCHDetails.ts","../src/models/bankAccountPaymentDetails.ts","../src/models/afterpayDetails.ts","../src/models/buyNowPayLaterDetails.ts","../src/models/cardPaymentTimeline.ts","../src/models/deviceDetails.ts","../src/models/cardPaymentDetails.ts","../src/models/cashPaymentDetails.ts","../src/models/digitalWalletDetails.ts","../src/models/externalPaymentDetails.ts","../src/models/processingFee.ts","../src/models/riskEvaluation.ts","../src/models/payment.ts","../src/models/cancelPaymentResponse.ts","../src/models/completePaymentRequest.ts","../src/models/completePaymentResponse.ts","../src/models/createPaymentRequest.ts","../src/models/createPaymentResponse.ts","../src/models/getPaymentResponse.ts","../src/models/listPaymentsResponse.ts","../src/models/updatePaymentRequest.ts","../src/models/updatePaymentResponse.ts","../src/api/paymentsApi.ts","../src/models/destination.ts","../src/models/payoutFee.ts","../src/models/payout.ts","../src/models/getPayoutResponse.ts","../src/models/paymentBalanceActivityAutomaticSavingsDetail.ts","../src/models/paymentBalanceActivityAutomaticSavingsReversedDetail.ts","../src/models/paymentBalanceActivityChargeDetail.ts","../src/models/paymentBalanceActivityDepositFeeDetail.ts","../src/models/paymentBalanceActivityDisputeDetail.ts","../src/models/paymentBalanceActivityFeeDetail.ts","../src/models/paymentBalanceActivityFreeProcessingDetail.ts","../src/models/paymentBalanceActivityHoldAdjustmentDetail.ts","../src/models/paymentBalanceActivityOpenDisputeDetail.ts","../src/models/paymentBalanceActivityOtherAdjustmentDetail.ts","../src/models/paymentBalanceActivityOtherDetail.ts","../src/models/paymentBalanceActivityRefundDetail.ts","../src/models/paymentBalanceActivityReleaseAdjustmentDetail.ts","../src/models/paymentBalanceActivityReserveHoldDetail.ts","../src/models/paymentBalanceActivityReserveReleaseDetail.ts","../src/models/paymentBalanceActivitySquareCapitalPaymentDetail.ts","../src/models/paymentBalanceActivitySquareCapitalReversedPaymentDetail.ts","../src/models/paymentBalanceActivityTaxOnFeeDetail.ts","../src/models/paymentBalanceActivityThirdPartyFeeDetail.ts","../src/models/paymentBalanceActivityThirdPartyFeeRefundDetail.ts","../src/models/payoutEntry.ts","../src/models/listPayoutEntriesResponse.ts","../src/models/listPayoutsResponse.ts","../src/api/payoutsApi.ts","../src/models/paymentRefund.ts","../src/models/getPaymentRefundResponse.ts","../src/models/listPaymentRefundsResponse.ts","../src/models/refundPaymentRequest.ts","../src/models/refundPaymentResponse.ts","../src/api/refundsApi.ts","../src/models/site.ts","../src/models/listSitesResponse.ts","../src/api/sitesApi.ts","../src/models/deleteSnippetResponse.ts","../src/models/snippet.ts","../src/models/retrieveSnippetResponse.ts","../src/models/upsertSnippetRequest.ts","../src/models/upsertSnippetResponse.ts","../src/api/snippetsApi.ts","../src/models/subscriptionAction.ts","../src/models/subscriptionSource.ts","../src/models/subscription.ts","../src/models/cancelSubscriptionResponse.ts","../src/models/createSubscriptionRequest.ts","../src/models/createSubscriptionResponse.ts","../src/models/deleteSubscriptionActionResponse.ts","../src/models/subscriptionEventInfo.ts","../src/models/subscriptionEvent.ts","../src/models/listSubscriptionEventsResponse.ts","../src/models/pauseSubscriptionRequest.ts","../src/models/pauseSubscriptionResponse.ts","../src/models/resumeSubscriptionRequest.ts","../src/models/resumeSubscriptionResponse.ts","../src/models/retrieveSubscriptionResponse.ts","../src/models/searchSubscriptionsFilter.ts","../src/models/searchSubscriptionsQuery.ts","../src/models/searchSubscriptionsRequest.ts","../src/models/searchSubscriptionsResponse.ts","../src/models/swapPlanRequest.ts","../src/models/swapPlanResponse.ts","../src/models/updateSubscriptionRequest.ts","../src/models/updateSubscriptionResponse.ts","../src/api/subscriptionsApi.ts","../src/models/teamMemberAssignedLocations.ts","../src/models/teamMember.ts","../src/models/createTeamMemberRequest.ts","../src/models/bulkCreateTeamMembersRequest.ts","../src/models/createTeamMemberResponse.ts","../src/models/bulkCreateTeamMembersResponse.ts","../src/models/updateTeamMemberRequest.ts","../src/models/bulkUpdateTeamMembersRequest.ts","../src/models/updateTeamMemberResponse.ts","../src/models/bulkUpdateTeamMembersResponse.ts","../src/models/retrieveTeamMemberResponse.ts","../src/models/jobAssignment.ts","../src/models/wageSetting.ts","../src/models/retrieveWageSettingResponse.ts","../src/models/searchTeamMembersFilter.ts","../src/models/searchTeamMembersQuery.ts","../src/models/searchTeamMembersRequest.ts","../src/models/searchTeamMembersResponse.ts","../src/models/updateWageSettingRequest.ts","../src/models/updateWageSettingResponse.ts","../src/api/teamApi.ts","../src/models/tipSettings.ts","../src/models/deviceCheckoutOptions.ts","../src/models/terminalCheckout.ts","../src/models/cancelTerminalCheckoutResponse.ts","../src/models/terminalRefund.ts","../src/models/cancelTerminalRefundResponse.ts","../src/models/createTerminalCheckoutRequest.ts","../src/models/createTerminalCheckoutResponse.ts","../src/models/createTerminalRefundRequest.ts","../src/models/createTerminalRefundResponse.ts","../src/models/getTerminalCheckoutResponse.ts","../src/models/getTerminalRefundResponse.ts","../src/models/terminalCheckoutQueryFilter.ts","../src/models/terminalCheckoutQuerySort.ts","../src/models/terminalCheckoutQuery.ts","../src/models/searchTerminalCheckoutsRequest.ts","../src/models/searchTerminalCheckoutsResponse.ts","../src/models/terminalRefundQueryFilter.ts","../src/models/terminalRefundQuerySort.ts","../src/models/terminalRefundQuery.ts","../src/models/searchTerminalRefundsRequest.ts","../src/models/searchTerminalRefundsResponse.ts","../src/api/terminalApi.ts","../src/models/captureTransactionResponse.ts","../src/models/transaction.ts","../src/models/listTransactionsResponse.ts","../src/models/retrieveTransactionResponse.ts","../src/models/voidTransactionResponse.ts","../src/api/transactionsApi.ts","../src/models/v1Money.ts","../src/models/v1CreateRefundRequest.ts","../src/models/v1OrderHistoryEntry.ts","../src/models/v1Tender.ts","../src/models/v1Order.ts","../src/models/device.ts","../src/models/v1PaymentDiscount.ts","../src/models/v1PaymentItemDetail.ts","../src/models/v1PaymentModifier.ts","../src/models/v1PaymentTax.ts","../src/models/v1PaymentItemization.ts","../src/models/v1PaymentSurcharge.ts","../src/models/v1Refund.ts","../src/models/v1Payment.ts","../src/models/v1SettlementEntry.ts","../src/models/v1Settlement.ts","../src/models/v1UpdateOrderRequest.ts","../src/api/v1TransactionsApi.ts","../src/models/vendorContact.ts","../src/models/vendor.ts","../src/models/bulkCreateVendorsRequest.ts","../src/models/createVendorResponse.ts","../src/models/bulkCreateVendorsResponse.ts","../src/models/bulkRetrieveVendorsRequest.ts","../src/models/retrieveVendorResponse.ts","../src/models/bulkRetrieveVendorsResponse.ts","../src/models/updateVendorRequest.ts","../src/models/bulkUpdateVendorsRequest.ts","../src/models/updateVendorResponse.ts","../src/models/bulkUpdateVendorsResponse.ts","../src/models/createVendorRequest.ts","../src/models/searchVendorsRequestFilter.ts","../src/models/searchVendorsRequestSort.ts","../src/models/searchVendorsRequest.ts","../src/models/searchVendorsResponse.ts","../src/api/vendorsApi.ts","../src/authentication.ts","../src/configuration.ts","../src/defaultConfiguration.ts","../src/errors/apiError.ts","../src/http/xmlSerialization.ts","../src/client.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { object, Schema, string } from '../schema';\n\n/**\n * Defines the parameters that can be included in the body of\n * a request to the [RegisterDomain]($e/ApplePay/RegisterDomain) endpoint.\n */\nexport interface RegisterDomainRequest {\n  /** A domain name as described in RFC-1034 that will be registered with ApplePay. */\n  domainName: string;\n}\n\nexport const registerDomainRequestSchema: Schema<RegisterDomainRequest> = object(\n  { domainName: ['domain_name', string()] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents an error encountered during a request to the Connect API.\n * See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.\n */\nexport interface Error {\n  /**\n   * Indicates which high-level category of error has occurred during a\n   * request to the Connect API.\n   */\n  category: string;\n  /**\n   * Indicates the specific error that occurred during a request to a\n   * Square API.\n   */\n  code: string;\n  /** A human-readable description of the error for debugging purposes. */\n  detail?: string;\n  /**\n   * The name of the field provided in the original request (if any) that\n   * the error pertains to.\n   */\n  field?: string;\n}\n\nexport const errorSchema: Schema<Error> = object({\n  category: ['category', string()],\n  code: ['code', string()],\n  detail: ['detail', optional(string())],\n  field: ['field', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RegisterDomain]($e/ApplePay/RegisterDomain) endpoint.\n * Either `errors` or `status` are present in a given response (never both).\n */\nexport interface RegisterDomainResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The status of the domain registration. */\n  status?: string;\n}\n\nexport const registerDomainResponseSchema: Schema<RegisterDomainResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    status: ['status', optional(string())],\n  }\n);\n","import { ClientInterface, SdkRequestBuilderFactory } from '../clientInterface';\n\n/** Base class for all controllers */\nexport class BaseApi {\n  /** Create a request builder */\n  protected createRequest: SdkRequestBuilderFactory;\n\n  constructor(client: ClientInterface) {\n    this.createRequest = client.getRequestBuilderFactory();\n  }\n}\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  RegisterDomainRequest,\n  registerDomainRequestSchema,\n} from '../models/registerDomainRequest';\nimport {\n  RegisterDomainResponse,\n  registerDomainResponseSchema,\n} from '../models/registerDomainResponse';\nimport { BaseApi } from './baseApi';\n\nexport class ApplePayApi extends BaseApi {\n  /**\n   * Activates a domain for use with Apple Pay on the Web and Square. A validation\n   * is performed on this domain by Apple to ensure that it is properly set up as\n   * an Apple Pay enabled domain.\n   *\n   * This endpoint provides an easy way for platform developers to bulk activate\n   * Apple Pay on the Web with Square for merchants using their platform.\n   *\n   * To learn more about Web Apple Pay, see\n   * [Add the Apple Pay on the Web Button](https://developer.squareup.com/docs/payment-form/add-digital-\n   * wallets/apple-pay).\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async registerDomain(\n    body: RegisterDomainRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RegisterDomainResponse>> {\n    const req = this.createRequest('POST', '/v2/apple-pay/domains');\n    const mapped = req.prepareArgs({\n      body: [body, registerDomainRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(registerDomainResponseSchema, requestOptions);\n  }\n}\n","import { boolean, number, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a bank account. For more information about\n * linking a bank account to a Square account, see\n * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n */\nexport interface BankAccount {\n  /** The unique, Square-issued identifier for the bank account. */\n  id: string;\n  /** The last few digits of the account number. */\n  accountNumberSuffix: string;\n  /**\n   * Indicates the country associated with another entity, such as a business.\n   * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).\n   */\n  country: string;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currency: string;\n  /** Indicates the financial purpose of the bank account. */\n  accountType: string;\n  /**\n   * Name of the account holder. This name must match the name\n   * on the targeted bank account record.\n   */\n  holderName: string;\n  /**\n   * Primary identifier for the bank. For more information, see\n   * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n   */\n  primaryBankIdentificationNumber: string;\n  /**\n   * Secondary identifier for the bank. For more information, see\n   * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n   */\n  secondaryBankIdentificationNumber?: string;\n  /**\n   * Reference identifier that will be displayed to UK bank account owners\n   * when collecting direct debit authorization. Only required for UK bank accounts.\n   */\n  debitMandateReferenceId?: string;\n  /**\n   * Client-provided identifier for linking the banking account to an entity\n   * in a third-party system (for example, a bank account number or a user identifier).\n   */\n  referenceId?: string;\n  /** The location to which the bank account belongs. */\n  locationId?: string;\n  /** Indicates the current verification status of a `BankAccount` object. */\n  status: string;\n  /** Indicates whether it is possible for Square to send money to this bank account. */\n  creditable: boolean;\n  /**\n   * Indicates whether it is possible for Square to take money from this\n   * bank account.\n   */\n  debitable: boolean;\n  /**\n   * A Square-assigned, unique identifier for the bank account based on the\n   * account information. The account fingerprint can be used to compare account\n   * entries and determine if the they represent the same real-world bank account.\n   */\n  fingerprint?: string;\n  /** The current version of the `BankAccount`. */\n  version?: number;\n  /**\n   * Read only. Name of actual financial institution.\n   * For example \"Bank of America\".\n   */\n  bankName?: string;\n}\n\nexport const bankAccountSchema: Schema<BankAccount> = object({\n  id: ['id', string()],\n  accountNumberSuffix: ['account_number_suffix', string()],\n  country: ['country', string()],\n  currency: ['currency', string()],\n  accountType: ['account_type', string()],\n  holderName: ['holder_name', string()],\n  primaryBankIdentificationNumber: [\n    'primary_bank_identification_number',\n    string(),\n  ],\n  secondaryBankIdentificationNumber: [\n    'secondary_bank_identification_number',\n    optional(string()),\n  ],\n  debitMandateReferenceId: ['debit_mandate_reference_id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  status: ['status', string()],\n  creditable: ['creditable', boolean()],\n  debitable: ['debitable', boolean()],\n  fingerprint: ['fingerprint', optional(string())],\n  version: ['version', optional(number())],\n  bankName: ['bank_name', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BankAccount, bankAccountSchema } from './bankAccount';\nimport { Error, errorSchema } from './error';\n\n/** Response object returned by GetBankAccountByV1Id. */\nexport interface GetBankAccountByV1IdResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a bank account. For more information about\n   * linking a bank account to a Square account, see\n   * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n   */\n  bankAccount?: BankAccount;\n}\n\nexport const getBankAccountByV1IdResponseSchema: Schema<GetBankAccountByV1IdResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    bankAccount: ['bank_account', optional(lazy(() => bankAccountSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BankAccount, bankAccountSchema } from './bankAccount';\nimport { Error, errorSchema } from './error';\n\n/** Response object returned by `GetBankAccount`. */\nexport interface GetBankAccountResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a bank account. For more information about\n   * linking a bank account to a Square account, see\n   * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n   */\n  bankAccount?: BankAccount;\n}\n\nexport const getBankAccountResponseSchema: Schema<GetBankAccountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    bankAccount: ['bank_account', optional(lazy(() => bankAccountSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { BankAccount, bankAccountSchema } from './bankAccount';\nimport { Error, errorSchema } from './error';\n\n/** Response object returned by ListBankAccounts. */\nexport interface ListBankAccountsResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** List of BankAccounts associated with this account. */\n  bankAccounts?: BankAccount[];\n  /**\n   * When a response is truncated, it includes a cursor that you can\n   * use in a subsequent request to fetch next set of bank accounts.\n   * If empty, this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listBankAccountsResponseSchema: Schema<ListBankAccountsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    bankAccounts: [\n      'bank_accounts',\n      optional(array(lazy(() => bankAccountSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  GetBankAccountByV1IdResponse,\n  getBankAccountByV1IdResponseSchema,\n} from '../models/getBankAccountByV1IdResponse';\nimport {\n  GetBankAccountResponse,\n  getBankAccountResponseSchema,\n} from '../models/getBankAccountResponse';\nimport {\n  ListBankAccountsResponse,\n  listBankAccountsResponseSchema,\n} from '../models/listBankAccountsResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class BankAccountsApi extends BaseApi {\n  /**\n   * Returns a list of [BankAccount]($m/BankAccount) objects linked to a Square account.\n   *\n   * @param cursor      The pagination cursor returned by a previous call to this endpoint. Use it in the\n   *                              next `ListBankAccounts` request to retrieve the next set  of results.  See the\n   *                              [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide\n   *                              for more information.\n   * @param limit       Upper limit on the number of bank accounts to return in the response.  Currently,\n   *                              1000 is the largest supported limit. You can specify a limit  of up to 1000 bank\n   *                              accounts. This is also the default limit.\n   * @param locationId  Location ID. You can specify this optional filter  to retrieve only the linked bank\n   *                              accounts belonging to a specific location.\n   * @return Response from the API call\n   */\n  async listBankAccounts(\n    cursor?: string,\n    limit?: number,\n    locationId?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListBankAccountsResponse>> {\n    const req = this.createRequest('GET', '/v2/bank-accounts');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n      locationId: [locationId, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    req.query('location_id', mapped.locationId);\n    return req.callAsJson(listBankAccountsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns details of a [BankAccount]($m/BankAccount) identified by V1 bank account ID.\n   *\n   * @param v1BankAccountId    Connect V1 ID of the desired `BankAccount`. For more information, see\n   *                                     [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https:\n   *                                     //developer.squareup.com/docs/bank-accounts-api#retrieve-a-bank-account-by-\n   *                                     using-an-id-issued-by-v1-bank-accounts-api).\n   * @return Response from the API call\n   */\n  async getBankAccountByV1Id(\n    v1BankAccountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetBankAccountByV1IdResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      v1BankAccountId: [v1BankAccountId, string()],\n    });\n    req.appendTemplatePath`/v2/bank-accounts/by-v1-id/${mapped.v1BankAccountId}`;\n    return req.callAsJson(getBankAccountByV1IdResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns details of a [BankAccount]($m/BankAccount)\n   * linked to a Square account.\n   *\n   * @param bankAccountId   Square-issued ID of the desired `BankAccount`.\n   * @return Response from the API call\n   */\n  async getBankAccount(\n    bankAccountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetBankAccountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      bankAccountId: [bankAccountId, string()],\n    });\n    req.appendTemplatePath`/v2/bank-accounts/${mapped.bankAccountId}`;\n    return req.callAsJson(getBankAccountResponseSchema, requestOptions);\n  }\n}\n","import { number, object, optional, Schema, string } from '../schema';\n\nexport interface CancelBookingRequest {\n  /** A unique key to make this request an idempotent operation. */\n  idempotencyKey?: string;\n  /** The revision number for the booking used for optimistic concurrency. */\n  bookingVersion?: number;\n}\n\nexport const cancelBookingRequestSchema: Schema<CancelBookingRequest> = object({\n  idempotencyKey: ['idempotency_key', optional(string())],\n  bookingVersion: ['booking_version', optional(number())],\n});\n","import {\n  array,\n  bigint,\n  boolean,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\n\n/** Defines an appointment segment of a booking. */\nexport interface AppointmentSegment {\n  /** The time span in minutes of an appointment segment. */\n  durationMinutes: number;\n  /** The ID of the [CatalogItemVariation]($m/CatalogItemVariation) object representing the service booked in this segment. */\n  serviceVariationId: string;\n  /** The ID of the [TeamMember]($m/TeamMember) object representing the team member booked in this segment. */\n  teamMemberId: string;\n  /** The current version of the item variation representing the service booked in this segment. */\n  serviceVariationVersion: bigint;\n  /** Time between the end of this segment and the beginning of the subsequent segment. */\n  intermissionMinutes?: number;\n  /** Whether the customer accepts any team member, instead of a specific one, to serve this segment. */\n  anyTeamMember?: boolean;\n  /** The IDs of the seller-accessible resources used for this appointment segment. */\n  resourceIds?: string[];\n}\n\nexport const appointmentSegmentSchema: Schema<AppointmentSegment> = object({\n  durationMinutes: ['duration_minutes', number()],\n  serviceVariationId: ['service_variation_id', string()],\n  teamMemberId: ['team_member_id', string()],\n  serviceVariationVersion: ['service_variation_version', bigint()],\n  intermissionMinutes: ['intermission_minutes', optional(number())],\n  anyTeamMember: ['any_team_member', optional(boolean())],\n  resourceIds: ['resource_ids', optional(array(string()))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Information about a booking creator. */\nexport interface BookingCreatorDetails {\n  /** Supported types of a booking creator. */\n  creatorType?: string;\n  /**\n   * The ID of the team member who created the booking, when the booking creator is of the `TEAM_MEMBER` type.\n   * Access to this field requires seller-level permissions.\n   */\n  teamMemberId?: string;\n  /**\n   * The ID of the customer who created the booking, when the booking creator is of the `CUSTOMER` type.\n   * Access to this field requires seller-level permissions.\n   */\n  customerId?: string;\n}\n\nexport const bookingCreatorDetailsSchema: Schema<BookingCreatorDetails> = object(\n  {\n    creatorType: ['creator_type', optional(string())],\n    teamMemberId: ['team_member_id', optional(string())],\n    customerId: ['customer_id', optional(string())],\n  }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  AppointmentSegment,\n  appointmentSegmentSchema,\n} from './appointmentSegment';\nimport {\n  BookingCreatorDetails,\n  bookingCreatorDetailsSchema,\n} from './bookingCreatorDetails';\n\n/**\n * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n * at a given location to a requesting customer in one or more appointment segments.\n */\nexport interface Booking {\n  /** A unique ID of this object representing a booking. */\n  id?: string;\n  /** The revision number for the booking used for optimistic concurrency. */\n  version?: number;\n  /** Supported booking statuses. */\n  status?: string;\n  /** The RFC 3339 timestamp specifying the creation time of this booking. */\n  createdAt?: string;\n  /** The RFC 3339 timestamp specifying the most recent update time of this booking. */\n  updatedAt?: string;\n  /** The RFC 3339 timestamp specifying the starting time of this booking. */\n  startAt?: string;\n  /** The ID of the [Location]($m/Location) object representing the location where the booked service is provided. Once set when the booking is created, its value cannot be changed. */\n  locationId?: string;\n  /** The ID of the [Customer]($m/Customer) object representing the customer receiving the booked service. */\n  customerId?: string;\n  /** The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject]($m/CatalogObject) instance. */\n  customerNote?: string;\n  /**\n   * The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject]($m/CatalogObject) instance.\n   * This field should not be visible to customers.\n   */\n  sellerNote?: string;\n  /** A list of appointment segments for this booking. */\n  appointmentSegments?: AppointmentSegment[];\n  /**\n   * Additional time at the end of a booking.\n   * Applications should not make this field visible to customers of a seller.\n   */\n  transitionTimeMinutes?: number;\n  /** Whether the booking is of a full business day. */\n  allDay?: boolean;\n  /** Supported types of location where service is provided. */\n  locationType?: string;\n  /** Information about a booking creator. */\n  creatorDetails?: BookingCreatorDetails;\n  /** Supported sources a booking was created from. */\n  source?: string;\n}\n\nexport const bookingSchema: Schema<Booking> = object({\n  id: ['id', optional(string())],\n  version: ['version', optional(number())],\n  status: ['status', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  startAt: ['start_at', optional(string())],\n  locationId: ['location_id', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  customerNote: ['customer_note', optional(string())],\n  sellerNote: ['seller_note', optional(string())],\n  appointmentSegments: [\n    'appointment_segments',\n    optional(array(lazy(() => appointmentSegmentSchema))),\n  ],\n  transitionTimeMinutes: ['transition_time_minutes', optional(number())],\n  allDay: ['all_day', optional(boolean())],\n  locationType: ['location_type', optional(string())],\n  creatorDetails: [\n    'creator_details',\n    optional(lazy(() => bookingCreatorDetailsSchema)),\n  ],\n  source: ['source', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Booking, bookingSchema } from './booking';\nimport { Error, errorSchema } from './error';\n\nexport interface CancelBookingResponse {\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking?: Booking;\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const cancelBookingResponseSchema: Schema<CancelBookingResponse> = object(\n  {\n    booking: ['booking', optional(lazy(() => bookingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Booking, bookingSchema } from './booking';\n\nexport interface CreateBookingRequest {\n  /** A unique key to make this request an idempotent operation. */\n  idempotencyKey?: string;\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking: Booking;\n}\n\nexport const createBookingRequestSchema: Schema<CreateBookingRequest> = object({\n  idempotencyKey: ['idempotency_key', optional(string())],\n  booking: ['booking', lazy(() => bookingSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Booking, bookingSchema } from './booking';\nimport { Error, errorSchema } from './error';\n\nexport interface CreateBookingResponse {\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking?: Booking;\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createBookingResponseSchema: Schema<CreateBookingResponse> = object(\n  {\n    booking: ['booking', optional(lazy(() => bookingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Booking, bookingSchema } from './booking';\nimport { Error, errorSchema } from './error';\n\nexport interface ListBookingsResponse {\n  /** The list of targeted bookings. */\n  bookings?: Booking[];\n  /** The pagination cursor to be used in the subsequent request to get the next page of the results. Stop retrieving the next page of the results when the cursor is not set. */\n  cursor?: string;\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listBookingsResponseSchema: Schema<ListBookingsResponse> = object({\n  bookings: ['bookings', optional(array(lazy(() => bookingSchema)))],\n  cursor: ['cursor', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider. */\nexport interface TeamMemberBookingProfile {\n  /** The ID of the [TeamMember]($m/TeamMember) object for the team member associated with the booking profile. */\n  teamMemberId?: string;\n  /** The description of the team member. */\n  description?: string;\n  /** The display name of the team member. */\n  displayName?: string;\n  /** Indicates whether the team member can be booked through the Bookings API or the seller's online booking channel or site (`true) or not (`false`). */\n  isBookable?: boolean;\n  /** The URL of the team member's image for the bookings profile. */\n  profileImageUrl?: string;\n}\n\nexport const teamMemberBookingProfileSchema: Schema<TeamMemberBookingProfile> = object(\n  {\n    teamMemberId: ['team_member_id', optional(string())],\n    description: ['description', optional(string())],\n    displayName: ['display_name', optional(string())],\n    isBookable: ['is_bookable', optional(boolean())],\n    profileImageUrl: ['profile_image_url', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  TeamMemberBookingProfile,\n  teamMemberBookingProfileSchema,\n} from './teamMemberBookingProfile';\n\nexport interface ListTeamMemberBookingProfilesResponse {\n  /**\n   * The list of team member booking profiles. The results are returned in the ascending order of the time\n   * when the team member booking profiles were last updated. Multiple booking profiles updated at the same time\n   * are further sorted in the ascending order of their IDs.\n   */\n  teamMemberBookingProfiles?: TeamMemberBookingProfile[];\n  /** The pagination cursor to be used in the subsequent request to get the next page of the results. Stop retrieving the next page of the results when the cursor is not set. */\n  cursor?: string;\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listTeamMemberBookingProfilesResponseSchema: Schema<ListTeamMemberBookingProfilesResponse> = object(\n  {\n    teamMemberBookingProfiles: [\n      'team_member_booking_profiles',\n      optional(array(lazy(() => teamMemberBookingProfileSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Booking, bookingSchema } from './booking';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveBookingResponse {\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking?: Booking;\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveBookingResponseSchema: Schema<RetrieveBookingResponse> = object(\n  {\n    booking: ['booking', optional(lazy(() => bookingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { bigint, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents an amount of money. `Money` fields can be signed or unsigned.\n * Fields that do not explicitly define whether they are signed or unsigned are\n * considered unsigned and can only hold positive amounts. For signed fields, the\n * sign of the value indicates the purpose of the money transfer. See\n * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n * for more information.\n */\nexport interface Money {\n  /**\n   * The amount of money, in the smallest denomination of the currency\n   * indicated by `currency`. For example, when `currency` is `USD`, `amount` is\n   * in cents. Monetary amounts can be positive or negative. See the specific\n   * field description to determine the meaning of the sign in a particular case.\n   */\n  amount?: bigint;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currency?: string;\n}\n\nexport const moneySchema: Schema<Money> = object({\n  amount: ['amount', optional(bigint())],\n  currency: ['currency', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** The service appointment settings, including where and how the service is provided. */\nexport interface BusinessAppointmentSettings {\n  /**\n   * Types of the location allowed for bookings.\n   * See [BusinessAppointmentSettingsBookingLocationType](#type-businessappointmentsettingsbookinglocationtype) for possible values\n   */\n  locationTypes?: string[];\n  /** Time units of a service duration for bookings. */\n  alignmentTime?: string;\n  /** The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time. */\n  minBookingLeadTimeSeconds?: number;\n  /** The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time. */\n  maxBookingLeadTimeSeconds?: number;\n  /**\n   * Indicates whether a customer can choose from all available time slots and have a staff member assigned\n   * automatically (`true`) or not (`false`).\n   */\n  anyTeamMemberBookingEnabled?: boolean;\n  /** Indicates whether a customer can book multiple services in a single online booking. */\n  multipleServiceBookingEnabled?: boolean;\n  /** Types of daily appointment limits. */\n  maxAppointmentsPerDayLimitType?: string;\n  /** The maximum number of daily appointments per team member or per location. */\n  maxAppointmentsPerDayLimit?: number;\n  /** The cut-off time in seconds for allowing clients to cancel or reschedule an appointment. */\n  cancellationWindowSeconds?: number;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cancellationFeeMoney?: Money;\n  /** The category of the seller’s cancellation policy. */\n  cancellationPolicy?: string;\n  /** The free-form text of the seller's cancellation policy. */\n  cancellationPolicyText?: string;\n  /** Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`). */\n  skipBookingFlowStaffSelection?: boolean;\n}\n\nexport const businessAppointmentSettingsSchema: Schema<BusinessAppointmentSettings> = object(\n  {\n    locationTypes: ['location_types', optional(array(string()))],\n    alignmentTime: ['alignment_time', optional(string())],\n    minBookingLeadTimeSeconds: [\n      'min_booking_lead_time_seconds',\n      optional(number()),\n    ],\n    maxBookingLeadTimeSeconds: [\n      'max_booking_lead_time_seconds',\n      optional(number()),\n    ],\n    anyTeamMemberBookingEnabled: [\n      'any_team_member_booking_enabled',\n      optional(boolean()),\n    ],\n    multipleServiceBookingEnabled: [\n      'multiple_service_booking_enabled',\n      optional(boolean()),\n    ],\n    maxAppointmentsPerDayLimitType: [\n      'max_appointments_per_day_limit_type',\n      optional(string()),\n    ],\n    maxAppointmentsPerDayLimit: [\n      'max_appointments_per_day_limit',\n      optional(number()),\n    ],\n    cancellationWindowSeconds: [\n      'cancellation_window_seconds',\n      optional(number()),\n    ],\n    cancellationFeeMoney: [\n      'cancellation_fee_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    cancellationPolicy: ['cancellation_policy', optional(string())],\n    cancellationPolicyText: ['cancellation_policy_text', optional(string())],\n    skipBookingFlowStaffSelection: [\n      'skip_booking_flow_staff_selection',\n      optional(boolean()),\n    ],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  BusinessAppointmentSettings,\n  businessAppointmentSettingsSchema,\n} from './businessAppointmentSettings';\n\nexport interface BusinessBookingProfile {\n  /** The ID of the seller, obtainable using the Merchants API. */\n  sellerId?: string;\n  /** The RFC 3339 timestamp specifying the booking's creation time. */\n  createdAt?: string;\n  /** Indicates whether the seller is open for booking. */\n  bookingEnabled?: boolean;\n  /** Choices of customer-facing time zone used for bookings. */\n  customerTimezoneChoice?: string;\n  /** Policies for accepting bookings. */\n  bookingPolicy?: string;\n  /** Indicates whether customers can cancel or reschedule their own bookings (`true`) or not (`false`). */\n  allowUserCancel?: boolean;\n  /** The service appointment settings, including where and how the service is provided. */\n  businessAppointmentSettings?: BusinessAppointmentSettings;\n}\n\nexport const businessBookingProfileSchema: Schema<BusinessBookingProfile> = object(\n  {\n    sellerId: ['seller_id', optional(string())],\n    createdAt: ['created_at', optional(string())],\n    bookingEnabled: ['booking_enabled', optional(boolean())],\n    customerTimezoneChoice: ['customer_timezone_choice', optional(string())],\n    bookingPolicy: ['booking_policy', optional(string())],\n    allowUserCancel: ['allow_user_cancel', optional(boolean())],\n    businessAppointmentSettings: [\n      'business_appointment_settings',\n      optional(lazy(() => businessAppointmentSettingsSchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport {\n  BusinessBookingProfile,\n  businessBookingProfileSchema,\n} from './businessBookingProfile';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveBusinessBookingProfileResponse {\n  businessBookingProfile?: BusinessBookingProfile;\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveBusinessBookingProfileResponseSchema: Schema<RetrieveBusinessBookingProfileResponse> = object(\n  {\n    businessBookingProfile: [\n      'business_booking_profile',\n      optional(lazy(() => businessBookingProfileSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  TeamMemberBookingProfile,\n  teamMemberBookingProfileSchema,\n} from './teamMemberBookingProfile';\n\nexport interface RetrieveTeamMemberBookingProfileResponse {\n  /** The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider. */\n  teamMemberBookingProfile?: TeamMemberBookingProfile;\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveTeamMemberBookingProfileResponseSchema: Schema<RetrieveTeamMemberBookingProfileResponse> = object(\n  {\n    teamMemberBookingProfile: [\n      'team_member_booking_profile',\n      optional(lazy(() => teamMemberBookingProfileSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * A filter to select resources based on an exact field value. For any given\n * value, the value can only be in one property. Depending on the field, either\n * all properties can be set or only a subset will be available.\n * Refer to the documentation of the field.\n */\nexport interface FilterValue {\n  /** A list of terms that must be present on the field of the resource. */\n  all?: string[];\n  /**\n   * A list of terms where at least one of them must be present on the\n   * field of the resource.\n   */\n  any?: string[];\n  /** A list of terms that must not be present on the field the resource */\n  none?: string[];\n}\n\nexport const filterValueSchema: Schema<FilterValue> = object({\n  all: ['all', optional(array(string()))],\n  any: ['any', optional(array(string()))],\n  none: ['none', optional(array(string()))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { FilterValue, filterValueSchema } from './filterValue';\n\n/** A query filter to search for buyer-accessible appointment segments by. */\nexport interface SegmentFilter {\n  /** The ID of the [CatalogItemVariation]($m/CatalogItemVariation) object representing the service booked in this segment. */\n  serviceVariationId: string;\n  /**\n   * A filter to select resources based on an exact field value. For any given\n   * value, the value can only be in one property. Depending on the field, either\n   * all properties can be set or only a subset will be available.\n   * Refer to the documentation of the field.\n   */\n  teamMemberIdFilter?: FilterValue;\n}\n\nexport const segmentFilterSchema: Schema<SegmentFilter> = object({\n  serviceVariationId: ['service_variation_id', string()],\n  teamMemberIdFilter: [\n    'team_member_id_filter',\n    optional(lazy(() => filterValueSchema)),\n  ],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a generic time range. The start and end values are\n * represented in RFC 3339 format. Time ranges are customized to be\n * inclusive or exclusive based on the needs of a particular endpoint.\n * Refer to the relevant endpoint-specific documentation to determine\n * how time ranges are handled.\n */\nexport interface TimeRange {\n  /**\n   * A datetime value in RFC 3339 format indicating when the time range\n   * starts.\n   */\n  startAt?: string;\n  /**\n   * A datetime value in RFC 3339 format indicating when the time range\n   * ends.\n   */\n  endAt?: string;\n}\n\nexport const timeRangeSchema: Schema<TimeRange> = object({\n  startAt: ['start_at', optional(string())],\n  endAt: ['end_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { SegmentFilter, segmentFilterSchema } from './segmentFilter';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/** A query filter to search for buyer-accessible availabilities by. */\nexport interface SearchAvailabilityFilter {\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  startAtRange: TimeRange;\n  /**\n   * The query expression to search for buyer-accessible availabilities with their location IDs matching the specified location ID.\n   * This query expression cannot be set if `booking_id` is set.\n   */\n  locationId?: string;\n  /**\n   * The query expression to search for buyer-accessible availabilities matching the specified list of segment filters.\n   * If the size of the `segment_filters` list is `n`, the search returns availabilities with `n` segments per availability.\n   * This query expression cannot be set if `booking_id` is set.\n   */\n  segmentFilters?: SegmentFilter[];\n  /**\n   * The query expression to search for buyer-accessible availabilities for an existing booking by matching the specified `booking_id` value.\n   * This is commonly used to reschedule an appointment.\n   * If this expression is set, the `location_id` and `segment_filters` expressions cannot be set.\n   */\n  bookingId?: string;\n}\n\nexport const searchAvailabilityFilterSchema: Schema<SearchAvailabilityFilter> = object(\n  {\n    startAtRange: ['start_at_range', lazy(() => timeRangeSchema)],\n    locationId: ['location_id', optional(string())],\n    segmentFilters: [\n      'segment_filters',\n      optional(array(lazy(() => segmentFilterSchema))),\n    ],\n    bookingId: ['booking_id', optional(string())],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport {\n  SearchAvailabilityFilter,\n  searchAvailabilityFilterSchema,\n} from './searchAvailabilityFilter';\n\n/** The query used to search for buyer-accessible availabilities of bookings. */\nexport interface SearchAvailabilityQuery {\n  /** A query filter to search for buyer-accessible availabilities by. */\n  filter: SearchAvailabilityFilter;\n}\n\nexport const searchAvailabilityQuerySchema: Schema<SearchAvailabilityQuery> = object(\n  { filter: ['filter', lazy(() => searchAvailabilityFilterSchema)] }\n);\n","import { lazy, object, Schema } from '../schema';\nimport {\n  SearchAvailabilityQuery,\n  searchAvailabilityQuerySchema,\n} from './searchAvailabilityQuery';\n\nexport interface SearchAvailabilityRequest {\n  /** The query used to search for buyer-accessible availabilities of bookings. */\n  query: SearchAvailabilityQuery;\n}\n\nexport const searchAvailabilityRequestSchema: Schema<SearchAvailabilityRequest> = object(\n  { query: ['query', lazy(() => searchAvailabilityQuerySchema)] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  AppointmentSegment,\n  appointmentSegmentSchema,\n} from './appointmentSegment';\n\n/** Defines an appointment slot that encapsulates the appointment segments, location and starting time available for booking. */\nexport interface Availability {\n  /** The RFC 3339 timestamp specifying the beginning time of the slot available for booking. */\n  startAt?: string;\n  /** The ID of the location available for booking. */\n  locationId?: string;\n  /** The list of appointment segments available for booking */\n  appointmentSegments?: AppointmentSegment[];\n}\n\nexport const availabilitySchema: Schema<Availability> = object({\n  startAt: ['start_at', optional(string())],\n  locationId: ['location_id', optional(string())],\n  appointmentSegments: [\n    'appointment_segments',\n    optional(array(lazy(() => appointmentSegmentSchema))),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Availability, availabilitySchema } from './availability';\nimport { Error, errorSchema } from './error';\n\nexport interface SearchAvailabilityResponse {\n  /** List of appointment slots available for booking. */\n  availabilities?: Availability[];\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const searchAvailabilityResponseSchema: Schema<SearchAvailabilityResponse> = object(\n  {\n    availabilities: [\n      'availabilities',\n      optional(array(lazy(() => availabilitySchema))),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Booking, bookingSchema } from './booking';\n\nexport interface UpdateBookingRequest {\n  /** A unique key to make this request an idempotent operation. */\n  idempotencyKey?: string;\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking: Booking;\n}\n\nexport const updateBookingRequestSchema: Schema<UpdateBookingRequest> = object({\n  idempotencyKey: ['idempotency_key', optional(string())],\n  booking: ['booking', lazy(() => bookingSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Booking, bookingSchema } from './booking';\nimport { Error, errorSchema } from './error';\n\nexport interface UpdateBookingResponse {\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking?: Booking;\n  /** Errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateBookingResponseSchema: Schema<UpdateBookingResponse> = object(\n  {\n    booking: ['booking', optional(lazy(() => bookingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CancelBookingRequest,\n  cancelBookingRequestSchema,\n} from '../models/cancelBookingRequest';\nimport {\n  CancelBookingResponse,\n  cancelBookingResponseSchema,\n} from '../models/cancelBookingResponse';\nimport {\n  CreateBookingRequest,\n  createBookingRequestSchema,\n} from '../models/createBookingRequest';\nimport {\n  CreateBookingResponse,\n  createBookingResponseSchema,\n} from '../models/createBookingResponse';\nimport {\n  ListBookingsResponse,\n  listBookingsResponseSchema,\n} from '../models/listBookingsResponse';\nimport {\n  ListTeamMemberBookingProfilesResponse,\n  listTeamMemberBookingProfilesResponseSchema,\n} from '../models/listTeamMemberBookingProfilesResponse';\nimport {\n  RetrieveBookingResponse,\n  retrieveBookingResponseSchema,\n} from '../models/retrieveBookingResponse';\nimport {\n  RetrieveBusinessBookingProfileResponse,\n  retrieveBusinessBookingProfileResponseSchema,\n} from '../models/retrieveBusinessBookingProfileResponse';\nimport {\n  RetrieveTeamMemberBookingProfileResponse,\n  retrieveTeamMemberBookingProfileResponseSchema,\n} from '../models/retrieveTeamMemberBookingProfileResponse';\nimport {\n  SearchAvailabilityRequest,\n  searchAvailabilityRequestSchema,\n} from '../models/searchAvailabilityRequest';\nimport {\n  SearchAvailabilityResponse,\n  searchAvailabilityResponseSchema,\n} from '../models/searchAvailabilityResponse';\nimport {\n  UpdateBookingRequest,\n  updateBookingRequestSchema,\n} from '../models/updateBookingRequest';\nimport {\n  UpdateBookingResponse,\n  updateBookingResponseSchema,\n} from '../models/updateBookingResponse';\nimport { boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class BookingsApi extends BaseApi {\n  /**\n   * Retrieve a collection of bookings.\n   *\n   * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.\n   * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and\n   * `APPOINTMENTS_READ` for the OAuth scope.\n   *\n   * @param limit          The maximum number of results per page to return in a paged response.\n   * @param cursor         The pagination cursor from the preceding response to return the next page of the\n   *                                 results. Do not set this when retrieving the first page of the results.\n   * @param teamMemberId   The team member for whom to retrieve bookings. If this is not set, bookings of\n   *                                 all members are retrieved.\n   * @param locationId     The location for which to retrieve bookings. If this is not set, all locations'\n   *                                 bookings are retrieved.\n   * @param startAtMin     The RFC 3339 timestamp specifying the earliest of the start time. If this is not\n   *                                 set, the current time is used.\n   * @param startAtMax     The RFC 3339 timestamp specifying the latest of the start time. If this is not\n   *                                 set, the time of 31 days after `start_at_min` is used.\n   * @return Response from the API call\n   */\n  async listBookings(\n    limit?: number,\n    cursor?: string,\n    teamMemberId?: string,\n    locationId?: string,\n    startAtMin?: string,\n    startAtMax?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListBookingsResponse>> {\n    const req = this.createRequest('GET', '/v2/bookings');\n    const mapped = req.prepareArgs({\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n      teamMemberId: [teamMemberId, optional(string())],\n      locationId: [locationId, optional(string())],\n      startAtMin: [startAtMin, optional(string())],\n      startAtMax: [startAtMax, optional(string())],\n    });\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.query('team_member_id', mapped.teamMemberId);\n    req.query('location_id', mapped.locationId);\n    req.query('start_at_min', mapped.startAtMin);\n    req.query('start_at_max', mapped.startAtMax);\n    return req.callAsJson(listBookingsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a booking.\n   *\n   * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n   * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n   * `APPOINTMENTS_WRITE` for the OAuth scope.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createBooking(\n    body: CreateBookingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateBookingResponse>> {\n    const req = this.createRequest('POST', '/v2/bookings');\n    const mapped = req.prepareArgs({\n      body: [body, createBookingRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createBookingResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for availabilities for booking.\n   *\n   * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.\n   * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and\n   * `APPOINTMENTS_READ` for the OAuth scope.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                         See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchAvailability(\n    body: SearchAvailabilityRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchAvailabilityResponse>> {\n    const req = this.createRequest('POST', '/v2/bookings/availability/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchAvailabilityRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchAvailabilityResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a seller's booking profile.\n   *\n   * @return Response from the API call\n   */\n  async retrieveBusinessBookingProfile(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveBusinessBookingProfileResponse>> {\n    const req = this.createRequest(\n      'GET',\n      '/v2/bookings/business-booking-profile'\n    );\n    return req.callAsJson(\n      retrieveBusinessBookingProfileResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Lists booking profiles for team members.\n   *\n   * @param bookableOnly  Indicates whether to include only bookable team members in the returned result\n   *                                 (`true`) or not (`false`).\n   * @param limit         The maximum number of results to return in a paged response.\n   * @param cursor        The pagination cursor from the preceding response to return the next page of the\n   *                                 results. Do not set this when retrieving the first page of the results.\n   * @param locationId    Indicates whether to include only team members enabled at the given location in\n   *                                 the returned result.\n   * @return Response from the API call\n   */\n  async listTeamMemberBookingProfiles(\n    bookableOnly?: boolean,\n    limit?: number,\n    cursor?: string,\n    locationId?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListTeamMemberBookingProfilesResponse>> {\n    const req = this.createRequest(\n      'GET',\n      '/v2/bookings/team-member-booking-profiles'\n    );\n    const mapped = req.prepareArgs({\n      bookableOnly: [bookableOnly, optional(boolean())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n      locationId: [locationId, optional(string())],\n    });\n    req.query('bookable_only', mapped.bookableOnly);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.query('location_id', mapped.locationId);\n    return req.callAsJson(\n      listTeamMemberBookingProfilesResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves a team member's booking profile.\n   *\n   * @param teamMemberId   The ID of the team member to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveTeamMemberBookingProfile(\n    teamMemberId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveTeamMemberBookingProfileResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ teamMemberId: [teamMemberId, string()] });\n    req.appendTemplatePath`/v2/bookings/team-member-booking-profiles/${mapped.teamMemberId}`;\n    return req.callAsJson(\n      retrieveTeamMemberBookingProfileResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves a booking.\n   *\n   * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.\n   * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and\n   * `APPOINTMENTS_READ` for the OAuth scope.\n   *\n   * @param bookingId  The ID of the [Booking]($m/Booking) object representing the to-be-retrieved booking.\n   * @return Response from the API call\n   */\n  async retrieveBooking(\n    bookingId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveBookingResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ bookingId: [bookingId, string()] });\n    req.appendTemplatePath`/v2/bookings/${mapped.bookingId}`;\n    return req.callAsJson(retrieveBookingResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a booking.\n   *\n   * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n   * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n   * `APPOINTMENTS_WRITE` for the OAuth scope.\n   *\n   * @param bookingId    The ID of the [Booking]($m/Booking) object representing the to-\n   *                                                    be-updated booking.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateBooking(\n    bookingId: string,\n    body: UpdateBookingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateBookingResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      bookingId: [bookingId, string()],\n      body: [body, updateBookingRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/bookings/${mapped.bookingId}`;\n    return req.callAsJson(updateBookingResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels an existing booking.\n   *\n   * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n   * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n   * `APPOINTMENTS_WRITE` for the OAuth scope.\n   *\n   * @param bookingId    The ID of the [Booking]($m/Booking) object representing the to-\n   *                                                    be-cancelled booking.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async cancelBooking(\n    bookingId: string,\n    body: CancelBookingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelBookingResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      bookingId: [bookingId, string()],\n      body: [body, cancelBookingRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/bookings/${mapped.bookingId}/cancel`;\n    return req.callAsJson(cancelBookingResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a postal address in a country.\n * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n */\nexport interface Address {\n  /**\n   * The first line of the address.\n   * Fields that start with `address_line` provide the address's most specific\n   * details, like street number, street name, and building name. They do *not*\n   * provide less specific details like city, state/province, or country (these\n   * details are provided in other fields).\n   */\n  addressLine1?: string;\n  /** The second line of the address, if any. */\n  addressLine2?: string;\n  /** The third line of the address, if any. */\n  addressLine3?: string;\n  /** The city or town of the address. For a full list of field meanings by country, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses). */\n  locality?: string;\n  /** A civil region within the address's `locality`, if any. */\n  sublocality?: string;\n  /**\n   * A civil entity within the address's country. In the US, this\n   * is the state. For a full list of field meanings by country, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  administrativeDistrictLevel1?: string;\n  /** The address's postal code. For a full list of field meanings by country, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses). */\n  postalCode?: string;\n  /**\n   * Indicates the country associated with another entity, such as a business.\n   * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).\n   */\n  country?: string;\n}\n\nexport const addressSchema: Schema<Address> = object({\n  addressLine1: ['address_line_1', optional(string())],\n  addressLine2: ['address_line_2', optional(string())],\n  addressLine3: ['address_line_3', optional(string())],\n  locality: ['locality', optional(string())],\n  sublocality: ['sublocality', optional(string())],\n  administrativeDistrictLevel1: [\n    'administrative_district_level_1',\n    optional(string()),\n  ],\n  postalCode: ['postal_code', optional(string())],\n  country: ['country', optional(string())],\n});\n","import {\n  bigint,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Address, addressSchema } from './address';\n\n/**\n * Represents the payment details of a card to be used for payments. These\n * details are determined by the payment token generated by Web Payments SDK.\n */\nexport interface Card {\n  /** Unique ID for this card. Generated by Square. */\n  id?: string;\n  /** Indicates a card's brand, such as `VISA` or `MASTERCARD`. */\n  cardBrand?: string;\n  /** The last 4 digits of the card number. */\n  last4?: string;\n  /** The expiration month of the associated card as an integer between 1 and 12. */\n  expMonth?: bigint;\n  /** The four-digit year of the card's expiration date. */\n  expYear?: bigint;\n  /** The name of the cardholder. */\n  cardholderName?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  billingAddress?: Address;\n  /**\n   * Intended as a Square-assigned identifier, based\n   * on the card number, to identify the card across multiple locations within a\n   * single application.\n   */\n  fingerprint?: string;\n  /** **Required** The ID of a customer created using the Customers API to be associated with the card. */\n  customerId?: string;\n  /** The ID of the merchant associated with the card. */\n  merchantId?: string;\n  /**\n   * An optional user-defined reference ID that associates this card with\n   * another entity in an external system. For example, a customer ID from an\n   * external customer management system.\n   */\n  referenceId?: string;\n  /** Indicates whether or not a card can be used for payments. */\n  enabled?: boolean;\n  /** Indicates a card's type, such as `CREDIT` or `DEBIT`. */\n  cardType?: string;\n  /** Indicates a card's prepaid type, such as `NOT_PREPAID` or `PREPAID`. */\n  prepaidType?: string;\n  /**\n   * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API\n   * returns this field.\n   */\n  bin?: string;\n  /**\n   * Current version number of the card. Increments with each card update. Requests to update an\n   * existing Card object will be rejected unless the version in the request matches the current\n   * version for the Card.\n   */\n  version?: bigint;\n}\n\nexport const cardSchema: Schema<Card> = object({\n  id: ['id', optional(string())],\n  cardBrand: ['card_brand', optional(string())],\n  last4: ['last_4', optional(string())],\n  expMonth: ['exp_month', optional(bigint())],\n  expYear: ['exp_year', optional(bigint())],\n  cardholderName: ['cardholder_name', optional(string())],\n  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n  fingerprint: ['fingerprint', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  enabled: ['enabled', optional(boolean())],\n  cardType: ['card_type', optional(string())],\n  prepaidType: ['prepaid_type', optional(string())],\n  bin: ['bin', optional(string())],\n  version: ['version', optional(bigint())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Card, cardSchema } from './card';\n\n/**\n * Creates a card from the source (nonce, payment id, etc). Accessible via\n * HTTP requests at POST https://connect.squareup.com/v2/cards\n */\nexport interface CreateCardRequest {\n  /**\n   * A unique string that identifies this CreateCard request. Keys can be\n   * any valid string and must be unique for every request.\n   * Max: 45 characters\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /** The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id. */\n  sourceId: string;\n  /**\n   * An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).\n   * Verification tokens encapsulate customer device information and 3-D Secure\n   * challenge results to indicate that Square has verified the buyer identity.\n   * See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).\n   */\n  verificationToken?: string;\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the payment token generated by Web Payments SDK.\n   */\n  card: Card;\n}\n\nexport const createCardRequestSchema: Schema<CreateCardRequest> = object({\n  idempotencyKey: ['idempotency_key', string()],\n  sourceId: ['source_id', string()],\n  verificationToken: ['verification_token', optional(string())],\n  card: ['card', lazy(() => cardSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Card, cardSchema } from './card';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [CreateCard]($e/Cards/CreateCard) endpoint.\n * Note: if there are errors processing the request, the card field will not be\n * present.\n */\nexport interface CreateCardResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the payment token generated by Web Payments SDK.\n   */\n  card?: Card;\n}\n\nexport const createCardResponseSchema: Schema<CreateCardResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  card: ['card', optional(lazy(() => cardSchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Card, cardSchema } from './card';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [DisableCard]($e/Cards/DisableCard) endpoint.\n * Note: if there are errors processing the request, the card field will not be\n * present.\n */\nexport interface DisableCardResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the payment token generated by Web Payments SDK.\n   */\n  card?: Card;\n}\n\nexport const disableCardResponseSchema: Schema<DisableCardResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  card: ['card', optional(lazy(() => cardSchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Card, cardSchema } from './card';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [ListCards]($e/Cards/ListCards) endpoint.\n * Note: if there are errors processing the request, the card field will not be\n * present.\n */\nexport interface ListCardsResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** The requested list of `Card`s. */\n  cards?: Card[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listCardsResponseSchema: Schema<ListCardsResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  cards: ['cards', optional(array(lazy(() => cardSchema)))],\n  cursor: ['cursor', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Card, cardSchema } from './card';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RetrieveCard]($e/Cards/RetrieveCard) endpoint.\n * Note: if there are errors processing the request, the card field will not be\n * present.\n */\nexport interface RetrieveCardResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the payment token generated by Web Payments SDK.\n   */\n  card?: Card;\n}\n\nexport const retrieveCardResponseSchema: Schema<RetrieveCardResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  card: ['card', optional(lazy(() => cardSchema))],\n});\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateCardRequest,\n  createCardRequestSchema,\n} from '../models/createCardRequest';\nimport {\n  CreateCardResponse,\n  createCardResponseSchema,\n} from '../models/createCardResponse';\nimport {\n  DisableCardResponse,\n  disableCardResponseSchema,\n} from '../models/disableCardResponse';\nimport {\n  ListCardsResponse,\n  listCardsResponseSchema,\n} from '../models/listCardsResponse';\nimport {\n  RetrieveCardResponse,\n  retrieveCardResponseSchema,\n} from '../models/retrieveCardResponse';\nimport { boolean, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CardsApi extends BaseApi {\n  /**\n   * Retrieves a list of cards owned by the account making the request.\n   * A max of 25 cards will be returned.\n   *\n   * @param cursor           A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                                    to retrieve the next set of results for your original query.  See\n   *                                    [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for\n   *                                    more information.\n   * @param customerId       Limit results to cards associated with the customer supplied. By default, all\n   *                                    cards owned by the merchant are returned.\n   * @param includeDisabled  Includes disabled cards. By default, all enabled cards owned by the merchant\n   *                                    are returned.\n   * @param referenceId      Limit results to cards associated with the reference_id supplied.\n   * @param sortOrder        Sorts the returned list by when the card was created with the specified order.\n   *                                    This field defaults to ASC.\n   * @return Response from the API call\n   */\n  async listCards(\n    cursor?: string,\n    customerId?: string,\n    includeDisabled?: boolean,\n    referenceId?: string,\n    sortOrder?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCardsResponse>> {\n    const req = this.createRequest('GET', '/v2/cards');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      customerId: [customerId, optional(string())],\n      includeDisabled: [includeDisabled, optional(boolean())],\n      referenceId: [referenceId, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('customer_id', mapped.customerId);\n    req.query('include_disabled', mapped.includeDisabled);\n    req.query('reference_id', mapped.referenceId);\n    req.query('sort_order', mapped.sortOrder);\n    return req.callAsJson(listCardsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Adds a card on file to an existing merchant.\n   *\n   * @param body         An object containing the fields to POST for the request.  See the\n   *                                                 corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createCard(\n    body: CreateCardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCardResponse>> {\n    const req = this.createRequest('POST', '/v2/cards');\n    const mapped = req.prepareArgs({ body: [body, createCardRequestSchema] });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createCardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves details for a specific Card.\n   *\n   * @param cardId  Unique ID for the desired Card.\n   * @return Response from the API call\n   */\n  async retrieveCard(\n    cardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCardResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ cardId: [cardId, string()] });\n    req.appendTemplatePath`/v2/cards/${mapped.cardId}`;\n    return req.callAsJson(retrieveCardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Disables the card, preventing any further updates or charges.\n   * Disabling an already disabled card is allowed but has no effect.\n   *\n   * @param cardId  Unique ID for the desired Card.\n   * @return Response from the API call\n   */\n  async disableCard(\n    cardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DisableCardResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ cardId: [cardId, string()] });\n    req.appendTemplatePath`/v2/cards/${mapped.cardId}/disable`;\n    return req.callAsJson(disableCardResponseSchema, requestOptions);\n  }\n}\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\nexport interface CashDrawerShiftEvent {\n  /** The unique ID of the event. */\n  id?: string;\n  /** The ID of the employee that created the event. */\n  employeeId?: string;\n  /**\n   * The types of events on a CashDrawerShift.\n   * Each event type represents an employee action on the actual cash drawer\n   * represented by a CashDrawerShift.\n   */\n  eventType?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  eventMoney?: Money;\n  /** The event time in ISO 8601 format. */\n  createdAt?: string;\n  /**\n   * An optional description of the event, entered by the employee that\n   * created the event.\n   */\n  description?: string;\n}\n\nexport const cashDrawerShiftEventSchema: Schema<CashDrawerShiftEvent> = object({\n  id: ['id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  eventType: ['event_type', optional(string())],\n  eventMoney: ['event_money', optional(lazy(() => moneySchema))],\n  createdAt: ['created_at', optional(string())],\n  description: ['description', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  CashDrawerShiftEvent,\n  cashDrawerShiftEventSchema,\n} from './cashDrawerShiftEvent';\nimport { Error, errorSchema } from './error';\n\nexport interface ListCashDrawerShiftEventsResponse {\n  /**\n   * All of the events (payments, refunds, etc.) for a cash drawer during\n   * the shift.\n   */\n  events?: CashDrawerShiftEvent[];\n  /**\n   * Opaque cursor for fetching the next page. Cursor is not present in\n   * the last page of results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listCashDrawerShiftEventsResponseSchema: Schema<ListCashDrawerShiftEventsResponse> = object(\n  {\n    events: ['events', optional(array(lazy(() => cashDrawerShiftEventSchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * The summary of a closed cash drawer shift.\n * This model contains only the money counted to start a cash drawer shift, counted\n * at the end of the shift, and the amount that should be in the drawer at shift\n * end based on summing all cash drawer shift events.\n */\nexport interface CashDrawerShiftSummary {\n  /** The shift unique ID. */\n  id?: string;\n  /** The current state of a cash drawer shift. */\n  state?: string;\n  /** The shift start time in ISO 8601 format. */\n  openedAt?: string;\n  /** The shift end time in ISO 8601 format. */\n  endedAt?: string;\n  /** The shift close time in ISO 8601 format. */\n  closedAt?: string;\n  /** An employee free-text description of a cash drawer shift. */\n  description?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  openedCashMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  expectedCashMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  closedCashMoney?: Money;\n}\n\nexport const cashDrawerShiftSummarySchema: Schema<CashDrawerShiftSummary> = object(\n  {\n    id: ['id', optional(string())],\n    state: ['state', optional(string())],\n    openedAt: ['opened_at', optional(string())],\n    endedAt: ['ended_at', optional(string())],\n    closedAt: ['closed_at', optional(string())],\n    description: ['description', optional(string())],\n    openedCashMoney: ['opened_cash_money', optional(lazy(() => moneySchema))],\n    expectedCashMoney: [\n      'expected_cash_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    closedCashMoney: ['closed_cash_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  CashDrawerShiftSummary,\n  cashDrawerShiftSummarySchema,\n} from './cashDrawerShiftSummary';\nimport { Error, errorSchema } from './error';\n\nexport interface ListCashDrawerShiftsResponse {\n  /**\n   * A collection of CashDrawerShiftSummary objects for shifts that match\n   * the query.\n   */\n  items?: CashDrawerShiftSummary[];\n  /**\n   * Opaque cursor for fetching the next page of results. Cursor is not\n   * present in the last page of results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listCashDrawerShiftsResponseSchema: Schema<ListCashDrawerShiftsResponse> = object(\n  {\n    items: ['items', optional(array(lazy(() => cashDrawerShiftSummarySchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface CashDrawerDevice {\n  /** The device Square-issued ID */\n  id?: string;\n  /** The device merchant-specified name. */\n  name?: string;\n}\n\nexport const cashDrawerDeviceSchema: Schema<CashDrawerDevice> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CashDrawerDevice, cashDrawerDeviceSchema } from './cashDrawerDevice';\nimport { Money, moneySchema } from './money';\n\n/**\n * This model gives the details of a cash drawer shift.\n * The cash_payment_money, cash_refund_money, cash_paid_in_money,\n * and cash_paid_out_money fields are all computed by summing their respective\n * event types.\n */\nexport interface CashDrawerShift {\n  /** The shift unique ID. */\n  id?: string;\n  /** The current state of a cash drawer shift. */\n  state?: string;\n  /** The time when the shift began, in ISO 8601 format. */\n  openedAt?: string;\n  /** The time when the shift ended, in ISO 8601 format. */\n  endedAt?: string;\n  /** The time when the shift was closed, in ISO 8601 format. */\n  closedAt?: string;\n  /**\n   * The IDs of all employees that were logged into Square Point of Sale at any\n   * point while the cash drawer shift was open.\n   */\n  employeeIds?: string[];\n  /** The ID of the employee that started the cash drawer shift. */\n  openingEmployeeId?: string;\n  /** The ID of the employee that ended the cash drawer shift. */\n  endingEmployeeId?: string;\n  /**\n   * The ID of the employee that closed the cash drawer shift by auditing\n   * the cash drawer contents.\n   */\n  closingEmployeeId?: string;\n  /** The free-form text description of a cash drawer by an employee. */\n  description?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  openedCashMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cashPaymentMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cashRefundsMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cashPaidInMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cashPaidOutMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  expectedCashMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  closedCashMoney?: Money;\n  device?: CashDrawerDevice;\n}\n\nexport const cashDrawerShiftSchema: Schema<CashDrawerShift> = object({\n  id: ['id', optional(string())],\n  state: ['state', optional(string())],\n  openedAt: ['opened_at', optional(string())],\n  endedAt: ['ended_at', optional(string())],\n  closedAt: ['closed_at', optional(string())],\n  employeeIds: ['employee_ids', optional(array(string()))],\n  openingEmployeeId: ['opening_employee_id', optional(string())],\n  endingEmployeeId: ['ending_employee_id', optional(string())],\n  closingEmployeeId: ['closing_employee_id', optional(string())],\n  description: ['description', optional(string())],\n  openedCashMoney: ['opened_cash_money', optional(lazy(() => moneySchema))],\n  cashPaymentMoney: ['cash_payment_money', optional(lazy(() => moneySchema))],\n  cashRefundsMoney: ['cash_refunds_money', optional(lazy(() => moneySchema))],\n  cashPaidInMoney: ['cash_paid_in_money', optional(lazy(() => moneySchema))],\n  cashPaidOutMoney: ['cash_paid_out_money', optional(lazy(() => moneySchema))],\n  expectedCashMoney: ['expected_cash_money', optional(lazy(() => moneySchema))],\n  closedCashMoney: ['closed_cash_money', optional(lazy(() => moneySchema))],\n  device: ['device', optional(lazy(() => cashDrawerDeviceSchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CashDrawerShift, cashDrawerShiftSchema } from './cashDrawerShift';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveCashDrawerShiftResponse {\n  /**\n   * This model gives the details of a cash drawer shift.\n   * The cash_payment_money, cash_refund_money, cash_paid_in_money,\n   * and cash_paid_out_money fields are all computed by summing their respective\n   * event types.\n   */\n  cashDrawerShift?: CashDrawerShift;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveCashDrawerShiftResponseSchema: Schema<RetrieveCashDrawerShiftResponse> = object(\n  {\n    cashDrawerShift: [\n      'cash_drawer_shift',\n      optional(lazy(() => cashDrawerShiftSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  ListCashDrawerShiftEventsResponse,\n  listCashDrawerShiftEventsResponseSchema,\n} from '../models/listCashDrawerShiftEventsResponse';\nimport {\n  ListCashDrawerShiftsResponse,\n  listCashDrawerShiftsResponseSchema,\n} from '../models/listCashDrawerShiftsResponse';\nimport {\n  RetrieveCashDrawerShiftResponse,\n  retrieveCashDrawerShiftResponseSchema,\n} from '../models/retrieveCashDrawerShiftResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CashDrawersApi extends BaseApi {\n  /**\n   * Provides the details for all of the cash drawer shifts for a location\n   * in a date range.\n   *\n   * @param locationId  The ID of the location to query for a list of cash drawer shifts.\n   * @param sortOrder   The order in which cash drawer shifts are listed in the response, based on their\n   *                              opened_at field. Default value: ASC\n   * @param beginTime   The inclusive start time of the query on opened_at, in ISO 8601 format.\n   * @param endTime     The exclusive end date of the query on opened_at, in ISO 8601 format.\n   * @param limit       Number of cash drawer shift events in a page of results (200 by default, 1000 max).\n   * @param cursor      Opaque cursor for fetching the next page of results.\n   * @return Response from the API call\n   */\n  async listCashDrawerShifts(\n    locationId: string,\n    sortOrder?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCashDrawerShiftsResponse>> {\n    const req = this.createRequest('GET', '/v2/cash-drawers/shifts');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      sortOrder: [sortOrder, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listCashDrawerShiftsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Provides the summary details for a single cash drawer shift. See\n   * [ListCashDrawerShiftEvents]($e/CashDrawers/ListCashDrawerShiftEvents) for a list of cash drawer\n   * shift events.\n   *\n   * @param locationId  The ID of the location to retrieve cash drawer shifts from.\n   * @param shiftId     The shift ID.\n   * @return Response from the API call\n   */\n  async retrieveCashDrawerShift(\n    locationId: string,\n    shiftId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCashDrawerShiftResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      shiftId: [shiftId, string()],\n    });\n    req.query('location_id', mapped.locationId);\n    req.appendTemplatePath`/v2/cash-drawers/shifts/${mapped.shiftId}`;\n    return req.callAsJson(\n      retrieveCashDrawerShiftResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Provides a paginated list of events for a single cash drawer shift.\n   *\n   * @param locationId  The ID of the location to list cash drawer shifts for.\n   * @param shiftId     The shift ID.\n   * @param limit       Number of resources to be returned in a page of results (200 by default, 1000 max).\n   * @param cursor      Opaque cursor for fetching the next page of results.\n   * @return Response from the API call\n   */\n  async listCashDrawerShiftEvents(\n    locationId: string,\n    shiftId: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCashDrawerShiftEventsResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      shiftId: [shiftId, string()],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/cash-drawers/shifts/${mapped.shiftId}/events`;\n    return req.callAsJson(\n      listCashDrawerShiftEventsResponseSchema,\n      requestOptions\n    );\n  }\n}\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface BatchDeleteCatalogObjectsRequest {\n  /**\n   * The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects\n   * in the graph that depend on that object will be deleted as well (for example, deleting a\n   * CatalogItem will delete its CatalogItemVariation.\n   */\n  objectIds?: string[];\n}\n\nexport const batchDeleteCatalogObjectsRequestSchema: Schema<BatchDeleteCatalogObjectsRequest> = object(\n  { objectIds: ['object_ids', optional(array(string()))] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface BatchDeleteCatalogObjectsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The IDs of all CatalogObjects deleted by this request. */\n  deletedObjectIds?: string[];\n  /** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". */\n  deletedAt?: string;\n}\n\nexport const batchDeleteCatalogObjectsResponseSchema: Schema<BatchDeleteCatalogObjectsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deletedObjectIds: ['deleted_object_ids', optional(array(string()))],\n    deletedAt: ['deleted_at', optional(string())],\n  }\n);\n","import {\n  array,\n  bigint,\n  boolean,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\n\nexport interface BatchRetrieveCatalogObjectsRequest {\n  /** The IDs of the CatalogObjects to be retrieved. */\n  objectIds: string[];\n  /**\n   * If `true`, the response will include additional objects that are related to the\n   * requested objects. Related objects are defined as any objects referenced by ID by the results in the `objects` field\n   * of the response. These objects are put in the `related_objects` field. Setting this to `true` is\n   * helpful when the objects are needed for immediate display to a user.\n   * This process only goes one level deep. Objects referenced by the related objects will not be included. For example,\n   * if the `objects` field of the response contains a CatalogItem, its associated\n   * CatalogCategory objects, CatalogTax objects, CatalogImage objects and\n   * CatalogModifierLists will be returned in the `related_objects` field of the\n   * response. If the `objects` field of the response contains a CatalogItemVariation,\n   * its parent CatalogItem will be returned in the `related_objects` field of\n   * the response.\n   * Default value: `false`\n   */\n  includeRelatedObjects?: boolean;\n  /**\n   * The specific version of the catalog objects to be included in the response.\n   * This allows you to retrieve historical versions of objects. The specified version value is matched against\n   * the [CatalogObject]($m/CatalogObject)s' `version` attribute. If not included, results will\n   * be from the current version of the catalog.\n   */\n  catalogVersion?: bigint;\n  /** Indicates whether to include (`true`) or not (`false`) in the response deleted objects, namely, those with the `is_deleted` attribute set to `true`. */\n  includeDeletedObjects?: boolean;\n}\n\nexport const batchRetrieveCatalogObjectsRequestSchema: Schema<BatchRetrieveCatalogObjectsRequest> = object(\n  {\n    objectIds: ['object_ids', array(string())],\n    includeRelatedObjects: ['include_related_objects', optional(boolean())],\n    catalogVersion: ['catalog_version', optional(bigint())],\n    includeDeletedObjects: ['include_deleted_objects', optional(boolean())],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** A category to which a `CatalogItem` instance belongs. */\nexport interface CatalogCategory {\n  /** The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /**\n   * The IDs of images associated with this `CatalogCategory` instance.\n   * Currently these images are not displayed by Square, but are free to be displayed in 3rd party applications.\n   */\n  imageIds?: string[];\n}\n\nexport const catalogCategorySchema: Schema<CatalogCategory> = object({\n  name: ['name', optional(string())],\n  imageIds: ['image_ids', optional(array(string()))],\n});\n","import { number, object, optional, Schema } from '../schema';\n\nexport interface CatalogCustomAttributeDefinitionNumberConfig {\n  /**\n   * An integer between 0 and 5 that represents the maximum number of\n   * positions allowed after the decimal in number custom attribute values\n   * For example:\n   * - if the precision is 0, the quantity can be 1, 2, 3, etc.\n   * - if the precision is 1, the quantity can be 0.1, 0.2, etc.\n   * - if the precision is 2, the quantity can be 0.01, 0.12, etc.\n   * Default: 5\n   */\n  precision?: number;\n}\n\nexport const catalogCustomAttributeDefinitionNumberConfigSchema: Schema<CatalogCustomAttributeDefinitionNumberConfig> = object(\n  { precision: ['precision', optional(number())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** A named selection for this `SELECTION`-type custom attribute definition. */\nexport interface CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection {\n  /** Unique ID set by Square. */\n  uid?: string;\n  /** Selection name, unique within `allowed_selections`. */\n  name: string;\n}\n\nexport const catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionSchema: Schema<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> = object(\n  { uid: ['uid', optional(string())], name: ['name', string()] }\n);\n","import { array, lazy, number, object, optional, Schema } from '../schema';\nimport {\n  CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection,\n  catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionSchema,\n} from './catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection';\n\n/** Configuration associated with `SELECTION`-type custom attribute definitions. */\nexport interface CatalogCustomAttributeDefinitionSelectionConfig {\n  /**\n   * The maximum number of selections that can be set. The maximum value for this\n   * attribute is 100. The default value is 1. The value can be modified, but changing the value will not\n   * affect existing custom attribute values on objects. Clients need to\n   * handle custom attributes with more selected values than allowed by this limit.\n   */\n  maxAllowedSelections?: number;\n  /**\n   * The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100\n   * selections can be defined. Can be modified.\n   */\n  allowedSelections?: CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection[];\n}\n\nexport const catalogCustomAttributeDefinitionSelectionConfigSchema: Schema<CatalogCustomAttributeDefinitionSelectionConfig> = object(\n  {\n    maxAllowedSelections: ['max_allowed_selections', optional(number())],\n    allowedSelections: [\n      'allowed_selections',\n      optional(\n        array(\n          lazy(\n            () =>\n              catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionSchema\n          )\n        )\n      ),\n    ],\n  }\n);\n","import { boolean, object, optional, Schema } from '../schema';\n\n/** Configuration associated with Custom Attribute Definitions of type `STRING`. */\nexport interface CatalogCustomAttributeDefinitionStringConfig {\n  /**\n   * If true, each Custom Attribute instance associated with this Custom Attribute\n   * Definition must have a unique value within the seller's catalog. For\n   * example, this may be used for a value like a SKU that should not be\n   * duplicated within a seller's catalog. May not be modified after the\n   * definition has been created.\n   */\n  enforceUniqueness?: boolean;\n}\n\nexport const catalogCustomAttributeDefinitionStringConfigSchema: Schema<CatalogCustomAttributeDefinitionStringConfig> = object(\n  { enforceUniqueness: ['enforce_uniqueness', optional(boolean())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Provides information about the application used to generate a change. */\nexport interface SourceApplication {\n  /** Indicates the Square product used to generate an inventory change. */\n  product?: string;\n  /**\n   * Read-only Square ID assigned to the application. Only used for\n   * [Product]($m/Product) type `EXTERNAL_API`.\n   */\n  applicationId?: string;\n  /**\n   * Read-only display name assigned to the application\n   * (e.g. `\"Custom Application\"`, `\"Square POS 4.74 for Android\"`).\n   */\n  name?: string;\n}\n\nexport const sourceApplicationSchema: Schema<SourceApplication> = object({\n  product: ['product', optional(string())],\n  applicationId: ['application_id', optional(string())],\n  name: ['name', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogCustomAttributeDefinitionNumberConfig,\n  catalogCustomAttributeDefinitionNumberConfigSchema,\n} from './catalogCustomAttributeDefinitionNumberConfig';\nimport {\n  CatalogCustomAttributeDefinitionSelectionConfig,\n  catalogCustomAttributeDefinitionSelectionConfigSchema,\n} from './catalogCustomAttributeDefinitionSelectionConfig';\nimport {\n  CatalogCustomAttributeDefinitionStringConfig,\n  catalogCustomAttributeDefinitionStringConfigSchema,\n} from './catalogCustomAttributeDefinitionStringConfig';\nimport {\n  SourceApplication,\n  sourceApplicationSchema,\n} from './sourceApplication';\n\n/**\n * Contains information defining a custom attribute. Custom attributes are\n * intended to store additional information about a catalog object or to associate a\n * catalog object with an entity in another system. Do not use custom attributes\n * to store any sensitive information (personally identifiable information, card details, etc.).\n * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)\n */\nexport interface CatalogCustomAttributeDefinition {\n  /** Defines the possible types for a custom attribute. */\n  type: string;\n  /**\n   * The name of this definition for API and seller-facing UI purposes.\n   * The name must be unique within the (merchant, application) pair. Required.\n   * May not be empty and may not exceed 255 characters. Can be modified after creation.\n   */\n  name: string;\n  /**\n   * Seller-oriented description of the meaning of this Custom Attribute,\n   * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.\n   */\n  description?: string;\n  /** Provides information about the application used to generate a change. */\n  sourceApplication?: SourceApplication;\n  /**\n   * The set of Catalog Object Types that this Custom Attribute may be applied to.\n   * Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.\n   * See [CatalogObjectType](#type-catalogobjecttype) for possible values\n   */\n  allowedObjectTypes: string[];\n  /**\n   * Defines the visibility of a custom attribute to sellers in Square\n   * client applications, Square APIs or in Square UIs (including Square Point\n   * of Sale applications and Square Dashboard).\n   */\n  sellerVisibility?: string;\n  /**\n   * Defines the visibility of a custom attribute to applications other than their\n   * creating application.\n   */\n  appVisibility?: string;\n  /** Configuration associated with Custom Attribute Definitions of type `STRING`. */\n  stringConfig?: CatalogCustomAttributeDefinitionStringConfig;\n  numberConfig?: CatalogCustomAttributeDefinitionNumberConfig;\n  /** Configuration associated with `SELECTION`-type custom attribute definitions. */\n  selectionConfig?: CatalogCustomAttributeDefinitionSelectionConfig;\n  /**\n   * __Read-only.__ The number of custom attributes that reference this\n   * custom attribute definition. Set by the server in response to a ListCatalog\n   * request with `include_counts` set to `true`.  If the actual count is greater\n   * than 100, `custom_attribute_usage_count` will be set to `100`.\n   */\n  customAttributeUsageCount?: number;\n  /**\n   * The name of the desired custom attribute key that can be used to access\n   * the custom attribute value on catalog objects. Cannot be modified after the\n   * custom attribute definition has been created.\n   * Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.\n   */\n  key?: string;\n}\n\nexport const catalogCustomAttributeDefinitionSchema: Schema<CatalogCustomAttributeDefinition> = object(\n  {\n    type: ['type', string()],\n    name: ['name', string()],\n    description: ['description', optional(string())],\n    sourceApplication: [\n      'source_application',\n      optional(lazy(() => sourceApplicationSchema)),\n    ],\n    allowedObjectTypes: ['allowed_object_types', array(string())],\n    sellerVisibility: ['seller_visibility', optional(string())],\n    appVisibility: ['app_visibility', optional(string())],\n    stringConfig: [\n      'string_config',\n      optional(lazy(() => catalogCustomAttributeDefinitionStringConfigSchema)),\n    ],\n    numberConfig: [\n      'number_config',\n      optional(lazy(() => catalogCustomAttributeDefinitionNumberConfigSchema)),\n    ],\n    selectionConfig: [\n      'selection_config',\n      optional(\n        lazy(() => catalogCustomAttributeDefinitionSelectionConfigSchema)\n      ),\n    ],\n    customAttributeUsageCount: [\n      'custom_attribute_usage_count',\n      optional(number()),\n    ],\n    key: ['key', optional(string())],\n  }\n);\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\n/**\n * An instance of a custom attribute. Custom attributes can be defined and\n * added to `ITEM` and `ITEM_VARIATION` type catalog objects.\n * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).\n */\nexport interface CatalogCustomAttributeValue {\n  /** The name of the custom attribute. */\n  name?: string;\n  /** The string value of the custom attribute.  Populated if `type` = `STRING`. */\n  stringValue?: string;\n  /** __Read-only.__ The id of the [CatalogCustomAttributeDefinition]($m/CatalogCustomAttributeDefinition) this value belongs to. */\n  customAttributeDefinitionId?: string;\n  /** Defines the possible types for a custom attribute. */\n  type?: string;\n  /**\n   * Populated if `type` = `NUMBER`. Contains a string\n   * representation of a decimal number, using a `.` as the decimal separator.\n   */\n  numberValue?: string;\n  /** A `true` or `false` value. Populated if `type` = `BOOLEAN`. */\n  booleanValue?: boolean;\n  /** One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`. */\n  selectionUidValues?: string[];\n  /** __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`. */\n  key?: string;\n}\n\nexport const catalogCustomAttributeValueSchema: Schema<CatalogCustomAttributeValue> = object(\n  {\n    name: ['name', optional(string())],\n    stringValue: ['string_value', optional(string())],\n    customAttributeDefinitionId: [\n      'custom_attribute_definition_id',\n      optional(string()),\n    ],\n    type: ['type', optional(string())],\n    numberValue: ['number_value', optional(string())],\n    booleanValue: ['boolean_value', optional(boolean())],\n    selectionUidValues: ['selection_uid_values', optional(array(string()))],\n    key: ['key', optional(string())],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A discount applicable to items. */\nexport interface CatalogDiscount {\n  /** The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /** How to apply a CatalogDiscount to a CatalogItem. */\n  discountType?: string;\n  /**\n   * The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal\n   * separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`\n   * is `VARIABLE_PERCENTAGE`.\n   * Do not use this field for amount-based or variable discounts.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Indicates whether a mobile staff member needs to enter their PIN to apply the\n   * discount to a payment in the Square Point of Sale app.\n   */\n  pinRequired?: boolean;\n  /** The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code. */\n  labelColor?: string;\n  modifyTaxBasis?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  maximumAmountMoney?: Money;\n}\n\nexport const catalogDiscountSchema: Schema<CatalogDiscount> = object({\n  name: ['name', optional(string())],\n  discountType: ['discount_type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  pinRequired: ['pin_required', optional(boolean())],\n  labelColor: ['label_color', optional(string())],\n  modifyTaxBasis: ['modify_tax_basis', optional(string())],\n  maximumAmountMoney: [\n    'maximum_amount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * An image file to use in Square catalogs. It can be associated with\n * `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, and `CatalogModifierList` objects.\n * Only the images on items and item variations are exposed in Dashboard.\n * Only the first image on an item is displayed in Square Point of Sale (SPOS).\n * Images on items and variations are displayed through Square Online Store.\n * Images on other object types are for use by 3rd party application developers.\n */\nexport interface CatalogImage {\n  /**\n   * The internal name to identify this image in calls to the Square API.\n   * This is a searchable attribute for use in applicable query filters\n   * using the [SearchCatalogObjects]($e/Catalog/SearchCatalogObjects).\n   * It is not unique and should not be shown in a buyer facing context.\n   */\n  name?: string;\n  /**\n   * The URL of this image, generated by Square after an image is uploaded\n   * using the [CreateCatalogImage]($e/Catalog/CreateCatalogImage) endpoint.\n   * To modify the image, use the UpdateCatalogImage endpoint. Do not change the URL field.\n   */\n  url?: string;\n  /**\n   * A caption that describes what is shown in the image. Displayed in the\n   * Square Online Store. This is a searchable attribute for use in applicable query filters\n   * using the [SearchCatalogObjects]($e/Catalog/SearchCatalogObjects).\n   */\n  caption?: string;\n  /** The immutable order ID for this image object created by the Photo Studio service in Square Online Store. */\n  photoStudioOrderId?: string;\n}\n\nexport const catalogImageSchema: Schema<CatalogImage> = object({\n  name: ['name', optional(string())],\n  url: ['url', optional(string())],\n  caption: ['caption', optional(string())],\n  photoStudioOrderId: ['photo_studio_order_id', optional(string())],\n});\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** Options to control how to override the default behavior of the specified modifier. */\nexport interface CatalogModifierOverride {\n  /** The ID of the `CatalogModifier` whose default behavior is being overridden. */\n  modifierId: string;\n  /** If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`. */\n  onByDefault?: boolean;\n}\n\nexport const catalogModifierOverrideSchema: Schema<CatalogModifierOverride> = object(\n  {\n    modifierId: ['modifier_id', string()],\n    onByDefault: ['on_by_default', optional(boolean())],\n  }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogModifierOverride,\n  catalogModifierOverrideSchema,\n} from './catalogModifierOverride';\n\n/** Options to control the properties of a `CatalogModifierList` applied to a `CatalogItem` instance. */\nexport interface CatalogItemModifierListInfo {\n  /** The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`. */\n  modifierListId: string;\n  /** A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default. */\n  modifierOverrides?: CatalogModifierOverride[];\n  /** If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`. */\n  minSelectedModifiers?: number;\n  /** If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`. */\n  maxSelectedModifiers?: number;\n  /** If `true`, enable this `CatalogModifierList`. The default value is `true`. */\n  enabled?: boolean;\n}\n\nexport const catalogItemModifierListInfoSchema: Schema<CatalogItemModifierListInfo> = object(\n  {\n    modifierListId: ['modifier_list_id', string()],\n    modifierOverrides: [\n      'modifier_overrides',\n      optional(array(lazy(() => catalogModifierOverrideSchema))),\n    ],\n    minSelectedModifiers: ['min_selected_modifiers', optional(number())],\n    maxSelectedModifiers: ['max_selected_modifiers', optional(number())],\n    enabled: ['enabled', optional(boolean())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * An option that can be assigned to an item.\n * For example, a t-shirt item may offer a color option or a size option.\n */\nexport interface CatalogItemOptionForItem {\n  /** The unique id of the item option, used to form the dimensions of the item option matrix in a specified order. */\n  itemOptionId?: string;\n}\n\nexport const catalogItemOptionForItemSchema: Schema<CatalogItemOptionForItem> = object(\n  { itemOptionId: ['item_option_id', optional(string())] }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogItemModifierListInfo,\n  catalogItemModifierListInfoSchema,\n} from './catalogItemModifierListInfo';\nimport {\n  CatalogItemOptionForItem,\n  catalogItemOptionForItemSchema,\n} from './catalogItemOptionForItem';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\n/** A [CatalogObject]($m/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog. */\nexport interface CatalogItem {\n  /** The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points. */\n  name?: string;\n  /** The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  description?: string;\n  /**\n   * The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.\n   * This attribute is searchable, and its value length is of Unicode code points.\n   */\n  abbreviation?: string;\n  /** The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code. */\n  labelColor?: string;\n  /** If `true`, the item can be added to shipping orders from the merchant's online store. */\n  availableOnline?: boolean;\n  /** If `true`, the item can be added to pickup orders from the merchant's online store. */\n  availableForPickup?: boolean;\n  /** If `true`, the item can be added to electronically fulfilled orders from the merchant's online store. */\n  availableElectronically?: boolean;\n  /** The ID of the item's category, if any. */\n  categoryId?: string;\n  /**\n   * A set of IDs indicating the taxes enabled for\n   * this item. When updating an item, any taxes listed here will be added to the item.\n   * Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.\n   */\n  taxIds?: string[];\n  /**\n   * A set of `CatalogItemModifierListInfo` objects\n   * representing the modifier lists that apply to this item, along with the overrides and min\n   * and max limits that are specific to this item. Modifier lists\n   * may also be added to or deleted from an item using `UpdateItemModifierLists`.\n   */\n  modifierListInfo?: CatalogItemModifierListInfo[];\n  /**\n   * A list of [CatalogItemVariation]($m/CatalogItemVariation) objects for this item. An item must have\n   * at least one variation.\n   */\n  variations?: CatalogObject[];\n  /** The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items. */\n  productType?: string;\n  /**\n   * If `false`, the Square Point of Sale app will present the `CatalogItem`'s\n   * details screen immediately, allowing the merchant to choose `CatalogModifier`s\n   * before adding the item to the cart.  This is the default behavior.\n   * If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected\n   * modifiers, and merchants can edit modifiers by drilling down onto the item's details.\n   * Third-party clients are encouraged to implement similar behaviors.\n   */\n  skipModifierScreen?: boolean;\n  /**\n   * List of item options IDs for this item. Used to manage and group item\n   * variations in a specified order.\n   * Maximum: 6 item options.\n   */\n  itemOptions?: CatalogItemOptionForItem[];\n  /**\n   * The IDs of images associated with this `CatalogItem` instance.\n   * These images will be shown to customers in Square Online Store.\n   * The first image will show up as the icon for this item in POS.\n   */\n  imageIds?: string[];\n  /**\n   * A name to sort the item by. If this name is unspecified, namely, the `sort_name` field is absent, the regular `name` field is used for sorting.\n   * It is currently supported for sellers of the Japanese locale only.\n   */\n  sortName?: string;\n}\n\nexport const catalogItemSchema: Schema<CatalogItem> = object({\n  name: ['name', optional(string())],\n  description: ['description', optional(string())],\n  abbreviation: ['abbreviation', optional(string())],\n  labelColor: ['label_color', optional(string())],\n  availableOnline: ['available_online', optional(boolean())],\n  availableForPickup: ['available_for_pickup', optional(boolean())],\n  availableElectronically: ['available_electronically', optional(boolean())],\n  categoryId: ['category_id', optional(string())],\n  taxIds: ['tax_ids', optional(array(string()))],\n  modifierListInfo: [\n    'modifier_list_info',\n    optional(array(lazy(() => catalogItemModifierListInfoSchema))),\n  ],\n  variations: ['variations', optional(array(lazy(() => catalogObjectSchema)))],\n  productType: ['product_type', optional(string())],\n  skipModifierScreen: ['skip_modifier_screen', optional(boolean())],\n  itemOptions: [\n    'item_options',\n    optional(array(lazy(() => catalogItemOptionForItemSchema))),\n  ],\n  imageIds: ['image_ids', optional(array(string()))],\n  sortName: ['sort_name', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\n/** A group of variations for a `CatalogItem`. */\nexport interface CatalogItemOption {\n  /**\n   * The item option's display name for the seller. Must be unique across\n   * all item options. This is a searchable attribute for use in applicable query filters.\n   */\n  name?: string;\n  /** The item option's display name for the customer. This is a searchable attribute for use in applicable query filters. */\n  displayName?: string;\n  /**\n   * The item option's human-readable description. Displayed in the Square\n   * Point of Sale app for the seller and in the Online Store or on receipts for\n   * the buyer. This is a searchable attribute for use in applicable query filters.\n   */\n  description?: string;\n  /** If true, display colors for entries in `values` when present. */\n  showColors?: boolean;\n  /**\n   * A list of CatalogObjects containing the\n   * `CatalogItemOptionValue`s for this item.\n   */\n  values?: CatalogObject[];\n}\n\nexport const catalogItemOptionSchema: Schema<CatalogItemOption> = object({\n  name: ['name', optional(string())],\n  displayName: ['display_name', optional(string())],\n  description: ['description', optional(string())],\n  showColors: ['show_colors', optional(boolean())],\n  values: ['values', optional(array(lazy(() => catalogObjectSchema)))],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * An enumerated value that can link a\n * `CatalogItemVariation` to an item option as one of\n * its item option values.\n */\nexport interface CatalogItemOptionValue {\n  /** Unique ID of the associated item option. */\n  itemOptionId?: string;\n  /** Name of this item option value. This is a searchable attribute for use in applicable query filters. */\n  name?: string;\n  /** A human-readable description for the option value. This is a searchable attribute for use in applicable query filters. */\n  description?: string;\n  /**\n   * The HTML-supported hex color for the item option (e.g., \"#ff8d4e85\").\n   * Only displayed if `show_colors` is enabled on the parent `ItemOption`. When\n   * left unset, `color` defaults to white (\"#ffffff\") when `show_colors` is\n   * enabled on the parent `ItemOption`.\n   */\n  color?: string;\n  /** Determines where this option value appears in a list of option values. */\n  ordinal?: number;\n}\n\nexport const catalogItemOptionValueSchema: Schema<CatalogItemOptionValue> = object(\n  {\n    itemOptionId: ['item_option_id', optional(string())],\n    name: ['name', optional(string())],\n    description: ['description', optional(string())],\n    color: ['color', optional(string())],\n    ordinal: ['ordinal', optional(number())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A `CatalogItemOptionValue` links an item variation to an item option as\n * an item option value. For example, a t-shirt item may offer a color option and\n * a size option. An item option value would represent each variation of t-shirt:\n * For example, \"Color:Red, Size:Small\" or \"Color:Blue, Size:Medium\".\n */\nexport interface CatalogItemOptionValueForItemVariation {\n  /** The unique id of an item option. */\n  itemOptionId?: string;\n  /** The unique id of the selected value for the item option. */\n  itemOptionValueId?: string;\n}\n\nexport const catalogItemOptionValueForItemVariationSchema: Schema<CatalogItemOptionValueForItemVariation> = object(\n  {\n    itemOptionId: ['item_option_id', optional(string())],\n    itemOptionValueId: ['item_option_value_id', optional(string())],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/**\n * Represents the rule of conversion between a stockable [CatalogItemVariation]($m/CatalogItemVariation)\n * and a non-stockable sell-by or receive-by `CatalogItemVariation` that\n * share the same underlying stock.\n */\nexport interface CatalogStockConversion {\n  /**\n   * References to the stockable [CatalogItemVariation]($m/CatalogItemVariation)\n   * for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation`\n   * defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`.\n   * This immutable field must reference a stockable `CatalogItemVariation`\n   * that shares the parent [CatalogItem]($m/CatalogItem) of the converted `CatalogItemVariation.`\n   */\n  stockableItemVariationId: string;\n  /**\n   * The quantity of the stockable item variation (as identified by `stockable_item_variation_id`)\n   * equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`)\n   * as defined by this stock conversion.  It accepts a decimal number in a string format that can take\n   * up to 10 digits before the decimal point and up to 5 digits after the decimal point.\n   */\n  stockableQuantity: string;\n  /**\n   * The converted equivalent quantity of the non-stockable [CatalogItemVariation]($m/CatalogItemVariation)\n   * in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together\n   * define the conversion ratio between stockable item variation and the non-stockable item variation.\n   * It accepts a decimal number in a string format that can take up to 10 digits before the decimal point\n   * and up to 5 digits after the decimal point.\n   */\n  nonstockableQuantity: string;\n}\n\nexport const catalogStockConversionSchema: Schema<CatalogStockConversion> = object(\n  {\n    stockableItemVariationId: ['stockable_item_variation_id', string()],\n    stockableQuantity: ['stockable_quantity', string()],\n    nonstockableQuantity: ['nonstockable_quantity', string()],\n  }\n);\n","import {\n  bigint,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`. */\nexport interface ItemVariationLocationOverrides {\n  /** The ID of the `Location`. This can include locations that are deactivated. */\n  locationId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceMoney?: Money;\n  /** Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale. */\n  pricingType?: string;\n  /** If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`. */\n  trackInventory?: boolean;\n  /** Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low. */\n  inventoryAlertType?: string;\n  /**\n   * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`\n   * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.\n   * This value is always an integer.\n   */\n  inventoryAlertThreshold?: bigint;\n  /**\n   * Indicates whether the overridden item variation is sold out at the specified location.\n   * When inventory tracking is enabled on the item variation either globally or at the specified location,\n   * the item variation is automatically marked as sold out when its inventory count reaches zero. The seller\n   * can manually set the item variation as sold out even when the inventory count is greater than zero.\n   * Attempts by an application to set this attribute are ignored. Regardless how the sold-out status is set,\n   * applications should treat its inventory count as zero when this attribute value is `true`.\n   */\n  soldOut?: boolean;\n  /**\n   * The seller-assigned timestamp, of the RFC 3339 format, to indicate when this sold-out variation\n   * becomes available again at the specified location. Attempts by an application to set this attribute are ignored.\n   * When the current time is later than this attribute value, the affected item variation is no longer sold out.\n   */\n  soldOutValidUntil?: string;\n}\n\nexport const itemVariationLocationOverridesSchema: Schema<ItemVariationLocationOverrides> = object(\n  {\n    locationId: ['location_id', optional(string())],\n    priceMoney: ['price_money', optional(lazy(() => moneySchema))],\n    pricingType: ['pricing_type', optional(string())],\n    trackInventory: ['track_inventory', optional(boolean())],\n    inventoryAlertType: ['inventory_alert_type', optional(string())],\n    inventoryAlertThreshold: ['inventory_alert_threshold', optional(bigint())],\n    soldOut: ['sold_out', optional(boolean())],\n    soldOutValidUntil: ['sold_out_valid_until', optional(string())],\n  }\n);\n","import {\n  array,\n  bigint,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogItemOptionValueForItemVariation,\n  catalogItemOptionValueForItemVariationSchema,\n} from './catalogItemOptionValueForItemVariation';\nimport {\n  CatalogStockConversion,\n  catalogStockConversionSchema,\n} from './catalogStockConversion';\nimport {\n  ItemVariationLocationOverrides,\n  itemVariationLocationOverridesSchema,\n} from './itemVariationLocationOverrides';\nimport { Money, moneySchema } from './money';\n\n/**\n * An item variation (i.e., product) in the Catalog object model. Each item\n * may have a maximum of 250 item variations.\n */\nexport interface CatalogItemVariation {\n  /** The ID of the `CatalogItem` associated with this item variation. */\n  itemId?: string;\n  /** The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /** The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters. */\n  sku?: string;\n  /**\n   * The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.\n   * The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard,\n   * Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned\n   * to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps\n   * unless it is updated to fit the expected format.\n   */\n  upc?: string;\n  /**\n   * The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal\n   * for each item variation within a parent `CatalogItem` is set according to the item variations's\n   * position. On reads, the value is not guaranteed to be sequential or unique.\n   */\n  ordinal?: number;\n  /** Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale. */\n  pricingType?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceMoney?: Money;\n  /** Per-location price and inventory overrides. */\n  locationOverrides?: ItemVariationLocationOverrides[];\n  /** If `true`, inventory tracking is active for the variation. */\n  trackInventory?: boolean;\n  /** Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low. */\n  inventoryAlertType?: string;\n  /**\n   * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`\n   * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.\n   * This value is always an integer.\n   */\n  inventoryAlertThreshold?: bigint;\n  /** Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points. */\n  userData?: string;\n  /**\n   * If the `CatalogItem` that owns this item variation is of type\n   * `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For\n   * example, a 30 minute appointment would have the value `1800000`, which is equal to\n   * 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).\n   */\n  serviceDuration?: bigint;\n  /**\n   * If the `CatalogItem` that owns this item variation is of type\n   * `APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.\n   */\n  availableForBooking?: boolean;\n  /**\n   * List of item option values associated with this item variation. Listed\n   * in the same order as the item options of the parent item.\n   */\n  itemOptionValues?: CatalogItemOptionValueForItemVariation[];\n  /**\n   * ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity\n   * sold of this item variation. If left unset, the item will be sold in\n   * whole quantities.\n   */\n  measurementUnitId?: string;\n  /** Whether this variation can be sold. */\n  sellable?: boolean;\n  /** Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE). */\n  stockable?: boolean;\n  /**\n   * The IDs of images associated with this `CatalogItemVariation` instance.\n   * These images will be shown to customers in Square Online Store.\n   */\n  imageIds?: string[];\n  /**\n   * Tokens of employees that can perform the service represented by this variation. Only valid for\n   * variations of type `APPOINTMENTS_SERVICE`.\n   */\n  teamMemberIds?: string[];\n  /**\n   * Represents the rule of conversion between a stockable [CatalogItemVariation]($m/CatalogItemVariation)\n   * and a non-stockable sell-by or receive-by `CatalogItemVariation` that\n   * share the same underlying stock.\n   */\n  stockableConversion?: CatalogStockConversion;\n}\n\nexport const catalogItemVariationSchema: Schema<CatalogItemVariation> = object({\n  itemId: ['item_id', optional(string())],\n  name: ['name', optional(string())],\n  sku: ['sku', optional(string())],\n  upc: ['upc', optional(string())],\n  ordinal: ['ordinal', optional(number())],\n  pricingType: ['pricing_type', optional(string())],\n  priceMoney: ['price_money', optional(lazy(() => moneySchema))],\n  locationOverrides: [\n    'location_overrides',\n    optional(array(lazy(() => itemVariationLocationOverridesSchema))),\n  ],\n  trackInventory: ['track_inventory', optional(boolean())],\n  inventoryAlertType: ['inventory_alert_type', optional(string())],\n  inventoryAlertThreshold: ['inventory_alert_threshold', optional(bigint())],\n  userData: ['user_data', optional(string())],\n  serviceDuration: ['service_duration', optional(bigint())],\n  availableForBooking: ['available_for_booking', optional(boolean())],\n  itemOptionValues: [\n    'item_option_values',\n    optional(array(lazy(() => catalogItemOptionValueForItemVariationSchema))),\n  ],\n  measurementUnitId: ['measurement_unit_id', optional(string())],\n  sellable: ['sellable', optional(boolean())],\n  stockable: ['stockable', optional(boolean())],\n  imageIds: ['image_ids', optional(array(string()))],\n  teamMemberIds: ['team_member_ids', optional(array(string()))],\n  stockableConversion: [\n    'stockable_conversion',\n    optional(lazy(() => catalogStockConversionSchema)),\n  ],\n});\n","import { object, Schema, string } from '../schema';\n\n/** The information needed to define a custom unit, provided by the seller. */\nexport interface MeasurementUnitCustom {\n  /** The name of the custom unit, for example \"bushel\". */\n  name: string;\n  /**\n   * The abbreviation of the custom unit, such as \"bsh\" (bushel). This appears\n   * in the cart for the Point of Sale app, and in reports.\n   */\n  abbreviation: string;\n}\n\nexport const measurementUnitCustomSchema: Schema<MeasurementUnitCustom> = object(\n  { name: ['name', string()], abbreviation: ['abbreviation', string()] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  MeasurementUnitCustom,\n  measurementUnitCustomSchema,\n} from './measurementUnitCustom';\n\n/**\n * Represents a unit of measurement to use with a quantity, such as ounces\n * or inches. Exactly one of the following fields are required: `custom_unit`,\n * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.\n */\nexport interface MeasurementUnit {\n  /** The information needed to define a custom unit, provided by the seller. */\n  customUnit?: MeasurementUnitCustom;\n  /** Unit of area used to measure a quantity. */\n  areaUnit?: string;\n  /** The unit of length used to measure a quantity. */\n  lengthUnit?: string;\n  /** The unit of volume used to measure a quantity. */\n  volumeUnit?: string;\n  /** Unit of weight used to measure a quantity. */\n  weightUnit?: string;\n  genericUnit?: string;\n  /** Unit of time used to measure a quantity (a duration). */\n  timeUnit?: string;\n  /** Describes the type of this unit and indicates which field contains the unit information. This is an ‘open’ enum. */\n  type?: string;\n}\n\nexport const measurementUnitSchema: Schema<MeasurementUnit> = object({\n  customUnit: [\n    'custom_unit',\n    optional(lazy(() => measurementUnitCustomSchema)),\n  ],\n  areaUnit: ['area_unit', optional(string())],\n  lengthUnit: ['length_unit', optional(string())],\n  volumeUnit: ['volume_unit', optional(string())],\n  weightUnit: ['weight_unit', optional(string())],\n  genericUnit: ['generic_unit', optional(string())],\n  timeUnit: ['time_unit', optional(string())],\n  type: ['type', optional(string())],\n});\n","import { lazy, number, object, optional, Schema } from '../schema';\nimport { MeasurementUnit, measurementUnitSchema } from './measurementUnit';\n\n/**\n * Represents the unit used to measure a `CatalogItemVariation` and\n * specifies the precision for decimal quantities.\n */\nexport interface CatalogMeasurementUnit {\n  /**\n   * Represents a unit of measurement to use with a quantity, such as ounces\n   * or inches. Exactly one of the following fields are required: `custom_unit`,\n   * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.\n   */\n  measurementUnit?: MeasurementUnit;\n  /**\n   * An integer between 0 and 5 that represents the maximum number of\n   * positions allowed after the decimal in quantities measured with this unit.\n   * For example:\n   * - if the precision is 0, the quantity can be 1, 2, 3, etc.\n   * - if the precision is 1, the quantity can be 0.1, 0.2, etc.\n   * - if the precision is 2, the quantity can be 0.01, 0.12, etc.\n   * Default: 3\n   */\n  precision?: number;\n}\n\nexport const catalogMeasurementUnitSchema: Schema<CatalogMeasurementUnit> = object(\n  {\n    measurementUnit: [\n      'measurement_unit',\n      optional(lazy(() => measurementUnitSchema)),\n    ],\n    precision: ['precision', optional(number())],\n  }\n);\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A modifier applicable to items at the time of sale. */\nexport interface CatalogModifier {\n  /** The modifier name.  This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceMoney?: Money;\n  /** Determines where this `CatalogModifier` appears in the `CatalogModifierList`. */\n  ordinal?: number;\n  /** The ID of the `CatalogModifierList` associated with this modifier. */\n  modifierListId?: string;\n  /**\n   * The IDs of images associated with this `CatalogModifier` instance.\n   * Currently these images are not displayed by Square, but are free to be displayed in 3rd party applications.\n   */\n  imageIds?: string[];\n}\n\nexport const catalogModifierSchema: Schema<CatalogModifier> = object({\n  name: ['name', optional(string())],\n  priceMoney: ['price_money', optional(lazy(() => moneySchema))],\n  ordinal: ['ordinal', optional(number())],\n  modifierListId: ['modifier_list_id', optional(string())],\n  imageIds: ['image_ids', optional(array(string()))],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\n/**\n * A list of modifiers applicable to items at the time of sale.\n * For example, a \"Condiments\" modifier list applicable to a \"Hot Dog\" item\n * may contain \"Ketchup\", \"Mustard\", and \"Relish\" modifiers.\n * Use the `selection_type` field to specify whether or not multiple selections from\n * the modifier list are allowed.\n */\nexport interface CatalogModifierList {\n  /** The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /** Determines where this modifier list appears in a list of `CatalogModifierList` values. */\n  ordinal?: number;\n  /** Indicates whether a CatalogModifierList supports multiple selections. */\n  selectionType?: string;\n  /**\n   * The options included in the `CatalogModifierList`.\n   * You must include at least one `CatalogModifier`.\n   * Each CatalogObject must have type `MODIFIER` and contain\n   * `CatalogModifier` data.\n   */\n  modifiers?: CatalogObject[];\n  /**\n   * The IDs of images associated with this `CatalogModifierList` instance.\n   * Currently these images are not displayed by Square, but are free to be displayed in 3rd party applications.\n   */\n  imageIds?: string[];\n}\n\nexport const catalogModifierListSchema: Schema<CatalogModifierList> = object({\n  name: ['name', optional(string())],\n  ordinal: ['ordinal', optional(number())],\n  selectionType: ['selection_type', optional(string())],\n  modifiers: ['modifiers', optional(array(lazy(() => catalogObjectSchema)))],\n  imageIds: ['image_ids', optional(array(string()))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Defines how discounts are automatically applied to a set of items that match the pricing rule\n * during the active time period.\n */\nexport interface CatalogPricingRule {\n  /**\n   * User-defined name for the pricing rule. For example, \"Buy one get one\n   * free\" or \"10% off\".\n   */\n  name?: string;\n  /**\n   * A list of unique IDs for the catalog time periods when\n   * this pricing rule is in effect. If left unset, the pricing rule is always\n   * in effect.\n   */\n  timePeriodIds?: string[];\n  /**\n   * Unique ID for the `CatalogDiscount` to take off\n   * the price of all matched items.\n   */\n  discountId?: string;\n  /**\n   * Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule\n   * matches within the entire cart, and can match multiple times. This field will always be set.\n   */\n  matchProductsId?: string;\n  /**\n   * __Deprecated__: Please use the `exclude_products_id` field to apply\n   * an exclude set instead. Exclude sets allow better control over quantity\n   * ranges and offer more flexibility for which matched items receive a discount.\n   * `CatalogProductSet` to apply the pricing to.\n   * An apply rule matches within the subset of the cart that fits the match rules (the match set).\n   * An apply rule can only match once in the match set.\n   * If not supplied, the pricing will be applied to all products in the match set.\n   * Other products retain their base price, or a price generated by other rules.\n   */\n  applyProductsId?: string;\n  /**\n   * `CatalogProductSet` to exclude from the pricing rule.\n   * An exclude rule matches within the subset of the cart that fits the match rules (the match set).\n   * An exclude rule can only match once in the match set.\n   * If not supplied, the pricing will be applied to all products in the match set.\n   * Other products retain their base price, or a price generated by other rules.\n   */\n  excludeProductsId?: string;\n  /** Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD). */\n  validFromDate?: string;\n  /**\n   * Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format\n   * (HH:MM:SS). Partial seconds will be truncated.\n   */\n  validFromLocalTime?: string;\n  /** Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD). */\n  validUntilDate?: string;\n  /**\n   * Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format\n   * (HH:MM:SS). Partial seconds will be truncated.\n   */\n  validUntilLocalTime?: string;\n  /**\n   * Indicates which products matched by a CatalogPricingRule\n   * will be excluded if the pricing rule uses an exclude set.\n   */\n  excludeStrategy?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  minimumOrderSubtotalMoney?: Money;\n  /**\n   * A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule.\n   * Notice that a group ID is generated by the Customers API.\n   * If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer\n   * has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount\n   * applies only to matched products sold to customers belonging to the specified customer groups.\n   */\n  customerGroupIdsAny?: string[];\n}\n\nexport const catalogPricingRuleSchema: Schema<CatalogPricingRule> = object({\n  name: ['name', optional(string())],\n  timePeriodIds: ['time_period_ids', optional(array(string()))],\n  discountId: ['discount_id', optional(string())],\n  matchProductsId: ['match_products_id', optional(string())],\n  applyProductsId: ['apply_products_id', optional(string())],\n  excludeProductsId: ['exclude_products_id', optional(string())],\n  validFromDate: ['valid_from_date', optional(string())],\n  validFromLocalTime: ['valid_from_local_time', optional(string())],\n  validUntilDate: ['valid_until_date', optional(string())],\n  validUntilLocalTime: ['valid_until_local_time', optional(string())],\n  excludeStrategy: ['exclude_strategy', optional(string())],\n  minimumOrderSubtotalMoney: [\n    'minimum_order_subtotal_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  customerGroupIdsAny: ['customer_group_ids_any', optional(array(string()))],\n});\n","import {\n  array,\n  bigint,\n  boolean,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\n\n/**\n * Represents a collection of catalog objects for the purpose of applying a\n * `PricingRule`. Including a catalog object will include all of its subtypes.\n * For example, including a category in a product set will include all of its\n * items and associated item variations in the product set. Including an item in\n * a product set will also include its item variations.\n */\nexport interface CatalogProductSet {\n  /**\n   * User-defined name for the product set. For example, \"Clearance Items\"\n   * or \"Winter Sale Items\".\n   */\n  name?: string;\n  /**\n   * Unique IDs for any `CatalogObject` included in this product set. Any\n   * number of these catalog objects can be in an order for a pricing rule to apply.\n   * This can be used with `product_ids_all` in a parent `CatalogProductSet` to\n   * match groups of products for a bulk discount, such as a discount for an\n   * entree and side combo.\n   * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.\n   * Max: 500 catalog object IDs.\n   */\n  productIdsAny?: string[];\n  /**\n   * Unique IDs for any `CatalogObject` included in this product set.\n   * All objects in this set must be included in an order for a pricing rule to apply.\n   * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.\n   * Max: 500 catalog object IDs.\n   */\n  productIdsAll?: string[];\n  /**\n   * If set, there must be exactly this many items from `products_any` or `products_all`\n   * in the cart for the discount to apply.\n   * Cannot be combined with either `quantity_min` or `quantity_max`.\n   */\n  quantityExact?: bigint;\n  /**\n   * If set, there must be at least this many items from `products_any` or `products_all`\n   * in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if\n   * `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.\n   */\n  quantityMin?: bigint;\n  /**\n   * If set, the pricing rule will apply to a maximum of this many items from\n   * `products_any` or `products_all`.\n   */\n  quantityMax?: bigint;\n  /**\n   * If set to `true`, the product set will include every item in the catalog.\n   * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.\n   */\n  allProducts?: boolean;\n}\n\nexport const catalogProductSetSchema: Schema<CatalogProductSet> = object({\n  name: ['name', optional(string())],\n  productIdsAny: ['product_ids_any', optional(array(string()))],\n  productIdsAll: ['product_ids_all', optional(array(string()))],\n  quantityExact: ['quantity_exact', optional(bigint())],\n  quantityMin: ['quantity_min', optional(bigint())],\n  quantityMax: ['quantity_max', optional(bigint())],\n  allProducts: ['all_products', optional(boolean())],\n});\n","import { bigint, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents a Quick Amount in the Catalog. */\nexport interface CatalogQuickAmount {\n  /** Determines the type of a specific Quick Amount. */\n  type: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amount: Money;\n  /**\n   * Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].\n   * MANUAL type amount will always have score = 100.\n   */\n  score?: bigint;\n  /** The order in which this Quick Amount should be displayed. */\n  ordinal?: bigint;\n}\n\nexport const catalogQuickAmountSchema: Schema<CatalogQuickAmount> = object({\n  type: ['type', string()],\n  amount: ['amount', lazy(() => moneySchema)],\n  score: ['score', optional(bigint())],\n  ordinal: ['ordinal', optional(bigint())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogQuickAmount,\n  catalogQuickAmountSchema,\n} from './catalogQuickAmount';\n\n/** A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts. */\nexport interface CatalogQuickAmountsSettings {\n  /** Determines a seller's option on Quick Amounts feature. */\n  option: string;\n  /**\n   * Represents location's eligibility for auto amounts\n   * The boolean should be consistent with whether there are AUTO amounts in the `amounts`.\n   */\n  eligibleForAutoAmounts?: boolean;\n  /** Represents a set of Quick Amounts at this location. */\n  amounts?: CatalogQuickAmount[];\n}\n\nexport const catalogQuickAmountsSettingsSchema: Schema<CatalogQuickAmountsSettings> = object(\n  {\n    option: ['option', string()],\n    eligibleForAutoAmounts: ['eligible_for_auto_amounts', optional(boolean())],\n    amounts: ['amounts', optional(array(lazy(() => catalogQuickAmountSchema)))],\n  }\n);\n","import {\n  bigint,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Describes a phase in a subscription plan. For more information, see\n * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).\n */\nexport interface SubscriptionPhase {\n  /** The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created. */\n  uid?: string;\n  /** Determines the billing cadence of a [Subscription]($m/Subscription) */\n  cadence: string;\n  /** The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created. */\n  periods?: number;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  recurringPriceMoney: Money;\n  /** The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created. */\n  ordinal?: bigint;\n}\n\nexport const subscriptionPhaseSchema: Schema<SubscriptionPhase> = object({\n  uid: ['uid', optional(string())],\n  cadence: ['cadence', string()],\n  periods: ['periods', optional(number())],\n  recurringPriceMoney: ['recurring_price_money', lazy(() => moneySchema)],\n  ordinal: ['ordinal', optional(bigint())],\n});\n","import { array, lazy, object, Schema, string } from '../schema';\nimport {\n  SubscriptionPhase,\n  subscriptionPhaseSchema,\n} from './subscriptionPhase';\n\n/**\n * Describes a subscription plan. For more information, see\n * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).\n */\nexport interface CatalogSubscriptionPlan {\n  /** The name of the plan. */\n  name: string;\n  /** A list of SubscriptionPhase containing the [SubscriptionPhase]($m/SubscriptionPhase) for this plan. */\n  phases: SubscriptionPhase[];\n}\n\nexport const catalogSubscriptionPlanSchema: Schema<CatalogSubscriptionPlan> = object(\n  {\n    name: ['name', string()],\n    phases: ['phases', array(lazy(() => subscriptionPhaseSchema))],\n  }\n);\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** A tax applicable to an item. */\nexport interface CatalogTax {\n  /** The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /** When to calculate the taxes due on a cart. */\n  calculationPhase?: string;\n  /** Whether to the tax amount should be additional to or included in the CatalogItem price. */\n  inclusionType?: string;\n  /**\n   * The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.\n   * A value of `7.5` corresponds to 7.5%.\n   */\n  percentage?: string;\n  /**\n   * If `true`, the fee applies to custom amounts entered into the Square Point of Sale\n   * app that are not associated with a particular `CatalogItem`.\n   */\n  appliesToCustomAmounts?: boolean;\n  /** A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`). */\n  enabled?: boolean;\n}\n\nexport const catalogTaxSchema: Schema<CatalogTax> = object({\n  name: ['name', optional(string())],\n  calculationPhase: ['calculation_phase', optional(string())],\n  inclusionType: ['inclusion_type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  appliesToCustomAmounts: ['applies_to_custom_amounts', optional(boolean())],\n  enabled: ['enabled', optional(boolean())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents a time period - either a single period or a repeating period. */\nexport interface CatalogTimePeriod {\n  /**\n   * An iCalendar (RFC 5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which\n   * specifies the name, timing, duration and recurrence of this time period.\n   * Example:\n   * ```\n   * DTSTART:20190707T180000\n   * DURATION:P2H\n   * RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR\n   * ```\n   * Only `SUMMARY`, `DTSTART`, `DURATION` and `RRULE` fields are supported.\n   * `DTSTART` must be in local (unzoned) time format. Note that while `BEGIN:VEVENT`\n   * and `END:VEVENT` is not required in the request. The response will always\n   * include them.\n   */\n  event?: string;\n}\n\nexport const catalogTimePeriodSchema: Schema<CatalogTimePeriod> = object({\n  event: ['event', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** A Square API V1 identifier of an item, including the object ID and its associated location ID. */\nexport interface CatalogV1Id {\n  /** The ID for an object used in the Square API V1, if the object ID differs from the Square API V2 object ID. */\n  catalogV1Id?: string;\n  /** The ID of the `Location` this Connect V1 ID is associated with. */\n  locationId?: string;\n}\n\nexport const catalogV1IdSchema: Schema<CatalogV1Id> = object({\n  catalogV1Id: ['catalog_v1_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n});\n","import {\n  array,\n  bigint,\n  boolean,\n  dict,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { CatalogCategory, catalogCategorySchema } from './catalogCategory';\nimport {\n  CatalogCustomAttributeDefinition,\n  catalogCustomAttributeDefinitionSchema,\n} from './catalogCustomAttributeDefinition';\nimport {\n  CatalogCustomAttributeValue,\n  catalogCustomAttributeValueSchema,\n} from './catalogCustomAttributeValue';\nimport { CatalogDiscount, catalogDiscountSchema } from './catalogDiscount';\nimport { CatalogImage, catalogImageSchema } from './catalogImage';\nimport { CatalogItem, catalogItemSchema } from './catalogItem';\nimport {\n  CatalogItemOption,\n  catalogItemOptionSchema,\n} from './catalogItemOption';\nimport {\n  CatalogItemOptionValue,\n  catalogItemOptionValueSchema,\n} from './catalogItemOptionValue';\nimport {\n  CatalogItemVariation,\n  catalogItemVariationSchema,\n} from './catalogItemVariation';\nimport {\n  CatalogMeasurementUnit,\n  catalogMeasurementUnitSchema,\n} from './catalogMeasurementUnit';\nimport { CatalogModifier, catalogModifierSchema } from './catalogModifier';\nimport {\n  CatalogModifierList,\n  catalogModifierListSchema,\n} from './catalogModifierList';\nimport {\n  CatalogPricingRule,\n  catalogPricingRuleSchema,\n} from './catalogPricingRule';\nimport {\n  CatalogProductSet,\n  catalogProductSetSchema,\n} from './catalogProductSet';\nimport {\n  CatalogQuickAmountsSettings,\n  catalogQuickAmountsSettingsSchema,\n} from './catalogQuickAmountsSettings';\nimport {\n  CatalogSubscriptionPlan,\n  catalogSubscriptionPlanSchema,\n} from './catalogSubscriptionPlan';\nimport { CatalogTax, catalogTaxSchema } from './catalogTax';\nimport {\n  CatalogTimePeriod,\n  catalogTimePeriodSchema,\n} from './catalogTimePeriod';\nimport { CatalogV1Id, catalogV1IdSchema } from './catalogV1Id';\n\n/**\n * The wrapper object for the catalog entries of a given object type.\n * Depending on the `type` attribute value, a `CatalogObject` instance assumes a type-specific data to yield the corresponding type of catalog object.\n * For example, if `type=ITEM`, the `CatalogObject` instance must have the ITEM-specific data set on the `item_data` attribute. The resulting `CatalogObject` instance is also a `CatalogItem` instance.\n * In general, if `type=<OBJECT_TYPE>`, the `CatalogObject` instance must have the `<OBJECT_TYPE>`-specific data set on the `<object_type>_data` attribute. The resulting `CatalogObject` instance is also a `Catalog<ObjectType>` instance.\n * For a more detailed discussion of the Catalog data model, please see the\n * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n */\nexport interface CatalogObject {\n  /**\n   * Possible types of CatalogObjects returned from the catalog, each\n   * containing type-specific properties in the `*_data` field corresponding to the specfied object type.\n   */\n  type: string;\n  /**\n   * An identifier to reference this object in the catalog. When a new `CatalogObject`\n   * is inserted, the client should set the id to a temporary identifier starting with\n   * a \"`#`\" character. Other objects being inserted or updated within the same request\n   * may use this identifier to refer to the new object.\n   * When the server receives the new object, it will supply a unique identifier that\n   * replaces the temporary identifier for all future references.\n   */\n  id: string;\n  /**\n   * Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"`\n   * would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.\n   */\n  updatedAt?: string;\n  /**\n   * The version of the object. When updating an object, the version supplied\n   * must match the version in the database, otherwise the write will be rejected as conflicting.\n   */\n  version?: bigint;\n  /**\n   * If `true`, the object has been deleted from the database. Must be `false` for new objects\n   * being inserted. When deleted, the `updated_at` field will equal the deletion time.\n   */\n  isDeleted?: boolean;\n  /**\n   * A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair\n   * is a [CatalogCustomAttributeValue]($m/CatalogCustomAttributeValue) object. The key is the `key` attribute\n   * value defined in the associated [CatalogCustomAttributeDefinition]($m/CatalogCustomAttributeDefinition)\n   * object defined by the application making the request.\n   * If the `CatalogCustomAttributeDefinition` object is\n   * defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by\n   * the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of\n   * `\"cocoa_brand\"` and the defining application ID is `\"abcd1234\"`, the key in the map is `\"abcd1234:cocoa_brand\"`\n   * if the application making the request is different from the application defining the custom attribute definition.\n   * Otherwise, the key used in the map is simply `\"cocoa_brand\"`.\n   * Application-defined custom attributes are set at a global (location-independent) level.\n   * Custom attribute values are intended to store additional information about a catalog object\n   * or associations with an entity in another system. Do not use custom attributes\n   * to store any sensitive information (personally identifiable information, card details, etc.).\n   */\n  customAttributeValues?: Record<string, CatalogCustomAttributeValue>;\n  /**\n   * The Connect v1 IDs for this object at each location where it is present, where they\n   * differ from the object's Connect V2 ID. The field will only be present for objects that\n   * have been created or modified by legacy APIs.\n   */\n  catalogV1Ids?: CatalogV1Id[];\n  /**\n   * If `true`, this object is present at all locations (including future locations), except where specified in\n   * the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),\n   * except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.\n   */\n  presentAtAllLocations?: boolean;\n  /**\n   * A list of locations where the object is present, even if `present_at_all_locations` is `false`.\n   * This can include locations that are deactivated.\n   */\n  presentAtLocationIds?: string[];\n  /**\n   * A list of locations where the object is not present, even if `present_at_all_locations` is `true`.\n   * This can include locations that are deactivated.\n   */\n  absentAtLocationIds?: string[];\n  /** A [CatalogObject]($m/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog. */\n  itemData?: CatalogItem;\n  /** A category to which a `CatalogItem` instance belongs. */\n  categoryData?: CatalogCategory;\n  /**\n   * An item variation (i.e., product) in the Catalog object model. Each item\n   * may have a maximum of 250 item variations.\n   */\n  itemVariationData?: CatalogItemVariation;\n  /** A tax applicable to an item. */\n  taxData?: CatalogTax;\n  /** A discount applicable to items. */\n  discountData?: CatalogDiscount;\n  /**\n   * A list of modifiers applicable to items at the time of sale.\n   * For example, a \"Condiments\" modifier list applicable to a \"Hot Dog\" item\n   * may contain \"Ketchup\", \"Mustard\", and \"Relish\" modifiers.\n   * Use the `selection_type` field to specify whether or not multiple selections from\n   * the modifier list are allowed.\n   */\n  modifierListData?: CatalogModifierList;\n  /** A modifier applicable to items at the time of sale. */\n  modifierData?: CatalogModifier;\n  /** Represents a time period - either a single period or a repeating period. */\n  timePeriodData?: CatalogTimePeriod;\n  /**\n   * Represents a collection of catalog objects for the purpose of applying a\n   * `PricingRule`. Including a catalog object will include all of its subtypes.\n   * For example, including a category in a product set will include all of its\n   * items and associated item variations in the product set. Including an item in\n   * a product set will also include its item variations.\n   */\n  productSetData?: CatalogProductSet;\n  /**\n   * Defines how discounts are automatically applied to a set of items that match the pricing rule\n   * during the active time period.\n   */\n  pricingRuleData?: CatalogPricingRule;\n  /**\n   * An image file to use in Square catalogs. It can be associated with\n   * `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, and `CatalogModifierList` objects.\n   * Only the images on items and item variations are exposed in Dashboard.\n   * Only the first image on an item is displayed in Square Point of Sale (SPOS).\n   * Images on items and variations are displayed through Square Online Store.\n   * Images on other object types are for use by 3rd party application developers.\n   */\n  imageData?: CatalogImage;\n  /**\n   * Represents the unit used to measure a `CatalogItemVariation` and\n   * specifies the precision for decimal quantities.\n   */\n  measurementUnitData?: CatalogMeasurementUnit;\n  /**\n   * Describes a subscription plan. For more information, see\n   * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).\n   */\n  subscriptionPlanData?: CatalogSubscriptionPlan;\n  /** A group of variations for a `CatalogItem`. */\n  itemOptionData?: CatalogItemOption;\n  /**\n   * An enumerated value that can link a\n   * `CatalogItemVariation` to an item option as one of\n   * its item option values.\n   */\n  itemOptionValueData?: CatalogItemOptionValue;\n  /**\n   * Contains information defining a custom attribute. Custom attributes are\n   * intended to store additional information about a catalog object or to associate a\n   * catalog object with an entity in another system. Do not use custom attributes\n   * to store any sensitive information (personally identifiable information, card details, etc.).\n   * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)\n   */\n  customAttributeDefinitionData?: CatalogCustomAttributeDefinition;\n  /** A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts. */\n  quickAmountsSettingsData?: CatalogQuickAmountsSettings;\n}\n\nexport const catalogObjectSchema: Schema<CatalogObject> = object({\n  type: ['type', string()],\n  id: ['id', string()],\n  updatedAt: ['updated_at', optional(string())],\n  version: ['version', optional(bigint())],\n  isDeleted: ['is_deleted', optional(boolean())],\n  customAttributeValues: [\n    'custom_attribute_values',\n    optional(dict(lazy(() => catalogCustomAttributeValueSchema))),\n  ],\n  catalogV1Ids: [\n    'catalog_v1_ids',\n    optional(array(lazy(() => catalogV1IdSchema))),\n  ],\n  presentAtAllLocations: ['present_at_all_locations', optional(boolean())],\n  presentAtLocationIds: ['present_at_location_ids', optional(array(string()))],\n  absentAtLocationIds: ['absent_at_location_ids', optional(array(string()))],\n  itemData: ['item_data', optional(lazy(() => catalogItemSchema))],\n  categoryData: ['category_data', optional(lazy(() => catalogCategorySchema))],\n  itemVariationData: [\n    'item_variation_data',\n    optional(lazy(() => catalogItemVariationSchema)),\n  ],\n  taxData: ['tax_data', optional(lazy(() => catalogTaxSchema))],\n  discountData: ['discount_data', optional(lazy(() => catalogDiscountSchema))],\n  modifierListData: [\n    'modifier_list_data',\n    optional(lazy(() => catalogModifierListSchema)),\n  ],\n  modifierData: ['modifier_data', optional(lazy(() => catalogModifierSchema))],\n  timePeriodData: [\n    'time_period_data',\n    optional(lazy(() => catalogTimePeriodSchema)),\n  ],\n  productSetData: [\n    'product_set_data',\n    optional(lazy(() => catalogProductSetSchema)),\n  ],\n  pricingRuleData: [\n    'pricing_rule_data',\n    optional(lazy(() => catalogPricingRuleSchema)),\n  ],\n  imageData: ['image_data', optional(lazy(() => catalogImageSchema))],\n  measurementUnitData: [\n    'measurement_unit_data',\n    optional(lazy(() => catalogMeasurementUnitSchema)),\n  ],\n  subscriptionPlanData: [\n    'subscription_plan_data',\n    optional(lazy(() => catalogSubscriptionPlanSchema)),\n  ],\n  itemOptionData: [\n    'item_option_data',\n    optional(lazy(() => catalogItemOptionSchema)),\n  ],\n  itemOptionValueData: [\n    'item_option_value_data',\n    optional(lazy(() => catalogItemOptionValueSchema)),\n  ],\n  customAttributeDefinitionData: [\n    'custom_attribute_definition_data',\n    optional(lazy(() => catalogCustomAttributeDefinitionSchema)),\n  ],\n  quickAmountsSettingsData: [\n    'quick_amounts_settings_data',\n    optional(lazy(() => catalogQuickAmountsSettingsSchema)),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface BatchRetrieveCatalogObjectsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** A list of [CatalogObject]($m/CatalogObject)s returned. */\n  objects?: CatalogObject[];\n  /** A list of [CatalogObject]($m/CatalogObject)s referenced by the object in the `objects` field. */\n  relatedObjects?: CatalogObject[];\n}\n\nexport const batchRetrieveCatalogObjectsResponseSchema: Schema<BatchRetrieveCatalogObjectsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    objects: ['objects', optional(array(lazy(() => catalogObjectSchema)))],\n    relatedObjects: [\n      'related_objects',\n      optional(array(lazy(() => catalogObjectSchema))),\n    ],\n  }\n);\n","import { array, lazy, object, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\n/** A batch of catalog objects. */\nexport interface CatalogObjectBatch {\n  /** A list of CatalogObjects belonging to this batch. */\n  objects: CatalogObject[];\n}\n\nexport const catalogObjectBatchSchema: Schema<CatalogObjectBatch> = object({\n  objects: ['objects', array(lazy(() => catalogObjectSchema))],\n});\n","import { array, lazy, object, Schema, string } from '../schema';\nimport {\n  CatalogObjectBatch,\n  catalogObjectBatchSchema,\n} from './catalogObjectBatch';\n\nexport interface BatchUpsertCatalogObjectsRequest {\n  /**\n   * A value you specify that uniquely identifies this\n   * request among all your requests. A common way to create\n   * a valid idempotency key is to use a Universally unique\n   * identifier (UUID).\n   * If you're unsure whether a particular request was successful,\n   * you can reattempt it with the same idempotency key without\n   * worrying about creating duplicate objects.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /**\n   * A batch of CatalogObjects to be inserted/updated atomically.\n   * The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs\n   * attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error\n   * in one batch will not affect other batches within the same request.\n   * For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its\n   * `is_deleted` field must not be set to `true`.\n   * To modify an existing object, supply its ID. To create a new object, use an ID starting\n   * with `#`. These IDs may be used to create relationships between an object and attributes of\n   * other objects that reference it. For example, you can create a CatalogItem with\n   * ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to\n   * `#ABC` in order to associate the CatalogItemVariation with its parent\n   * CatalogItem.\n   * Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.\n   * Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request\n   * may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will\n   * be inserted or updated.\n   */\n  batches: CatalogObjectBatch[];\n}\n\nexport const batchUpsertCatalogObjectsRequestSchema: Schema<BatchUpsertCatalogObjectsRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    batches: ['batches', array(lazy(() => catalogObjectBatchSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A mapping between a temporary client-supplied ID and a permanent server-generated ID.\n * When calling [UpsertCatalogObject]($e/Catalog/UpsertCatalogObject) or\n * [BatchUpsertCatalogObjects]($e/Catalog/BatchUpsertCatalogObjects) to\n * create a [CatalogObject]($m/CatalogObject) instance, you can supply\n * a temporary ID for the to-be-created object, especially when the object is to be referenced\n * elsewhere in the same request body. This temporary ID can be any string unique within\n * the call, but must be prefixed by \"#\".\n * After the request is submitted and the object created, a permanent server-generated ID is assigned\n * to the new object. The permanent ID is unique across the Square catalog.\n */\nexport interface CatalogIdMapping {\n  /** The client-supplied temporary `#`-prefixed ID for a new `CatalogObject`. */\n  clientObjectId?: string;\n  /** The permanent ID for the CatalogObject created by the server. */\n  objectId?: string;\n}\n\nexport const catalogIdMappingSchema: Schema<CatalogIdMapping> = object({\n  clientObjectId: ['client_object_id', optional(string())],\n  objectId: ['object_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogIdMapping, catalogIdMappingSchema } from './catalogIdMapping';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface BatchUpsertCatalogObjectsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The created successfully created CatalogObjects. */\n  objects?: CatalogObject[];\n  /** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". */\n  updatedAt?: string;\n  /** The mapping between client and server IDs for this upsert. */\n  idMappings?: CatalogIdMapping[];\n}\n\nexport const batchUpsertCatalogObjectsResponseSchema: Schema<BatchUpsertCatalogObjectsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    objects: ['objects', optional(array(lazy(() => catalogObjectSchema)))],\n    updatedAt: ['updated_at', optional(string())],\n    idMappings: [\n      'id_mappings',\n      optional(array(lazy(() => catalogIdMappingSchema))),\n    ],\n  }\n);\n","import { number, object, optional, Schema } from '../schema';\n\nexport interface CatalogInfoResponseLimits {\n  /**\n   * The maximum number of objects that may appear within a single batch in a\n   * `/v2/catalog/batch-upsert` request.\n   */\n  batchUpsertMaxObjectsPerBatch?: number;\n  /**\n   * The maximum number of objects that may appear across all batches in a\n   * `/v2/catalog/batch-upsert` request.\n   */\n  batchUpsertMaxTotalObjects?: number;\n  /**\n   * The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`\n   * request.\n   */\n  batchRetrieveMaxObjectIds?: number;\n  /**\n   * The maximum number of results that may be returned in a page of a\n   * `/v2/catalog/search` response.\n   */\n  searchMaxPageLimit?: number;\n  /**\n   * The maximum number of object IDs that may be included in a single\n   * `/v2/catalog/batch-delete` request.\n   */\n  batchDeleteMaxObjectIds?: number;\n  /**\n   * The maximum number of item IDs that may be included in a single\n   * `/v2/catalog/update-item-taxes` request.\n   */\n  updateItemTaxesMaxItemIds?: number;\n  /**\n   * The maximum number of tax IDs to be enabled that may be included in a single\n   * `/v2/catalog/update-item-taxes` request.\n   */\n  updateItemTaxesMaxTaxesToEnable?: number;\n  /**\n   * The maximum number of tax IDs to be disabled that may be included in a single\n   * `/v2/catalog/update-item-taxes` request.\n   */\n  updateItemTaxesMaxTaxesToDisable?: number;\n  /**\n   * The maximum number of item IDs that may be included in a single\n   * `/v2/catalog/update-item-modifier-lists` request.\n   */\n  updateItemModifierListsMaxItemIds?: number;\n  /**\n   * The maximum number of modifier list IDs to be enabled that may be included in\n   * a single `/v2/catalog/update-item-modifier-lists` request.\n   */\n  updateItemModifierListsMaxModifierListsToEnable?: number;\n  /**\n   * The maximum number of modifier list IDs to be disabled that may be included in\n   * a single `/v2/catalog/update-item-modifier-lists` request.\n   */\n  updateItemModifierListsMaxModifierListsToDisable?: number;\n}\n\nexport const catalogInfoResponseLimitsSchema: Schema<CatalogInfoResponseLimits> = object(\n  {\n    batchUpsertMaxObjectsPerBatch: [\n      'batch_upsert_max_objects_per_batch',\n      optional(number()),\n    ],\n    batchUpsertMaxTotalObjects: [\n      'batch_upsert_max_total_objects',\n      optional(number()),\n    ],\n    batchRetrieveMaxObjectIds: [\n      'batch_retrieve_max_object_ids',\n      optional(number()),\n    ],\n    searchMaxPageLimit: ['search_max_page_limit', optional(number())],\n    batchDeleteMaxObjectIds: [\n      'batch_delete_max_object_ids',\n      optional(number()),\n    ],\n    updateItemTaxesMaxItemIds: [\n      'update_item_taxes_max_item_ids',\n      optional(number()),\n    ],\n    updateItemTaxesMaxTaxesToEnable: [\n      'update_item_taxes_max_taxes_to_enable',\n      optional(number()),\n    ],\n    updateItemTaxesMaxTaxesToDisable: [\n      'update_item_taxes_max_taxes_to_disable',\n      optional(number()),\n    ],\n    updateItemModifierListsMaxItemIds: [\n      'update_item_modifier_lists_max_item_ids',\n      optional(number()),\n    ],\n    updateItemModifierListsMaxModifierListsToEnable: [\n      'update_item_modifier_lists_max_modifier_lists_to_enable',\n      optional(number()),\n    ],\n    updateItemModifierListsMaxModifierListsToDisable: [\n      'update_item_modifier_lists_max_modifier_lists_to_disable',\n      optional(number()),\n    ],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { MeasurementUnit, measurementUnitSchema } from './measurementUnit';\n\n/** Contains the name and abbreviation for standard measurement unit. */\nexport interface StandardUnitDescription {\n  /**\n   * Represents a unit of measurement to use with a quantity, such as ounces\n   * or inches. Exactly one of the following fields are required: `custom_unit`,\n   * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.\n   */\n  unit?: MeasurementUnit;\n  /** UI display name of the measurement unit. For example, 'Pound'. */\n  name?: string;\n  /** UI display abbreviation for the measurement unit. For example, 'lb'. */\n  abbreviation?: string;\n}\n\nexport const standardUnitDescriptionSchema: Schema<StandardUnitDescription> = object(\n  {\n    unit: ['unit', optional(lazy(() => measurementUnitSchema))],\n    name: ['name', optional(string())],\n    abbreviation: ['abbreviation', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  StandardUnitDescription,\n  standardUnitDescriptionSchema,\n} from './standardUnitDescription';\n\n/** Group of standard measurement units. */\nexport interface StandardUnitDescriptionGroup {\n  /** List of standard (non-custom) measurement units in this description group. */\n  standardUnitDescriptions?: StandardUnitDescription[];\n  /** IETF language tag. */\n  languageCode?: string;\n}\n\nexport const standardUnitDescriptionGroupSchema: Schema<StandardUnitDescriptionGroup> = object(\n  {\n    standardUnitDescriptions: [\n      'standard_unit_descriptions',\n      optional(array(lazy(() => standardUnitDescriptionSchema))),\n    ],\n    languageCode: ['language_code', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport {\n  CatalogInfoResponseLimits,\n  catalogInfoResponseLimitsSchema,\n} from './catalogInfoResponseLimits';\nimport { Error, errorSchema } from './error';\nimport {\n  StandardUnitDescriptionGroup,\n  standardUnitDescriptionGroupSchema,\n} from './standardUnitDescriptionGroup';\n\nexport interface CatalogInfoResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  limits?: CatalogInfoResponseLimits;\n  /** Group of standard measurement units. */\n  standardUnitDescriptionGroup?: StandardUnitDescriptionGroup;\n}\n\nexport const catalogInfoResponseSchema: Schema<CatalogInfoResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  limits: ['limits', optional(lazy(() => catalogInfoResponseLimitsSchema))],\n  standardUnitDescriptionGroup: [\n    'standard_unit_description_group',\n    optional(lazy(() => standardUnitDescriptionGroupSchema)),\n  ],\n});\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\nexport interface CreateCatalogImageRequest {\n  /**\n   * A unique string that identifies this CreateCatalogImage request.\n   * Keys can be any valid string but must be unique for every CreateCatalogImage request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /**\n   * Unique ID of the `CatalogObject` to attach this `CatalogImage` object to. Leave this\n   * field empty to create unattached images, for example if you are building an integration\n   * where an image can be attached to catalog items at a later time.\n   */\n  objectId?: string;\n  /**\n   * The wrapper object for the catalog entries of a given object type.\n   * Depending on the `type` attribute value, a `CatalogObject` instance assumes a type-specific data to yield the corresponding type of catalog object.\n   * For example, if `type=ITEM`, the `CatalogObject` instance must have the ITEM-specific data set on the `item_data` attribute. The resulting `CatalogObject` instance is also a `CatalogItem` instance.\n   * In general, if `type=<OBJECT_TYPE>`, the `CatalogObject` instance must have the `<OBJECT_TYPE>`-specific data set on the `<object_type>_data` attribute. The resulting `CatalogObject` instance is also a `Catalog<ObjectType>` instance.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  image: CatalogObject;\n  /**\n   * If this is set to `true`, the image created will be the primary, or first image of the object referenced by `object_id`.\n   * If the `CatalogObject` already has a primary `CatalogImage`, setting this field to `true` will replace the primary image.\n   * If this is set to `false` and you use the Square API version 2021-12-15 or later, the image id will be appended to the list of `image_ids` on the object.\n   * With Square API version 2021-12-15 or later, the default value is `false`. Otherwise, the effective default value is `true`.\n   */\n  isPrimary?: boolean;\n}\n\nexport const createCatalogImageRequestSchema: Schema<CreateCatalogImageRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    objectId: ['object_id', optional(string())],\n    image: ['image', lazy(() => catalogObjectSchema)],\n    isPrimary: ['is_primary', optional(boolean())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface CreateCatalogImageResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The wrapper object for the catalog entries of a given object type.\n   * Depending on the `type` attribute value, a `CatalogObject` instance assumes a type-specific data to yield the corresponding type of catalog object.\n   * For example, if `type=ITEM`, the `CatalogObject` instance must have the ITEM-specific data set on the `item_data` attribute. The resulting `CatalogObject` instance is also a `CatalogItem` instance.\n   * In general, if `type=<OBJECT_TYPE>`, the `CatalogObject` instance must have the `<OBJECT_TYPE>`-specific data set on the `<object_type>_data` attribute. The resulting `CatalogObject` instance is also a `Catalog<ObjectType>` instance.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  image?: CatalogObject;\n}\n\nexport const createCatalogImageResponseSchema: Schema<CreateCatalogImageResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    image: ['image', optional(lazy(() => catalogObjectSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface DeleteCatalogObjectResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The IDs of all catalog objects deleted by this request.\n   * Multiple IDs may be returned when associated objects are also deleted, for example\n   * a catalog item variation will be deleted (and its ID included in this field)\n   * when its parent catalog item is deleted.\n   */\n  deletedObjectIds?: string[];\n  /**\n   * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * of this deletion in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.\n   */\n  deletedAt?: string;\n}\n\nexport const deleteCatalogObjectResponseSchema: Schema<DeleteCatalogObjectResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deletedObjectIds: ['deleted_object_ids', optional(array(string()))],\n    deletedAt: ['deleted_at', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface ListCatalogResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset, this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** The CatalogObjects returned. */\n  objects?: CatalogObject[];\n}\n\nexport const listCatalogResponseSchema: Schema<ListCatalogResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  cursor: ['cursor', optional(string())],\n  objects: ['objects', optional(array(lazy(() => catalogObjectSchema)))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveCatalogObjectResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The wrapper object for the catalog entries of a given object type.\n   * Depending on the `type` attribute value, a `CatalogObject` instance assumes a type-specific data to yield the corresponding type of catalog object.\n   * For example, if `type=ITEM`, the `CatalogObject` instance must have the ITEM-specific data set on the `item_data` attribute. The resulting `CatalogObject` instance is also a `CatalogItem` instance.\n   * In general, if `type=<OBJECT_TYPE>`, the `CatalogObject` instance must have the `<OBJECT_TYPE>`-specific data set on the `<object_type>_data` attribute. The resulting `CatalogObject` instance is also a `Catalog<ObjectType>` instance.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  object?: CatalogObject;\n  /** A list of `CatalogObject`s referenced by the object in the `object` field. */\n  relatedObjects?: CatalogObject[];\n}\n\nexport const retrieveCatalogObjectResponseSchema: Schema<RetrieveCatalogObjectResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    object: ['object', optional(lazy(() => catalogObjectSchema))],\n    relatedObjects: [\n      'related_objects',\n      optional(array(lazy(() => catalogObjectSchema))),\n    ],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** The range of a number value between the specified lower and upper bounds. */\nexport interface Range {\n  /**\n   * The lower bound of the number range. At least one of `min` or `max` must be specified.\n   * If unspecified, the results will have no minimum value.\n   */\n  min?: string;\n  /**\n   * The upper bound of the number range. At least one of `min` or `max` must be specified.\n   * If unspecified, the results will have no maximum value.\n   */\n  max?: string;\n}\n\nexport const rangeSchema: Schema<Range> = object({\n  min: ['min', optional(string())],\n  max: ['max', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Range, rangeSchema } from './range';\n\n/**\n * Supported custom attribute query expressions for calling the\n * [SearchCatalogItems]($e/Catalog/SearchCatalogItems)\n * endpoint to search for items or item variations.\n */\nexport interface CustomAttributeFilter {\n  /**\n   * A query expression to filter items or item variations by matching their custom attributes'\n   * `custom_attribute_definition_id` property value against the the specified id.\n   * Exactly one of `custom_attribute_definition_id` or `key` must be specified.\n   */\n  customAttributeDefinitionId?: string;\n  /**\n   * A query expression to filter items or item variations by matching their custom attributes'\n   * `key` property value against the specified key.\n   * Exactly one of `custom_attribute_definition_id` or `key` must be specified.\n   */\n  key?: string;\n  /**\n   * A query expression to filter items or item variations by matching their custom attributes'\n   * `string_value`  property value against the specified text.\n   * Exactly one of `string_filter`, `number_filter`, `selection_uids_filter`, or `bool_filter` must be specified.\n   */\n  stringFilter?: string;\n  /** The range of a number value between the specified lower and upper bounds. */\n  numberFilter?: Range;\n  /**\n   * A query expression to filter items or item variations by matching  their custom attributes'\n   * `selection_uid_values` values against the specified selection uids.\n   * Exactly one of `string_filter`, `number_filter`, `selection_uids_filter`, or `bool_filter` must be specified.\n   */\n  selectionUidsFilter?: string[];\n  /**\n   * A query expression to filter items or item variations by matching their custom attributes'\n   * `boolean_value` property values against the specified Boolean expression.\n   * Exactly one of `string_filter`, `number_filter`, `selection_uids_filter`, or `bool_filter` must be specified.\n   */\n  boolFilter?: boolean;\n}\n\nexport const customAttributeFilterSchema: Schema<CustomAttributeFilter> = object(\n  {\n    customAttributeDefinitionId: [\n      'custom_attribute_definition_id',\n      optional(string()),\n    ],\n    key: ['key', optional(string())],\n    stringFilter: ['string_filter', optional(string())],\n    numberFilter: ['number_filter', optional(lazy(() => rangeSchema))],\n    selectionUidsFilter: ['selection_uids_filter', optional(array(string()))],\n    boolFilter: ['bool_filter', optional(boolean())],\n  }\n);\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CustomAttributeFilter,\n  customAttributeFilterSchema,\n} from './customAttributeFilter';\n\n/** Defines the request body for the [SearchCatalogItems]($e/Catalog/SearchCatalogItems) endpoint. */\nexport interface SearchCatalogItemsRequest {\n  /**\n   * The text filter expression to return items or item variations containing specified text in\n   * the `name`, `description`, or `abbreviation` attribute value of an item, or in\n   * the `name`, `sku`, or `upc` attribute value of an item variation.\n   */\n  textFilter?: string;\n  /** The category id query expression to return items containing the specified category IDs. */\n  categoryIds?: string[];\n  /**\n   * The stock-level query expression to return item variations with the specified stock levels.\n   * See [SearchCatalogItemsRequestStockLevel](#type-searchcatalogitemsrequeststocklevel) for possible values\n   */\n  stockLevels?: string[];\n  /** The enabled-location query expression to return items and item variations having specified enabled locations. */\n  enabledLocationIds?: string[];\n  /** The pagination token, returned in the previous response, used to fetch the next batch of pending results. */\n  cursor?: string;\n  /** The maximum number of results to return per page. The default value is 100. */\n  limit?: number;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  sortOrder?: string;\n  /** The product types query expression to return items or item variations having the specified product types. */\n  productTypes?: string[];\n  /**\n   * The customer-attribute filter to return items or item variations matching the specified\n   * custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in\n   * a single call to the [SearchCatalogItems]($e/Catalog/SearchCatalogItems) endpoint.\n   */\n  customAttributeFilters?: CustomAttributeFilter[];\n}\n\nexport const searchCatalogItemsRequestSchema: Schema<SearchCatalogItemsRequest> = object(\n  {\n    textFilter: ['text_filter', optional(string())],\n    categoryIds: ['category_ids', optional(array(string()))],\n    stockLevels: ['stock_levels', optional(array(string()))],\n    enabledLocationIds: ['enabled_location_ids', optional(array(string()))],\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n    sortOrder: ['sort_order', optional(string())],\n    productTypes: ['product_types', optional(array(string()))],\n    customAttributeFilters: [\n      'custom_attribute_filters',\n      optional(array(lazy(() => customAttributeFilterSchema))),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\n/** Defines the response body returned from the [SearchCatalogItems]($e/Catalog/SearchCatalogItems) endpoint. */\nexport interface SearchCatalogItemsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Returned items matching the specified query expressions. */\n  items?: CatalogObject[];\n  /** Pagination token used in the next request to return more of the search result. */\n  cursor?: string;\n  /** Ids of returned item variations matching the specified query expression. */\n  matchedVariationIds?: string[];\n}\n\nexport const searchCatalogItemsResponseSchema: Schema<SearchCatalogItemsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    items: ['items', optional(array(lazy(() => catalogObjectSchema)))],\n    cursor: ['cursor', optional(string())],\n    matchedVariationIds: ['matched_variation_ids', optional(array(string()))],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** The query filter to return the search result by exact match of the specified attribute name and value. */\nexport interface CatalogQueryExact {\n  /** The name of the attribute to be searched. Matching of the attribute name is exact. */\n  attributeName: string;\n  /**\n   * The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial.\n   * For example, if a specified value of \"sma\", objects with the named attribute value of \"Small\", \"small\" are both matched.\n   */\n  attributeValue: string;\n}\n\nexport const catalogQueryExactSchema: Schema<CatalogQueryExact> = object({\n  attributeName: ['attribute_name', string()],\n  attributeValue: ['attribute_value', string()],\n});\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** The query filter to return the items containing the specified item option IDs. */\nexport interface CatalogQueryItemsForItemOptions {\n  /**\n   * A set of `CatalogItemOption` IDs to be used to find associated\n   * `CatalogItem`s. All Items that contain all of the given Item Options (in any order)\n   * will be returned.\n   */\n  itemOptionIds?: string[];\n}\n\nexport const catalogQueryItemsForItemOptionsSchema: Schema<CatalogQueryItemsForItemOptions> = object(\n  { itemOptionIds: ['item_option_ids', optional(array(string()))] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** The query filter to return the items containing the specified modifier list IDs. */\nexport interface CatalogQueryItemsForModifierList {\n  /** A set of `CatalogModifierList` IDs to be used to find associated `CatalogItem`s. */\n  modifierListIds: string[];\n}\n\nexport const catalogQueryItemsForModifierListSchema: Schema<CatalogQueryItemsForModifierList> = object(\n  { modifierListIds: ['modifier_list_ids', array(string())] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** The query filter to return the items containing the specified tax IDs. */\nexport interface CatalogQueryItemsForTax {\n  /** A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s. */\n  taxIds: string[];\n}\n\nexport const catalogQueryItemsForTaxSchema: Schema<CatalogQueryItemsForTax> = object(\n  { taxIds: ['tax_ids', array(string())] }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** The query filter to return the item variations containing the specified item option value IDs. */\nexport interface CatalogQueryItemVariationsForItemOptionValues {\n  /**\n   * A set of `CatalogItemOptionValue` IDs to be used to find associated\n   * `CatalogItemVariation`s. All ItemVariations that contain all of the given\n   * Item Option Values (in any order) will be returned.\n   */\n  itemOptionValueIds?: string[];\n}\n\nexport const catalogQueryItemVariationsForItemOptionValuesSchema: Schema<CatalogQueryItemVariationsForItemOptionValues> = object(\n  { itemOptionValueIds: ['item_option_value_ids', optional(array(string()))] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** The query filter to return the search result whose named attribute values are prefixed by the specified attribute value. */\nexport interface CatalogQueryPrefix {\n  /** The name of the attribute to be searched. */\n  attributeName: string;\n  /** The desired prefix of the search attribute value. */\n  attributePrefix: string;\n}\n\nexport const catalogQueryPrefixSchema: Schema<CatalogQueryPrefix> = object({\n  attributeName: ['attribute_name', string()],\n  attributePrefix: ['attribute_prefix', string()],\n});\n","import { bigint, object, optional, Schema, string } from '../schema';\n\n/** The query filter to return the search result whose named attribute values fall between the specified range. */\nexport interface CatalogQueryRange {\n  /** The name of the attribute to be searched. */\n  attributeName: string;\n  /** The desired minimum value for the search attribute (inclusive). */\n  attributeMinValue?: bigint;\n  /** The desired maximum value for the search attribute (inclusive). */\n  attributeMaxValue?: bigint;\n}\n\nexport const catalogQueryRangeSchema: Schema<CatalogQueryRange> = object({\n  attributeName: ['attribute_name', string()],\n  attributeMinValue: ['attribute_min_value', optional(bigint())],\n  attributeMaxValue: ['attribute_max_value', optional(bigint())],\n});\n","import { array, object, Schema, string } from '../schema';\n\n/**\n * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of\n * the `attribute_values`.\n */\nexport interface CatalogQuerySet {\n  /** The name of the attribute to be searched. Matching of the attribute name is exact. */\n  attributeName: string;\n  /**\n   * The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.\n   * A maximum of 250 values may be searched in a request.\n   */\n  attributeValues: string[];\n}\n\nexport const catalogQuerySetSchema: Schema<CatalogQuerySet> = object({\n  attributeName: ['attribute_name', string()],\n  attributeValues: ['attribute_values', array(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** The query expression to specify the key to sort search results. */\nexport interface CatalogQuerySortedAttribute {\n  /** The attribute whose value is used as the sort key. */\n  attributeName: string;\n  /**\n   * The first attribute value to be returned by the query. Ascending sorts will return only\n   * objects with this value or greater, while descending sorts will return only objects with this value\n   * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).\n   */\n  initialAttributeValue?: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  sortOrder?: string;\n}\n\nexport const catalogQuerySortedAttributeSchema: Schema<CatalogQuerySortedAttribute> = object(\n  {\n    attributeName: ['attribute_name', string()],\n    initialAttributeValue: ['initial_attribute_value', optional(string())],\n    sortOrder: ['sort_order', optional(string())],\n  }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case. */\nexport interface CatalogQueryText {\n  /** A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 characters are ignored. */\n  keywords: string[];\n}\n\nexport const catalogQueryTextSchema: Schema<CatalogQueryText> = object({\n  keywords: ['keywords', array(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  CatalogQueryExact,\n  catalogQueryExactSchema,\n} from './catalogQueryExact';\nimport {\n  CatalogQueryItemsForItemOptions,\n  catalogQueryItemsForItemOptionsSchema,\n} from './catalogQueryItemsForItemOptions';\nimport {\n  CatalogQueryItemsForModifierList,\n  catalogQueryItemsForModifierListSchema,\n} from './catalogQueryItemsForModifierList';\nimport {\n  CatalogQueryItemsForTax,\n  catalogQueryItemsForTaxSchema,\n} from './catalogQueryItemsForTax';\nimport {\n  CatalogQueryItemVariationsForItemOptionValues,\n  catalogQueryItemVariationsForItemOptionValuesSchema,\n} from './catalogQueryItemVariationsForItemOptionValues';\nimport {\n  CatalogQueryPrefix,\n  catalogQueryPrefixSchema,\n} from './catalogQueryPrefix';\nimport {\n  CatalogQueryRange,\n  catalogQueryRangeSchema,\n} from './catalogQueryRange';\nimport { CatalogQuerySet, catalogQuerySetSchema } from './catalogQuerySet';\nimport {\n  CatalogQuerySortedAttribute,\n  catalogQuerySortedAttributeSchema,\n} from './catalogQuerySortedAttribute';\nimport { CatalogQueryText, catalogQueryTextSchema } from './catalogQueryText';\n\n/**\n * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.\n * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects]($e/Catalog/SearchCatalogObjects).\n * Any combination of the following types may be used together:\n * - [exact_query]($m/CatalogQueryExact)\n * - [prefix_query]($m/CatalogQueryPrefix)\n * - [range_query]($m/CatalogQueryRange)\n * - [sorted_attribute_query]($m/CatalogQuerySortedAttribute)\n * - [text_query]($m/CatalogQueryText)\n * All other query types cannot be combined with any others.\n * When a query filter is based on an attribute, the attribute must be searchable.\n * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.\n * * Searchable attribute and objects queryable by searchable attributes **\n * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`\n * - `description`: `CatalogItem`, `CatalogItemOptionValue`\n * - `abbreviation`: `CatalogItem`\n * - `upc`: `CatalogItemVariation`\n * - `sku`: `CatalogItemVariation`\n * - `caption`: `CatalogImage`\n * - `display_name`: `CatalogItemOption`\n * For example, to search for [CatalogItem]($m/CatalogItem) objects by searchable attributes, you can use\n * the `\"name\"`, `\"description\"`, or `\"abbreviation\"` attribute in an applicable query filter.\n */\nexport interface CatalogQuery {\n  /** The query expression to specify the key to sort search results. */\n  sortedAttributeQuery?: CatalogQuerySortedAttribute;\n  /** The query filter to return the search result by exact match of the specified attribute name and value. */\n  exactQuery?: CatalogQueryExact;\n  /**\n   * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of\n   * the `attribute_values`.\n   */\n  setQuery?: CatalogQuerySet;\n  /** The query filter to return the search result whose named attribute values are prefixed by the specified attribute value. */\n  prefixQuery?: CatalogQueryPrefix;\n  /** The query filter to return the search result whose named attribute values fall between the specified range. */\n  rangeQuery?: CatalogQueryRange;\n  /** The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case. */\n  textQuery?: CatalogQueryText;\n  /** The query filter to return the items containing the specified tax IDs. */\n  itemsForTaxQuery?: CatalogQueryItemsForTax;\n  /** The query filter to return the items containing the specified modifier list IDs. */\n  itemsForModifierListQuery?: CatalogQueryItemsForModifierList;\n  /** The query filter to return the items containing the specified item option IDs. */\n  itemsForItemOptionsQuery?: CatalogQueryItemsForItemOptions;\n  /** The query filter to return the item variations containing the specified item option value IDs. */\n  itemVariationsForItemOptionValuesQuery?: CatalogQueryItemVariationsForItemOptionValues;\n}\n\nexport const catalogQuerySchema: Schema<CatalogQuery> = object({\n  sortedAttributeQuery: [\n    'sorted_attribute_query',\n    optional(lazy(() => catalogQuerySortedAttributeSchema)),\n  ],\n  exactQuery: ['exact_query', optional(lazy(() => catalogQueryExactSchema))],\n  setQuery: ['set_query', optional(lazy(() => catalogQuerySetSchema))],\n  prefixQuery: ['prefix_query', optional(lazy(() => catalogQueryPrefixSchema))],\n  rangeQuery: ['range_query', optional(lazy(() => catalogQueryRangeSchema))],\n  textQuery: ['text_query', optional(lazy(() => catalogQueryTextSchema))],\n  itemsForTaxQuery: [\n    'items_for_tax_query',\n    optional(lazy(() => catalogQueryItemsForTaxSchema)),\n  ],\n  itemsForModifierListQuery: [\n    'items_for_modifier_list_query',\n    optional(lazy(() => catalogQueryItemsForModifierListSchema)),\n  ],\n  itemsForItemOptionsQuery: [\n    'items_for_item_options_query',\n    optional(lazy(() => catalogQueryItemsForItemOptionsSchema)),\n  ],\n  itemVariationsForItemOptionValuesQuery: [\n    'item_variations_for_item_option_values_query',\n    optional(lazy(() => catalogQueryItemVariationsForItemOptionValuesSchema)),\n  ],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { CatalogQuery, catalogQuerySchema } from './catalogQuery';\n\nexport interface SearchCatalogObjectsRequest {\n  /**\n   * The pagination cursor returned in the previous response. Leave unset for an initial request.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /**\n   * The desired set of object types to appear in the search results.\n   * If this is unspecified, the operation returns objects of all the top level types at the version\n   * of the Square API used to make the request. Object types that are nested onto other object types\n   * are not included in the defaults.\n   * At the current API version the default object types are:\n   * ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST, DINING_OPTION, TAX_EXEMPTION,\n   * SERVICE_CHARGE, PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,\n   * SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.\n   */\n  objectTypes?: string[];\n  /**\n   * If `true`, deleted objects will be included in the results. Deleted objects will have their\n   * `is_deleted` field set to `true`.\n   */\n  includeDeletedObjects?: boolean;\n  /**\n   * If `true`, the response will include additional objects that are related to the\n   * requested objects. Related objects are objects that are referenced by object ID by the objects\n   * in the response. This is helpful if the objects are being fetched for immediate display to a user.\n   * This process only goes one level deep. Objects referenced by the related objects will not be included.\n   * For example:\n   * If the `objects` field of the response contains a CatalogItem, its associated\n   * CatalogCategory objects, CatalogTax objects, CatalogImage objects and\n   * CatalogModifierLists will be returned in the `related_objects` field of the\n   * response. If the `objects` field of the response contains a CatalogItemVariation,\n   * its parent CatalogItem will be returned in the `related_objects` field of\n   * the response.\n   * Default value: `false`\n   */\n  includeRelatedObjects?: boolean;\n  /**\n   * Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339\n   * format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a\n   * timestamp equal to `begin_time` will not be included in the response.\n   */\n  beginTime?: string;\n  /**\n   * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.\n   * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects]($e/Catalog/SearchCatalogObjects).\n   * Any combination of the following types may be used together:\n   * - [exact_query]($m/CatalogQueryExact)\n   * - [prefix_query]($m/CatalogQueryPrefix)\n   * - [range_query]($m/CatalogQueryRange)\n   * - [sorted_attribute_query]($m/CatalogQuerySortedAttribute)\n   * - [text_query]($m/CatalogQueryText)\n   * All other query types cannot be combined with any others.\n   * When a query filter is based on an attribute, the attribute must be searchable.\n   * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.\n   * * Searchable attribute and objects queryable by searchable attributes **\n   * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`\n   * - `description`: `CatalogItem`, `CatalogItemOptionValue`\n   * - `abbreviation`: `CatalogItem`\n   * - `upc`: `CatalogItemVariation`\n   * - `sku`: `CatalogItemVariation`\n   * - `caption`: `CatalogImage`\n   * - `display_name`: `CatalogItemOption`\n   * For example, to search for [CatalogItem]($m/CatalogItem) objects by searchable attributes, you can use\n   * the `\"name\"`, `\"description\"`, or `\"abbreviation\"` attribute in an applicable query filter.\n   */\n  query?: CatalogQuery;\n  /**\n   * A limit on the number of results to be returned in a single page. The limit is advisory -\n   * the implementation may return more or fewer results. If the supplied limit is negative, zero, or\n   * is higher than the maximum limit of 1,000, it will be ignored.\n   */\n  limit?: number;\n}\n\nexport const searchCatalogObjectsRequestSchema: Schema<SearchCatalogObjectsRequest> = object(\n  {\n    cursor: ['cursor', optional(string())],\n    objectTypes: ['object_types', optional(array(string()))],\n    includeDeletedObjects: ['include_deleted_objects', optional(boolean())],\n    includeRelatedObjects: ['include_related_objects', optional(boolean())],\n    beginTime: ['begin_time', optional(string())],\n    query: ['query', optional(lazy(() => catalogQuerySchema))],\n    limit: ['limit', optional(number())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface SearchCatalogObjectsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset, this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** The CatalogObjects returned. */\n  objects?: CatalogObject[];\n  /** A list of CatalogObjects referenced by the objects in the `objects` field. */\n  relatedObjects?: CatalogObject[];\n  /**\n   * When the associated product catalog was last updated. Will\n   * match the value for `end_time` or `cursor` if either field is included in the `SearchCatalog` request.\n   */\n  latestTime?: string;\n}\n\nexport const searchCatalogObjectsResponseSchema: Schema<SearchCatalogObjectsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    cursor: ['cursor', optional(string())],\n    objects: ['objects', optional(array(lazy(() => catalogObjectSchema)))],\n    relatedObjects: [\n      'related_objects',\n      optional(array(lazy(() => catalogObjectSchema))),\n    ],\n    latestTime: ['latest_time', optional(string())],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\nexport interface UpdateCatalogImageRequest {\n  /**\n   * A unique string that identifies this UpdateCatalogImage request.\n   * Keys can be any valid string but must be unique for every UpdateCatalogImage request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n}\n\nexport const updateCatalogImageRequestSchema: Schema<UpdateCatalogImageRequest> = object(\n  { idempotencyKey: ['idempotency_key', string()] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface UpdateCatalogImageResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The wrapper object for the catalog entries of a given object type.\n   * Depending on the `type` attribute value, a `CatalogObject` instance assumes a type-specific data to yield the corresponding type of catalog object.\n   * For example, if `type=ITEM`, the `CatalogObject` instance must have the ITEM-specific data set on the `item_data` attribute. The resulting `CatalogObject` instance is also a `CatalogItem` instance.\n   * In general, if `type=<OBJECT_TYPE>`, the `CatalogObject` instance must have the `<OBJECT_TYPE>`-specific data set on the `<object_type>_data` attribute. The resulting `CatalogObject` instance is also a `Catalog<ObjectType>` instance.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  image?: CatalogObject;\n}\n\nexport const updateCatalogImageResponseSchema: Schema<UpdateCatalogImageResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    image: ['image', optional(lazy(() => catalogObjectSchema))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface UpdateItemModifierListsRequest {\n  /** The IDs of the catalog items associated with the CatalogModifierList objects being updated. */\n  itemIds: string[];\n  /**\n   * The IDs of the CatalogModifierList objects to enable for the CatalogItem.\n   * At least one of `modifier_lists_to_enable` or `modifier_lists_to_disable` must be specified.\n   */\n  modifierListsToEnable?: string[];\n  /**\n   * The IDs of the CatalogModifierList objects to disable for the CatalogItem.\n   * At least one of `modifier_lists_to_enable` or `modifier_lists_to_disable` must be specified.\n   */\n  modifierListsToDisable?: string[];\n}\n\nexport const updateItemModifierListsRequestSchema: Schema<UpdateItemModifierListsRequest> = object(\n  {\n    itemIds: ['item_ids', array(string())],\n    modifierListsToEnable: [\n      'modifier_lists_to_enable',\n      optional(array(string())),\n    ],\n    modifierListsToDisable: [\n      'modifier_lists_to_disable',\n      optional(array(string())),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface UpdateItemModifierListsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-date) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. */\n  updatedAt?: string;\n}\n\nexport const updateItemModifierListsResponseSchema: Schema<UpdateItemModifierListsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    updatedAt: ['updated_at', optional(string())],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface UpdateItemTaxesRequest {\n  /**\n   * IDs for the CatalogItems associated with the CatalogTax objects being updated.\n   * No more than 1,000 IDs may be provided.\n   */\n  itemIds: string[];\n  /**\n   * IDs of the CatalogTax objects to enable.\n   * At least one of `taxes_to_enable` or `taxes_to_disable` must be specified.\n   */\n  taxesToEnable?: string[];\n  /**\n   * IDs of the CatalogTax objects to disable.\n   * At least one of `taxes_to_enable` or `taxes_to_disable` must be specified.\n   */\n  taxesToDisable?: string[];\n}\n\nexport const updateItemTaxesRequestSchema: Schema<UpdateItemTaxesRequest> = object(\n  {\n    itemIds: ['item_ids', array(string())],\n    taxesToEnable: ['taxes_to_enable', optional(array(string()))],\n    taxesToDisable: ['taxes_to_disable', optional(array(string()))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface UpdateItemTaxesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. */\n  updatedAt?: string;\n}\n\nexport const updateItemTaxesResponseSchema: Schema<UpdateItemTaxesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    updatedAt: ['updated_at', optional(string())],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\nexport interface UpsertCatalogObjectRequest {\n  /**\n   * A value you specify that uniquely identifies this\n   * request among all your requests. A common way to create\n   * a valid idempotency key is to use a Universally unique\n   * identifier (UUID).\n   * If you're unsure whether a particular request was successful,\n   * you can reattempt it with the same idempotency key without\n   * worrying about creating duplicate objects.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /**\n   * The wrapper object for the catalog entries of a given object type.\n   * Depending on the `type` attribute value, a `CatalogObject` instance assumes a type-specific data to yield the corresponding type of catalog object.\n   * For example, if `type=ITEM`, the `CatalogObject` instance must have the ITEM-specific data set on the `item_data` attribute. The resulting `CatalogObject` instance is also a `CatalogItem` instance.\n   * In general, if `type=<OBJECT_TYPE>`, the `CatalogObject` instance must have the `<OBJECT_TYPE>`-specific data set on the `<object_type>_data` attribute. The resulting `CatalogObject` instance is also a `Catalog<ObjectType>` instance.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  object: CatalogObject;\n}\n\nexport const upsertCatalogObjectRequestSchema: Schema<UpsertCatalogObjectRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    object: ['object', lazy(() => catalogObjectSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogIdMapping, catalogIdMappingSchema } from './catalogIdMapping';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface UpsertCatalogObjectResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The wrapper object for the catalog entries of a given object type.\n   * Depending on the `type` attribute value, a `CatalogObject` instance assumes a type-specific data to yield the corresponding type of catalog object.\n   * For example, if `type=ITEM`, the `CatalogObject` instance must have the ITEM-specific data set on the `item_data` attribute. The resulting `CatalogObject` instance is also a `CatalogItem` instance.\n   * In general, if `type=<OBJECT_TYPE>`, the `CatalogObject` instance must have the `<OBJECT_TYPE>`-specific data set on the `<object_type>_data` attribute. The resulting `CatalogObject` instance is also a `Catalog<ObjectType>` instance.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  catalogObject?: CatalogObject;\n  /** The mapping between client and server IDs for this upsert. */\n  idMappings?: CatalogIdMapping[];\n}\n\nexport const upsertCatalogObjectResponseSchema: Schema<UpsertCatalogObjectResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    catalogObject: [\n      'catalog_object',\n      optional(lazy(() => catalogObjectSchema)),\n    ],\n    idMappings: [\n      'id_mappings',\n      optional(array(lazy(() => catalogIdMappingSchema))),\n    ],\n  }\n);\n","import { ApiResponse, FileWrapper, RequestOptions } from '../core';\nimport {\n  BatchDeleteCatalogObjectsRequest,\n  batchDeleteCatalogObjectsRequestSchema,\n} from '../models/batchDeleteCatalogObjectsRequest';\nimport {\n  BatchDeleteCatalogObjectsResponse,\n  batchDeleteCatalogObjectsResponseSchema,\n} from '../models/batchDeleteCatalogObjectsResponse';\nimport {\n  BatchRetrieveCatalogObjectsRequest,\n  batchRetrieveCatalogObjectsRequestSchema,\n} from '../models/batchRetrieveCatalogObjectsRequest';\nimport {\n  BatchRetrieveCatalogObjectsResponse,\n  batchRetrieveCatalogObjectsResponseSchema,\n} from '../models/batchRetrieveCatalogObjectsResponse';\nimport {\n  BatchUpsertCatalogObjectsRequest,\n  batchUpsertCatalogObjectsRequestSchema,\n} from '../models/batchUpsertCatalogObjectsRequest';\nimport {\n  BatchUpsertCatalogObjectsResponse,\n  batchUpsertCatalogObjectsResponseSchema,\n} from '../models/batchUpsertCatalogObjectsResponse';\nimport {\n  CatalogInfoResponse,\n  catalogInfoResponseSchema,\n} from '../models/catalogInfoResponse';\nimport {\n  CreateCatalogImageRequest,\n  createCatalogImageRequestSchema,\n} from '../models/createCatalogImageRequest';\nimport {\n  CreateCatalogImageResponse,\n  createCatalogImageResponseSchema,\n} from '../models/createCatalogImageResponse';\nimport {\n  DeleteCatalogObjectResponse,\n  deleteCatalogObjectResponseSchema,\n} from '../models/deleteCatalogObjectResponse';\nimport {\n  ListCatalogResponse,\n  listCatalogResponseSchema,\n} from '../models/listCatalogResponse';\nimport {\n  RetrieveCatalogObjectResponse,\n  retrieveCatalogObjectResponseSchema,\n} from '../models/retrieveCatalogObjectResponse';\nimport {\n  SearchCatalogItemsRequest,\n  searchCatalogItemsRequestSchema,\n} from '../models/searchCatalogItemsRequest';\nimport {\n  SearchCatalogItemsResponse,\n  searchCatalogItemsResponseSchema,\n} from '../models/searchCatalogItemsResponse';\nimport {\n  SearchCatalogObjectsRequest,\n  searchCatalogObjectsRequestSchema,\n} from '../models/searchCatalogObjectsRequest';\nimport {\n  SearchCatalogObjectsResponse,\n  searchCatalogObjectsResponseSchema,\n} from '../models/searchCatalogObjectsResponse';\nimport {\n  UpdateCatalogImageRequest,\n  updateCatalogImageRequestSchema,\n} from '../models/updateCatalogImageRequest';\nimport {\n  UpdateCatalogImageResponse,\n  updateCatalogImageResponseSchema,\n} from '../models/updateCatalogImageResponse';\nimport {\n  UpdateItemModifierListsRequest,\n  updateItemModifierListsRequestSchema,\n} from '../models/updateItemModifierListsRequest';\nimport {\n  UpdateItemModifierListsResponse,\n  updateItemModifierListsResponseSchema,\n} from '../models/updateItemModifierListsResponse';\nimport {\n  UpdateItemTaxesRequest,\n  updateItemTaxesRequestSchema,\n} from '../models/updateItemTaxesRequest';\nimport {\n  UpdateItemTaxesResponse,\n  updateItemTaxesResponseSchema,\n} from '../models/updateItemTaxesResponse';\nimport {\n  UpsertCatalogObjectRequest,\n  upsertCatalogObjectRequestSchema,\n} from '../models/upsertCatalogObjectRequest';\nimport {\n  UpsertCatalogObjectResponse,\n  upsertCatalogObjectResponseSchema,\n} from '../models/upsertCatalogObjectResponse';\nimport { bigint, boolean, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CatalogApi extends BaseApi {\n  /**\n   * Deletes a set of [CatalogItem]($m/CatalogItem)s based on the\n   * provided list of target IDs and returns a set of successfully deleted IDs in\n   * the response. Deletion is a cascading event such that all children of the\n   * targeted object are also deleted. For example, deleting a CatalogItem will\n   * also delete all of its [CatalogItemVariation]($m/CatalogItemVariation)\n   * children.\n   *\n   * `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted\n   * IDs can be deleted. The response will only include IDs that were\n   * actually deleted.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                                request.  See the corresponding object definition\n   *                                                                for field details.\n   * @return Response from the API call\n   */\n  async batchDeleteCatalogObjects(\n    body: BatchDeleteCatalogObjectsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchDeleteCatalogObjectsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/batch-delete');\n    const mapped = req.prepareArgs({\n      body: [body, batchDeleteCatalogObjectsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchDeleteCatalogObjectsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Returns a set of objects based on the provided ID.\n   * Each [CatalogItem]($m/CatalogItem) returned in the set includes all of its\n   * child information including: all of its\n   * [CatalogItemVariation]($m/CatalogItemVariation) objects, references to\n   * its [CatalogModifierList]($m/CatalogModifierList) objects, and the ids of\n   * any [CatalogTax]($m/CatalogTax) objects that apply to it.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                                  request.  See the corresponding object definition\n   *                                                                  for field details.\n   * @return Response from the API call\n   */\n  async batchRetrieveCatalogObjects(\n    body: BatchRetrieveCatalogObjectsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveCatalogObjectsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/batch-retrieve');\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveCatalogObjectsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchRetrieveCatalogObjectsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Creates or updates up to 10,000 target objects based on the provided\n   * list of objects. The target objects are grouped into batches and each batch is\n   * inserted/updated in an all-or-nothing manner. If an object within a batch is\n   * malformed in some way, or violates a database constraint, the entire batch\n   * containing that item will be disregarded. However, other batches in the same\n   * request may still succeed. Each batch may contain up to 1,000 objects, and\n   * batches will be processed in order as long as the total object count for the\n   * request (items, variations, modifier lists, discounts, and taxes) is no more\n   * than 10,000.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                                request.  See the corresponding object definition\n   *                                                                for field details.\n   * @return Response from the API call\n   */\n  async batchUpsertCatalogObjects(\n    body: BatchUpsertCatalogObjectsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchUpsertCatalogObjectsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/batch-upsert');\n    const mapped = req.prepareArgs({\n      body: [body, batchUpsertCatalogObjectsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchUpsertCatalogObjectsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Uploads an image file to be represented by a [CatalogImage]($m/CatalogImage) object that can be\n   * linked to an existing\n   * [CatalogObject]($m/CatalogObject) instance. The resulting `CatalogImage` is unattached to any\n   * `CatalogObject` if the `object_id`\n   * is not specified.\n   *\n   * This `CreateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an\n   * image file part in\n   * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.\n   *\n   * @param request\n   * @param imageFile\n   * @return Response from the API call\n   */\n  async createCatalogImage(\n    request?: CreateCatalogImageRequest,\n    imageFile?: FileWrapper,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCatalogImageResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/images');\n    const mapped = req.prepareArgs({\n      request: [request, optional(createCatalogImageRequestSchema)],\n    });\n    req.formData({\n      request: JSON.stringify(mapped.request),\n      image_file: imageFile,\n    });\n    return req.callAsJson(createCatalogImageResponseSchema, requestOptions);\n  }\n\n  /**\n   * Uploads a new image file to replace the existing one in the specified\n   * [CatalogImage]($m/CatalogImage) object.\n   *\n   * This `UpdateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an\n   * image file part in\n   * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.\n   *\n   * @param imageId    The ID of the `CatalogImage` object to update the\n   *                                                       encapsulated image file.\n   * @param request\n   * @param imageFile\n   * @return Response from the API call\n   */\n  async updateCatalogImage(\n    imageId: string,\n    request?: UpdateCatalogImageRequest,\n    imageFile?: FileWrapper,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateCatalogImageResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      imageId: [imageId, string()],\n      request: [request, optional(updateCatalogImageRequestSchema)],\n    });\n    req.formData({\n      request: JSON.stringify(mapped.request),\n      image_file: imageFile,\n    });\n    req.appendTemplatePath`/v2/catalog/images/${mapped.imageId}`;\n    return req.callAsJson(updateCatalogImageResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves information about the Square Catalog API, such as batch size\n   * limits that can be used by the `BatchUpsertCatalogObjects` endpoint.\n   *\n   * @return Response from the API call\n   */\n  async catalogInfo(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CatalogInfoResponse>> {\n    const req = this.createRequest('GET', '/v2/catalog/info');\n    return req.callAsJson(catalogInfoResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a list of all [CatalogObject]($m/CatalogObject)s of the specified types in the catalog.\n   *\n   * The `types` parameter is specified as a comma-separated list of the\n   * [CatalogObjectType]($m/CatalogObjectType) values,\n   * for example, \"`ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`,\n   * `IMAGE`\".\n   *\n   * __Important:__ ListCatalog does not return deleted catalog items. To retrieve\n   * deleted catalog items, use [SearchCatalogObjects]($e/Catalog/SearchCatalogObjects)\n   * and set the `include_deleted_objects` attribute value to `true`.\n   *\n   * @param cursor          The pagination cursor returned in the previous response. Leave unset for an\n   *                                  initial request. The page size is currently set to be 100. See [Pagination](https:\n   *                                  //developer.squareup.com/docs/basics/api101/pagination) for more information.\n   * @param types           An optional case-insensitive, comma-separated list of object types to retrieve.\n   *                                  The valid values are defined in the [CatalogObjectType]($m/CatalogObjectType)\n   *                                  enum, for example, `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,\n   *                                  `MODIFIER`, `MODIFIER_LIST`, `IMAGE`, etc.  If this is unspecified, the operation\n   *                                  returns objects of all the top level types at the version of the Square API used\n   *                                  to make the request. Object types that are nested onto other object types are not\n   *                                  included in the defaults.  At the current API version the default object types\n   *                                  are: ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST, DINING_OPTION, TAX_EXEMPTION,\n   *                                  SERVICE_CHARGE, PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,\n   *                                  SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION,\n   *                                  QUICK_AMOUNT_SETTINGS.\n   * @param catalogVersion  The specific version of the catalog objects to be included in the response.\n   *                                  This allows you to retrieve historical versions of objects. The specified version\n   *                                  value is matched against the [CatalogObject]($m/CatalogObject)s' `version`\n   *                                  attribute.  If not included, results will be from the current version of the\n   *                                  catalog.\n   * @return Response from the API call\n   */\n  async listCatalog(\n    cursor?: string,\n    types?: string,\n    catalogVersion?: bigint,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCatalogResponse>> {\n    const req = this.createRequest('GET', '/v2/catalog/list');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      types: [types, optional(string())],\n      catalogVersion: [catalogVersion, optional(bigint())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('types', mapped.types);\n    req.query('catalog_version', mapped.catalogVersion);\n    return req.callAsJson(listCatalogResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates or updates the target [CatalogObject]($m/CatalogObject).\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async upsertCatalogObject(\n    body: UpsertCatalogObjectRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpsertCatalogObjectResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/object');\n    const mapped = req.prepareArgs({\n      body: [body, upsertCatalogObjectRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(upsertCatalogObjectResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a single [CatalogObject]($m/CatalogObject) based on the\n   * provided ID and returns the set of successfully deleted IDs in the response.\n   * Deletion is a cascading event such that all children of the targeted object\n   * are also deleted. For example, deleting a [CatalogItem]($m/CatalogItem)\n   * will also delete all of its\n   * [CatalogItemVariation]($m/CatalogItemVariation) children.\n   *\n   * @param objectId  The ID of the catalog object to be deleted. When an object is deleted, other objects\n   *                            in the graph that depend on that object will be deleted as well (for example, deleting\n   *                            a catalog item will delete its catalog item variations).\n   * @return Response from the API call\n   */\n  async deleteCatalogObject(\n    objectId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteCatalogObjectResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ objectId: [objectId, string()] });\n    req.appendTemplatePath`/v2/catalog/object/${mapped.objectId}`;\n    return req.callAsJson(deleteCatalogObjectResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single [CatalogItem]($m/CatalogItem) as a\n   * [CatalogObject]($m/CatalogObject) based on the provided ID. The returned\n   * object includes all of the relevant [CatalogItem]($m/CatalogItem)\n   * information including: [CatalogItemVariation]($m/CatalogItemVariation)\n   * children, references to its\n   * [CatalogModifierList]($m/CatalogModifierList) objects, and the ids of\n   * any [CatalogTax]($m/CatalogTax) objects that apply to it.\n   *\n   * @param objectId                The object ID of any type of catalog objects to be retrieved.\n   * @param includeRelatedObjects   If `true`, the response will include additional objects that are\n   *                                           related to the requested objects. Related objects are defined as any\n   *                                           objects referenced by ID by the results in the `objects` field of the\n   *                                           response. These objects are put in the `related_objects` field. Setting\n   *                                           this to `true` is helpful when the objects are needed for immediate\n   *                                           display to a user. This process only goes one level deep. Objects\n   *                                           referenced by the related objects will not be included. For example,  if\n   *                                           the `objects` field of the response contains a CatalogItem, its\n   *                                           associated CatalogCategory objects, CatalogTax objects, CatalogImage\n   *                                           objects and CatalogModifierLists will be returned in the\n   *                                           `related_objects` field of the response. If the `objects` field of the\n   *                                           response contains a CatalogItemVariation, its parent CatalogItem will be\n   *                                           returned in the `related_objects` field of the response.  Default value:\n   *                                           `false`\n   * @param catalogVersion          Requests objects as of a specific version of the catalog. This allows\n   *                                           you to retrieve historical versions of objects. The value to retrieve a\n   *                                           specific version of an object can be found in the version field of\n   *                                           [CatalogObject]($m/CatalogObject)s. If not included, results will be\n   *                                           from the current version of the catalog.\n   * @return Response from the API call\n   */\n  async retrieveCatalogObject(\n    objectId: string,\n    includeRelatedObjects?: boolean,\n    catalogVersion?: bigint,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCatalogObjectResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      objectId: [objectId, string()],\n      includeRelatedObjects: [includeRelatedObjects, optional(boolean())],\n      catalogVersion: [catalogVersion, optional(bigint())],\n    });\n    req.query('include_related_objects', mapped.includeRelatedObjects);\n    req.query('catalog_version', mapped.catalogVersion);\n    req.appendTemplatePath`/v2/catalog/object/${mapped.objectId}`;\n    return req.callAsJson(retrieveCatalogObjectResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for [CatalogObject]($m/CatalogObject) of any type by matching supported search attribute\n   * values,\n   * excluding custom attribute values on items or item variations, against one or more of the specified\n   * query filters.\n   *\n   * This (`SearchCatalogObjects`) endpoint differs from the\n   * [SearchCatalogItems]($e/Catalog/SearchCatalogItems)\n   * endpoint in the following aspects:\n   *\n   * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects`\n   * can search for any type of catalog objects.\n   * - `SearchCatalogItems` supports the custom attribute query filters to return items or item\n   * variations that contain custom attribute values, where `SearchCatalogObjects` does not.\n   * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted\n   * items or item variations, whereas `SearchCatalogObjects` does.\n   * - The both endpoints have different call conventions, including the query filter formats.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async searchCatalogObjects(\n    body: SearchCatalogObjectsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchCatalogObjectsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchCatalogObjectsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchCatalogObjectsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for catalog items or item variations by matching supported search attribute values,\n   * including\n   * custom attribute values, against one or more of the specified query filters.\n   *\n   * This (`SearchCatalogItems`) endpoint differs from the\n   * [SearchCatalogObjects]($e/Catalog/SearchCatalogObjects)\n   * endpoint in the following aspects:\n   *\n   * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects`\n   * can search for any type of catalog objects.\n   * - `SearchCatalogItems` supports the custom attribute query filters to return items or item\n   * variations that contain custom attribute values, where `SearchCatalogObjects` does not.\n   * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted\n   * items or item variations, whereas `SearchCatalogObjects` does.\n   * - The both endpoints use different call conventions, including the query filter formats.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                         See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchCatalogItems(\n    body: SearchCatalogItemsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchCatalogItemsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/search-catalog-items');\n    const mapped = req.prepareArgs({\n      body: [body, searchCatalogItemsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchCatalogItemsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates the [CatalogModifierList]($m/CatalogModifierList) objects\n   * that apply to the targeted [CatalogItem]($m/CatalogItem) without having\n   * to perform an upsert on the entire item.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                              request.  See the corresponding object definition for\n   *                                                              field details.\n   * @return Response from the API call\n   */\n  async updateItemModifierLists(\n    body: UpdateItemModifierListsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateItemModifierListsResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/catalog/update-item-modifier-lists'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, updateItemModifierListsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      updateItemModifierListsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Updates the [CatalogTax]($m/CatalogTax) objects that apply to the\n   * targeted [CatalogItem]($m/CatalogItem) without having to perform an\n   * upsert on the entire item.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateItemTaxes(\n    body: UpdateItemTaxesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateItemTaxesResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/update-item-taxes');\n    const mapped = req.prepareArgs({\n      body: [body, updateItemTaxesRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(updateItemTaxesResponseSchema, requestOptions);\n  }\n}\n","import { lazy, object, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents an additional recipient (other than the merchant) entitled to a portion of the tender.\n * Support is currently limited to USD, CAD and GBP currencies\n */\nexport interface ChargeRequestAdditionalRecipient {\n  /** The location ID for a recipient (other than the merchant) receiving a portion of the tender. */\n  locationId: string;\n  /** The description of the additional recipient. */\n  description: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n}\n\nexport const chargeRequestAdditionalRecipientSchema: Schema<ChargeRequestAdditionalRecipient> = object(\n  {\n    locationId: ['location_id', string()],\n    description: ['description', string()],\n    amountMoney: ['amount_money', lazy(() => moneySchema)],\n  }\n);\n","import { dict, object, optional, Schema, string } from '../schema';\n\n/**\n * Links an order line item to a fulfillment. Each entry must reference\n * a valid `uid` for an order line item in the `line_item_uid` field, as well as a `quantity` to\n * fulfill.\n */\nexport interface OrderFulfillmentFulfillmentEntry {\n  /** A unique ID that identifies the fulfillment entry only within this order. */\n  uid?: string;\n  /** The `uid` from the order line item. */\n  lineItemUid: string;\n  /**\n   * The quantity of the line item being fulfilled, formatted as a decimal number.\n   * For example, `\"3\"`.\n   * Fulfillments for line items with a `quantity_unit` can have non-integer quantities.\n   * For example, `\"1.70000\"`.\n   */\n  quantity: string;\n  /**\n   * Application-defined data attached to this fulfillment entry. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally\n   * identifiable information or card details).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a maximum length of 255 characters.\n   * An application can have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).\n   */\n  metadata?: Record<string, string>;\n}\n\nexport const orderFulfillmentFulfillmentEntrySchema: Schema<OrderFulfillmentFulfillmentEntry> = object(\n  {\n    uid: ['uid', optional(string())],\n    lineItemUid: ['line_item_uid', string()],\n    quantity: ['quantity', string()],\n    metadata: ['metadata', optional(dict(string()))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Specific details for curbside pickup. */\nexport interface OrderFulfillmentPickupDetailsCurbsidePickupDetails {\n  /** Specific details for curbside pickup, such as parking number and vehicle model. */\n  curbsideDetails?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  buyerArrivedAt?: string;\n}\n\nexport const orderFulfillmentPickupDetailsCurbsidePickupDetailsSchema: Schema<OrderFulfillmentPickupDetailsCurbsidePickupDetails> = object(\n  {\n    curbsideDetails: ['curbside_details', optional(string())],\n    buyerArrivedAt: ['buyer_arrived_at', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\n\n/** Contains information about the recipient of a fulfillment. */\nexport interface OrderFulfillmentRecipient {\n  /**\n   * The customer ID of the customer associated with the fulfillment.\n   * If `customer_id` is provided, the fulfillment recipient's `display_name`,\n   * `email_address`, and `phone_number` are automatically populated from the\n   * targeted customer profile. If these fields are set in the request, the request\n   * values overrides the information from the customer profile. If the\n   * targeted customer profile does not contain the necessary information and\n   * these fields are left unset, the request results in an error.\n   */\n  customerId?: string;\n  /**\n   * The display name of the fulfillment recipient.\n   * If provided, the display name overrides the value pulled from the customer profile indicated by `customer_id`.\n   */\n  displayName?: string;\n  /**\n   * The email address of the fulfillment recipient.\n   * If provided, the email address overrides the value pulled from the customer profile indicated by `customer_id`.\n   */\n  emailAddress?: string;\n  /**\n   * The phone number of the fulfillment recipient.\n   * If provided, the phone number overrides the value pulled from the customer profile indicated by `customer_id`.\n   */\n  phoneNumber?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  address?: Address;\n}\n\nexport const orderFulfillmentRecipientSchema: Schema<OrderFulfillmentRecipient> = object(\n  {\n    customerId: ['customer_id', optional(string())],\n    displayName: ['display_name', optional(string())],\n    emailAddress: ['email_address', optional(string())],\n    phoneNumber: ['phone_number', optional(string())],\n    address: ['address', optional(lazy(() => addressSchema))],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  OrderFulfillmentPickupDetailsCurbsidePickupDetails,\n  orderFulfillmentPickupDetailsCurbsidePickupDetailsSchema,\n} from './orderFulfillmentPickupDetailsCurbsidePickupDetails';\nimport {\n  OrderFulfillmentRecipient,\n  orderFulfillmentRecipientSchema,\n} from './orderFulfillmentRecipient';\n\n/** Contains details necessary to fulfill a pickup order. */\nexport interface OrderFulfillmentPickupDetails {\n  /** Contains information about the recipient of a fulfillment. */\n  recipient?: OrderFulfillmentRecipient;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\"). The expiration time can only be set up to 7 days in the future.\n   * If `expires_at` is not set, this pickup fulfillment is automatically accepted when\n   * placed.\n   */\n  expiresAt?: string;\n  /**\n   * The duration of time after which an open and accepted pickup fulfillment\n   * is automatically moved to the `COMPLETED` state. The duration must be in RFC 3339\n   * format (for example, \"P1W3D\").\n   * If not set, this pickup fulfillment remains accepted until it is canceled or completed.\n   */\n  autoCompleteDuration?: string;\n  /** The schedule type of the pickup fulfillment. */\n  scheduleType?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,\n   * \"2016-09-04T23:59:33.123Z\".\n   * For fulfillments with the schedule type `ASAP`, this is automatically set\n   * to the current time plus the expected duration to prepare the fulfillment.\n   */\n  pickupAt?: string;\n  /**\n   * The window of time in which the order should be picked up after the `pickup_at` timestamp.\n   * Must be in RFC 3339 duration format, e.g., \"P1W3D\". Can be used as an\n   * informational guideline for merchants.\n   */\n  pickupWindowDuration?: string;\n  /**\n   * The duration of time it takes to prepare this fulfillment.\n   * The duration must be in RFC 3339 format (for example, \"P1W3D\").\n   */\n  prepTimeDuration?: string;\n  /**\n   * A note meant to provide additional instructions about the pickup\n   * fulfillment displayed in the Square Point of Sale application and set by the API.\n   */\n  note?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  placedAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the fulfillment was accepted. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  acceptedAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  rejectedAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  readyAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the fulfillment expired. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  expiredAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  pickedUpAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  canceledAt?: string;\n  /** A description of why the pickup was canceled. The maximum length: 100 characters. */\n  cancelReason?: string;\n  /** If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup. */\n  isCurbsidePickup?: boolean;\n  /** Specific details for curbside pickup. */\n  curbsidePickupDetails?: OrderFulfillmentPickupDetailsCurbsidePickupDetails;\n}\n\nexport const orderFulfillmentPickupDetailsSchema: Schema<OrderFulfillmentPickupDetails> = object(\n  {\n    recipient: [\n      'recipient',\n      optional(lazy(() => orderFulfillmentRecipientSchema)),\n    ],\n    expiresAt: ['expires_at', optional(string())],\n    autoCompleteDuration: ['auto_complete_duration', optional(string())],\n    scheduleType: ['schedule_type', optional(string())],\n    pickupAt: ['pickup_at', optional(string())],\n    pickupWindowDuration: ['pickup_window_duration', optional(string())],\n    prepTimeDuration: ['prep_time_duration', optional(string())],\n    note: ['note', optional(string())],\n    placedAt: ['placed_at', optional(string())],\n    acceptedAt: ['accepted_at', optional(string())],\n    rejectedAt: ['rejected_at', optional(string())],\n    readyAt: ['ready_at', optional(string())],\n    expiredAt: ['expired_at', optional(string())],\n    pickedUpAt: ['picked_up_at', optional(string())],\n    canceledAt: ['canceled_at', optional(string())],\n    cancelReason: ['cancel_reason', optional(string())],\n    isCurbsidePickup: ['is_curbside_pickup', optional(boolean())],\n    curbsidePickupDetails: [\n      'curbside_pickup_details',\n      optional(\n        lazy(() => orderFulfillmentPickupDetailsCurbsidePickupDetailsSchema)\n      ),\n    ],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  OrderFulfillmentRecipient,\n  orderFulfillmentRecipientSchema,\n} from './orderFulfillmentRecipient';\n\n/** Contains the details necessary to fulfill a shipment order. */\nexport interface OrderFulfillmentShipmentDetails {\n  /** Contains information about the recipient of a fulfillment. */\n  recipient?: OrderFulfillmentRecipient;\n  /** The shipping carrier being used to ship this fulfillment (such as UPS, FedEx, or USPS). */\n  carrier?: string;\n  /** A note with additional information for the shipping carrier. */\n  shippingNote?: string;\n  /**\n   * A description of the type of shipping product purchased from the carrier\n   * (such as First Class, Priority, or Express).\n   */\n  shippingType?: string;\n  /** The reference number provided by the carrier to track the shipment's progress. */\n  trackingNumber?: string;\n  /** A link to the tracking webpage on the carrier's website. */\n  trackingUrl?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the shipment was requested. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  placedAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when this fulfillment was moved to the `RESERVED` state, which  indicates that preparation\n   * of this shipment has begun. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  inProgressAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when this fulfillment was moved to the `PREPARED` state, which indicates that the\n   * fulfillment is packaged. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  packagedAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the shipment is expected to be delivered to the shipping carrier.\n   * The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  expectedShippedAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when this fulfillment was moved to the `COMPLETED` state, which indicates that\n   * the fulfillment has been given to the shipping carrier. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  shippedAt?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating the shipment was canceled.\n   * The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  canceledAt?: string;\n  /** A description of why the shipment was canceled. */\n  cancelReason?: string;\n  /**\n   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * indicating when the shipment failed to be completed. The timestamp must be in RFC 3339 format\n   * (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  failedAt?: string;\n  /** A description of why the shipment failed to be completed. */\n  failureReason?: string;\n}\n\nexport const orderFulfillmentShipmentDetailsSchema: Schema<OrderFulfillmentShipmentDetails> = object(\n  {\n    recipient: [\n      'recipient',\n      optional(lazy(() => orderFulfillmentRecipientSchema)),\n    ],\n    carrier: ['carrier', optional(string())],\n    shippingNote: ['shipping_note', optional(string())],\n    shippingType: ['shipping_type', optional(string())],\n    trackingNumber: ['tracking_number', optional(string())],\n    trackingUrl: ['tracking_url', optional(string())],\n    placedAt: ['placed_at', optional(string())],\n    inProgressAt: ['in_progress_at', optional(string())],\n    packagedAt: ['packaged_at', optional(string())],\n    expectedShippedAt: ['expected_shipped_at', optional(string())],\n    shippedAt: ['shipped_at', optional(string())],\n    canceledAt: ['canceled_at', optional(string())],\n    cancelReason: ['cancel_reason', optional(string())],\n    failedAt: ['failed_at', optional(string())],\n    failureReason: ['failure_reason', optional(string())],\n  }\n);\n","import { array, dict, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  OrderFulfillmentFulfillmentEntry,\n  orderFulfillmentFulfillmentEntrySchema,\n} from './orderFulfillmentFulfillmentEntry';\nimport {\n  OrderFulfillmentPickupDetails,\n  orderFulfillmentPickupDetailsSchema,\n} from './orderFulfillmentPickupDetails';\nimport {\n  OrderFulfillmentShipmentDetails,\n  orderFulfillmentShipmentDetailsSchema,\n} from './orderFulfillmentShipmentDetails';\n\n/** Contains details about how to fulfill this order. */\nexport interface OrderFulfillment {\n  /** A unique ID that identifies the fulfillment only within this order. */\n  uid?: string;\n  /** The type of fulfillment. */\n  type?: string;\n  /** The current state of this fulfillment. */\n  state?: string;\n  /**\n   * The `line_item_application` describes what order line items this fulfillment applies\n   * to. It can be `ALL` or `ENTRY_LIST` with a supplied list of fulfillment entries.\n   */\n  lineItemApplication?: string;\n  /**\n   * A list of entries pertaining to the fulfillment of an order. Each entry must reference\n   * a valid `uid` for an order line item in the `line_item_uid` field, as well as a `quantity` to\n   * fulfill.\n   * Multiple entries can reference the same line item `uid`, as long as the total quantity among\n   * all fulfillment entries referencing a single line item does not exceed the quantity of the\n   * order's line item itself.\n   * An order cannot be marked as `COMPLETED` before all fulfillments are `COMPLETED`,\n   * `CANCELED`, or `FAILED`. Fulfillments can be created and completed independently\n   * before order completion.\n   */\n  entries?: OrderFulfillmentFulfillmentEntry[];\n  /**\n   * Application-defined data attached to this fulfillment. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally\n   * identifiable information or card details).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a maximum length of 255 characters.\n   * An application can have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).\n   */\n  metadata?: Record<string, string>;\n  /** Contains details necessary to fulfill a pickup order. */\n  pickupDetails?: OrderFulfillmentPickupDetails;\n  /** Contains the details necessary to fulfill a shipment order. */\n  shipmentDetails?: OrderFulfillmentShipmentDetails;\n}\n\nexport const orderFulfillmentSchema: Schema<OrderFulfillment> = object({\n  uid: ['uid', optional(string())],\n  type: ['type', optional(string())],\n  state: ['state', optional(string())],\n  lineItemApplication: ['line_item_application', optional(string())],\n  entries: [\n    'entries',\n    optional(array(lazy(() => orderFulfillmentFulfillmentEntrySchema))),\n  ],\n  metadata: ['metadata', optional(dict(string()))],\n  pickupDetails: [\n    'pickup_details',\n    optional(lazy(() => orderFulfillmentPickupDetailsSchema)),\n  ],\n  shipmentDetails: [\n    'shipment_details',\n    optional(lazy(() => orderFulfillmentShipmentDetailsSchema)),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents an applied portion of a discount to a line item in an order.\n * Order scoped discounts have automatically applied discounts present for each line item.\n * Line-item scoped discounts must have applied discounts added manually for any applicable line\n * items. The corresponding applied money is automatically computed based on participating\n * line items.\n */\nexport interface OrderLineItemAppliedDiscount {\n  /** A unique ID that identifies the applied discount only within this order. */\n  uid?: string;\n  /**\n   * The `uid` of the discount that the applied discount represents. It must\n   * reference a discount present in the `order.discounts` field.\n   * This field is immutable. To change which discounts apply to a line item,\n   * you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.\n   */\n  discountUid: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n}\n\nexport const orderLineItemAppliedDiscountSchema: Schema<OrderLineItemAppliedDiscount> = object(\n  {\n    uid: ['uid', optional(string())],\n    discountUid: ['discount_uid', string()],\n    appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents an applied portion of a tax to a line item in an order.\n * Order-scoped taxes automatically include the applied taxes in each line item.\n * Line item taxes must be referenced from any applicable line items.\n * The corresponding applied money is automatically computed, based on the\n * set of participating line items.\n */\nexport interface OrderLineItemAppliedTax {\n  /** A unique ID that identifies the applied tax only within this order. */\n  uid?: string;\n  /**\n   * The `uid` of the tax for which this applied tax represents. It must reference\n   * a tax present in the `order.taxes` field.\n   * This field is immutable. To change which taxes apply to a line item, delete and add a new\n   * `OrderLineItemAppliedTax`.\n   */\n  taxUid: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n}\n\nexport const orderLineItemAppliedTaxSchema: Schema<OrderLineItemAppliedTax> = object(\n  {\n    uid: ['uid', optional(string())],\n    taxUid: ['tax_uid', string()],\n    appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import {\n  bigint,\n  dict,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A [CatalogModifier]($m/CatalogModifier). */\nexport interface OrderLineItemModifier {\n  /** A unique ID that identifies the modifier only within this order. */\n  uid?: string;\n  /** The catalog object ID referencing [CatalogModifier]($m/CatalogModifier). */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this modifier references. */\n  catalogVersion?: bigint;\n  /** The name of the item modifier. */\n  name?: string;\n  /**\n   * The quantity of the line item modifier. The modifier quantity can be 0 or more.\n   * For example, suppose a restaurant offers a cheeseburger on the menu. When a buyer orders\n   * this item, the restaurant records the purchase by creating an `Order` object with a line item\n   * for a burger. The line item includes a line item modifier: the name is cheese and the quantity\n   * is 1. The buyer has the option to order extra cheese (or no cheese). If the buyer chooses\n   * the extra cheese option, the modifier quantity increases to 2. If the buyer does not want\n   * any cheese, the modifier quantity is set to 0.\n   */\n  quantity?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  basePriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalPriceMoney?: Money;\n  /**\n   * Application-defined data attached to this order. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally\n   * identifiable information or card details).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a maximum length of 255 characters.\n   * An application can have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).\n   */\n  metadata?: Record<string, string>;\n}\n\nexport const orderLineItemModifierSchema: Schema<OrderLineItemModifier> = object(\n  {\n    uid: ['uid', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    catalogVersion: ['catalog_version', optional(bigint())],\n    name: ['name', optional(string())],\n    quantity: ['quantity', optional(string())],\n    basePriceMoney: ['base_price_money', optional(lazy(() => moneySchema))],\n    totalPriceMoney: ['total_price_money', optional(lazy(() => moneySchema))],\n    metadata: ['metadata', optional(dict(string()))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A discount to block from applying to a line item. The discount must be\n * identified by either `discount_uid` or `discount_catalog_object_id`, but not both.\n */\nexport interface OrderLineItemPricingBlocklistsBlockedDiscount {\n  /** A unique ID of the `BlockedDiscount` within the order. */\n  uid?: string;\n  /**\n   * The `uid` of the discount that should be blocked. Use this field to block\n   * ad hoc discounts. For catalog discounts, use the `discount_catalog_object_id` field.\n   */\n  discountUid?: string;\n  /**\n   * The `catalog_object_id` of the discount that should be blocked.\n   * Use this field to block catalog discounts. For ad hoc discounts, use the\n   * `discount_uid` field.\n   */\n  discountCatalogObjectId?: string;\n}\n\nexport const orderLineItemPricingBlocklistsBlockedDiscountSchema: Schema<OrderLineItemPricingBlocklistsBlockedDiscount> = object(\n  {\n    uid: ['uid', optional(string())],\n    discountUid: ['discount_uid', optional(string())],\n    discountCatalogObjectId: ['discount_catalog_object_id', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A tax to block from applying to a line item. The tax must be\n * identified by either `tax_uid` or `tax_catalog_object_id`, but not both.\n */\nexport interface OrderLineItemPricingBlocklistsBlockedTax {\n  /** A unique ID of the `BlockedTax` within the order. */\n  uid?: string;\n  /**\n   * The `uid` of the tax that should be blocked. Use this field to block\n   * ad hoc taxes. For catalog, taxes use the `tax_catalog_object_id` field.\n   */\n  taxUid?: string;\n  /**\n   * The `catalog_object_id` of the tax that should be blocked.\n   * Use this field to block catalog taxes. For ad hoc taxes, use the\n   * `tax_uid` field.\n   */\n  taxCatalogObjectId?: string;\n}\n\nexport const orderLineItemPricingBlocklistsBlockedTaxSchema: Schema<OrderLineItemPricingBlocklistsBlockedTax> = object(\n  {\n    uid: ['uid', optional(string())],\n    taxUid: ['tax_uid', optional(string())],\n    taxCatalogObjectId: ['tax_catalog_object_id', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport {\n  OrderLineItemPricingBlocklistsBlockedDiscount,\n  orderLineItemPricingBlocklistsBlockedDiscountSchema,\n} from './orderLineItemPricingBlocklistsBlockedDiscount';\nimport {\n  OrderLineItemPricingBlocklistsBlockedTax,\n  orderLineItemPricingBlocklistsBlockedTaxSchema,\n} from './orderLineItemPricingBlocklistsBlockedTax';\n\n/**\n * Describes pricing adjustments that are blocked from manual and\n * automatic application to a line item. For more information, see\n * [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).\n */\nexport interface OrderLineItemPricingBlocklists {\n  /**\n   * A list of discounts blocked from applying to the line item.\n   * Discounts can be blocked by the `discount_uid` (for ad hoc discounts) or\n   * the `discount_catalog_object_id` (for catalog discounts).\n   */\n  blockedDiscounts?: OrderLineItemPricingBlocklistsBlockedDiscount[];\n  /**\n   * A list of taxes blocked from applying to the line item.\n   * Taxes can be blocked by the `tax_uid` (for ad hoc taxes) or\n   * the `tax_catalog_object_id` (for catalog taxes).\n   */\n  blockedTaxes?: OrderLineItemPricingBlocklistsBlockedTax[];\n}\n\nexport const orderLineItemPricingBlocklistsSchema: Schema<OrderLineItemPricingBlocklists> = object(\n  {\n    blockedDiscounts: [\n      'blocked_discounts',\n      optional(\n        array(lazy(() => orderLineItemPricingBlocklistsBlockedDiscountSchema))\n      ),\n    ],\n    blockedTaxes: [\n      'blocked_taxes',\n      optional(\n        array(lazy(() => orderLineItemPricingBlocklistsBlockedTaxSchema))\n      ),\n    ],\n  }\n);\n","import {\n  bigint,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { MeasurementUnit, measurementUnitSchema } from './measurementUnit';\n\n/**\n * Contains the measurement unit for a quantity and a precision that\n * specifies the number of digits after the decimal point for decimal quantities.\n */\nexport interface OrderQuantityUnit {\n  /**\n   * Represents a unit of measurement to use with a quantity, such as ounces\n   * or inches. Exactly one of the following fields are required: `custom_unit`,\n   * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.\n   */\n  measurementUnit?: MeasurementUnit;\n  /**\n   * For non-integer quantities, represents the number of digits after the decimal point that are\n   * recorded for this quantity.\n   * For example, a precision of 1 allows quantities such as `\"1.0\"` and `\"1.1\"`, but not `\"1.01\"`.\n   * Min: 0. Max: 5.\n   */\n  precision?: number;\n  /**\n   * The catalog object ID referencing the\n   * [CatalogMeasurementUnit]($m/CatalogMeasurementUnit).\n   * This field is set when this is a catalog-backed measurement unit.\n   */\n  catalogObjectId?: string;\n  /**\n   * The version of the catalog object that this measurement unit references.\n   * This field is set when this is a catalog-backed measurement unit.\n   */\n  catalogVersion?: bigint;\n}\n\nexport const orderQuantityUnitSchema: Schema<OrderQuantityUnit> = object({\n  measurementUnit: [\n    'measurement_unit',\n    optional(lazy(() => measurementUnitSchema)),\n  ],\n  precision: ['precision', optional(number())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogVersion: ['catalog_version', optional(bigint())],\n});\n","import {\n  array,\n  bigint,\n  dict,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  OrderLineItemAppliedDiscount,\n  orderLineItemAppliedDiscountSchema,\n} from './orderLineItemAppliedDiscount';\nimport {\n  OrderLineItemAppliedTax,\n  orderLineItemAppliedTaxSchema,\n} from './orderLineItemAppliedTax';\nimport {\n  OrderLineItemModifier,\n  orderLineItemModifierSchema,\n} from './orderLineItemModifier';\nimport {\n  OrderLineItemPricingBlocklists,\n  orderLineItemPricingBlocklistsSchema,\n} from './orderLineItemPricingBlocklists';\nimport {\n  OrderQuantityUnit,\n  orderQuantityUnitSchema,\n} from './orderQuantityUnit';\n\n/**\n * Represents a line item in an order. Each line item describes a different\n * product to purchase, with its own quantity and price details.\n */\nexport interface OrderLineItem {\n  /** A unique ID that identifies the line item only within this order. */\n  uid?: string;\n  /** The name of the line item. */\n  name?: string;\n  /**\n   * The quantity purchased, formatted as a decimal number.\n   * For example, `\"3\"`.\n   * Line items with a quantity of `\"0\"` are automatically removed\n   * when paying for or otherwise completing the order.\n   * Line items with a `quantity_unit` can have non-integer quantities.\n   * For example, `\"1.70000\"`.\n   */\n  quantity: string;\n  /**\n   * Contains the measurement unit for a quantity and a precision that\n   * specifies the number of digits after the decimal point for decimal quantities.\n   */\n  quantityUnit?: OrderQuantityUnit;\n  /** The note of the line item. */\n  note?: string;\n  /** The [CatalogItemVariation]($m/CatalogItemVariation) ID applied to this line item. */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this line item references. */\n  catalogVersion?: bigint;\n  /** The name of the variation applied to this line item. */\n  variationName?: string;\n  /** Represents the line item type. */\n  itemType?: string;\n  /**\n   * Application-defined data attached to this line item. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally\n   * identifiable information or card details).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a maximum length of 255 characters.\n   * An application can have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).\n   */\n  metadata?: Record<string, string>;\n  /** The [CatalogModifier]($m/CatalogModifier)s applied to this line item. */\n  modifiers?: OrderLineItemModifier[];\n  /**\n   * The list of references to taxes applied to this line item. Each\n   * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a\n   * top-level `OrderLineItemTax` applied to the line item. On reads, the\n   * amount applied is populated.\n   * An `OrderLineItemAppliedTax` is automatically created on every line\n   * item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`\n   * records for `LINE_ITEM` scoped taxes must be added in requests for the tax\n   * to apply to any line items.\n   * To change the amount of a tax, modify the referenced top-level tax.\n   */\n  appliedTaxes?: OrderLineItemAppliedTax[];\n  /**\n   * The list of references to discounts applied to this line item. Each\n   * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level\n   * `OrderLineItemDiscounts` applied to the line item. On reads, the amount\n   * applied is populated.\n   * An `OrderLineItemAppliedDiscount` is automatically created on every line item for all\n   * `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records\n   * for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any\n   * line items.\n   * To change the amount of a discount, modify the referenced top-level discount.\n   */\n  appliedDiscounts?: OrderLineItemAppliedDiscount[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  basePriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  variationTotalPriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  grossSalesMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalDiscountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Describes pricing adjustments that are blocked from manual and\n   * automatic application to a line item. For more information, see\n   * [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).\n   */\n  pricingBlocklists?: OrderLineItemPricingBlocklists;\n}\n\nexport const orderLineItemSchema: Schema<OrderLineItem> = object({\n  uid: ['uid', optional(string())],\n  name: ['name', optional(string())],\n  quantity: ['quantity', string()],\n  quantityUnit: [\n    'quantity_unit',\n    optional(lazy(() => orderQuantityUnitSchema)),\n  ],\n  note: ['note', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogVersion: ['catalog_version', optional(bigint())],\n  variationName: ['variation_name', optional(string())],\n  itemType: ['item_type', optional(string())],\n  metadata: ['metadata', optional(dict(string()))],\n  modifiers: [\n    'modifiers',\n    optional(array(lazy(() => orderLineItemModifierSchema))),\n  ],\n  appliedTaxes: [\n    'applied_taxes',\n    optional(array(lazy(() => orderLineItemAppliedTaxSchema))),\n  ],\n  appliedDiscounts: [\n    'applied_discounts',\n    optional(array(lazy(() => orderLineItemAppliedDiscountSchema))),\n  ],\n  basePriceMoney: ['base_price_money', optional(lazy(() => moneySchema))],\n  variationTotalPriceMoney: [\n    'variation_total_price_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  grossSalesMoney: ['gross_sales_money', optional(lazy(() => moneySchema))],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n  totalDiscountMoney: [\n    'total_discount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  pricingBlocklists: [\n    'pricing_blocklists',\n    optional(lazy(() => orderLineItemPricingBlocklistsSchema)),\n  ],\n});\n","import {\n  array,\n  bigint,\n  dict,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a discount that applies to one or more line items in an\n * order.\n * Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.\n * The amount distributed to each line item is relative to the\n * amount contributed by the item to the order subtotal.\n */\nexport interface OrderLineItemDiscount {\n  /** A unique ID that identifies the discount only within this order. */\n  uid?: string;\n  /** The catalog object ID referencing [CatalogDiscount]($m/CatalogDiscount). */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this discount references. */\n  catalogVersion?: bigint;\n  /** The discount's name. */\n  name?: string;\n  /** Indicates how the discount is applied to the associated line item or order. */\n  type?: string;\n  /**\n   * The percentage of the discount, as a string representation of a decimal number.\n   * A value of `7.25` corresponds to a percentage of 7.25%.\n   * `percentage` is not set for amount-based discounts.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /**\n   * Application-defined data attached to this discount. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally\n   * identifiable information or card details).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a maximum length of 255 characters.\n   * An application can have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).\n   */\n  metadata?: Record<string, string>;\n  /** Indicates whether this is a line-item or order-level discount. */\n  scope?: string;\n  /**\n   * The reward IDs corresponding to this discount. The application and\n   * specification of discounts that have `reward_ids` are completely controlled by the backing\n   * criteria corresponding to the reward tiers of the rewards that are added to the order\n   * through the Loyalty API. To manually unapply discounts that are the result of added rewards,\n   * the rewards must be removed from the order through the Loyalty API.\n   */\n  rewardIds?: string[];\n  /**\n   * The object ID of a [pricing rule]($m/CatalogPricingRule) to be applied\n   * automatically to this discount. The specification and application of the discounts, to\n   * which a `pricing_rule_id` is assigned, are completely controlled by the corresponding\n   * pricing rule.\n   */\n  pricingRuleId?: string;\n}\n\nexport const orderLineItemDiscountSchema: Schema<OrderLineItemDiscount> = object(\n  {\n    uid: ['uid', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    catalogVersion: ['catalog_version', optional(bigint())],\n    name: ['name', optional(string())],\n    type: ['type', optional(string())],\n    percentage: ['percentage', optional(string())],\n    amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n    appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n    metadata: ['metadata', optional(dict(string()))],\n    scope: ['scope', optional(string())],\n    rewardIds: ['reward_ids', optional(array(string()))],\n    pricingRuleId: ['pricing_rule_id', optional(string())],\n  }\n);\n","import {\n  bigint,\n  boolean,\n  dict,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a tax that applies to one or more line item in the order.\n * Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals.\n * The amount distributed to each line item is relative to the amount the item\n * contributes to the order subtotal.\n */\nexport interface OrderLineItemTax {\n  /** A unique ID that identifies the tax only within this order. */\n  uid?: string;\n  /** The catalog object ID referencing [CatalogTax]($m/CatalogTax). */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this tax references. */\n  catalogVersion?: bigint;\n  /** The tax's name. */\n  name?: string;\n  /** Indicates how the tax is applied to the associated line item or order. */\n  type?: string;\n  /**\n   * The percentage of the tax, as a string representation of a decimal\n   * number. For example, a value of `\"7.25\"` corresponds to a percentage of\n   * 7.25%.\n   */\n  percentage?: string;\n  /**\n   * Application-defined data attached to this tax. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally\n   * identifiable information or card details).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a maximum length of 255 characters.\n   * An application can have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).\n   */\n  metadata?: Record<string, string>;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /** Indicates whether this is a line-item or order-level tax. */\n  scope?: string;\n  /**\n   * Determines whether the tax was automatically applied to the order based on\n   * the catalog configuration. For an example, see\n   * [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).\n   */\n  autoApplied?: boolean;\n}\n\nexport const orderLineItemTaxSchema: Schema<OrderLineItemTax> = object({\n  uid: ['uid', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogVersion: ['catalog_version', optional(bigint())],\n  name: ['name', optional(string())],\n  type: ['type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  metadata: ['metadata', optional(dict(string()))],\n  appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  scope: ['scope', optional(string())],\n  autoApplied: ['auto_applied', optional(boolean())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A collection of various money amounts. */\nexport interface OrderMoneyAmounts {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  taxMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  discountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  tipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  serviceChargeMoney?: Money;\n}\n\nexport const orderMoneyAmountsSchema: Schema<OrderMoneyAmounts> = object({\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  taxMoney: ['tax_money', optional(lazy(() => moneySchema))],\n  discountMoney: ['discount_money', optional(lazy(() => moneySchema))],\n  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],\n  serviceChargeMoney: [\n    'service_charge_money',\n    optional(lazy(() => moneySchema)),\n  ],\n});\n","import { boolean, object, optional, Schema } from '../schema';\n\n/**\n * Pricing options for an order. The options affect how the order's price is calculated.\n * They can be used, for example, to apply automatic price adjustments that are based on preconfigured\n * [pricing rules]($m/CatalogPricingRule).\n */\nexport interface OrderPricingOptions {\n  /**\n   * The option to determine whether pricing rule-based\n   * discounts are automatically applied to an order.\n   */\n  autoApplyDiscounts?: boolean;\n  /**\n   * The option to determine whether rule-based taxes are automatically\n   * applied to an order when the criteria of the corresponding rules are met.\n   */\n  autoApplyTaxes?: boolean;\n}\n\nexport const orderPricingOptionsSchema: Schema<OrderPricingOptions> = object({\n  autoApplyDiscounts: ['auto_apply_discounts', optional(boolean())],\n  autoApplyTaxes: ['auto_apply_taxes', optional(boolean())],\n});\n","import { bigint, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a discount being returned that applies to one or more return line items in an\n * order.\n * Fixed-amount, order-scoped discounts are distributed across all non-zero return line item totals.\n * The amount distributed to each return line item is relative to that item’s contribution to the\n * order subtotal.\n */\nexport interface OrderReturnDiscount {\n  /** A unique ID that identifies the returned discount only within this order. */\n  uid?: string;\n  /** The discount `uid` from the order that contains the original application of this discount. */\n  sourceDiscountUid?: string;\n  /** The catalog object ID referencing [CatalogDiscount]($m/CatalogDiscount). */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this discount references. */\n  catalogVersion?: bigint;\n  /** The discount's name. */\n  name?: string;\n  /** Indicates how the discount is applied to the associated line item or order. */\n  type?: string;\n  /**\n   * The percentage of the tax, as a string representation of a decimal number.\n   * A value of `\"7.25\"` corresponds to a percentage of 7.25%.\n   * `percentage` is not set for amount-based discounts.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /** Indicates whether this is a line-item or order-level discount. */\n  scope?: string;\n}\n\nexport const orderReturnDiscountSchema: Schema<OrderReturnDiscount> = object({\n  uid: ['uid', optional(string())],\n  sourceDiscountUid: ['source_discount_uid', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogVersion: ['catalog_version', optional(bigint())],\n  name: ['name', optional(string())],\n  type: ['type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  scope: ['scope', optional(string())],\n});\n","import { bigint, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A line item modifier being returned. */\nexport interface OrderReturnLineItemModifier {\n  /** A unique ID that identifies the return modifier only within this order. */\n  uid?: string;\n  /**\n   * The modifier `uid` from the order's line item that contains the\n   * original sale of this line item modifier.\n   */\n  sourceModifierUid?: string;\n  /** The catalog object ID referencing [CatalogModifier]($m/CatalogModifier). */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this line item modifier references. */\n  catalogVersion?: bigint;\n  /** The name of the item modifier. */\n  name?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  basePriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalPriceMoney?: Money;\n}\n\nexport const orderReturnLineItemModifierSchema: Schema<OrderReturnLineItemModifier> = object(\n  {\n    uid: ['uid', optional(string())],\n    sourceModifierUid: ['source_modifier_uid', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    catalogVersion: ['catalog_version', optional(bigint())],\n    name: ['name', optional(string())],\n    basePriceMoney: ['base_price_money', optional(lazy(() => moneySchema))],\n    totalPriceMoney: ['total_price_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import {\n  array,\n  bigint,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  OrderLineItemAppliedDiscount,\n  orderLineItemAppliedDiscountSchema,\n} from './orderLineItemAppliedDiscount';\nimport {\n  OrderLineItemAppliedTax,\n  orderLineItemAppliedTaxSchema,\n} from './orderLineItemAppliedTax';\nimport {\n  OrderQuantityUnit,\n  orderQuantityUnitSchema,\n} from './orderQuantityUnit';\nimport {\n  OrderReturnLineItemModifier,\n  orderReturnLineItemModifierSchema,\n} from './orderReturnLineItemModifier';\n\n/** The line item being returned in an order. */\nexport interface OrderReturnLineItem {\n  /** A unique ID for this return line-item entry. */\n  uid?: string;\n  /** The `uid` of the line item in the original sale order. */\n  sourceLineItemUid?: string;\n  /** The name of the line item. */\n  name?: string;\n  /**\n   * The quantity returned, formatted as a decimal number.\n   * For example, `\"3\"`.\n   * Line items with a `quantity_unit` can have non-integer quantities.\n   * For example, `\"1.70000\"`.\n   */\n  quantity: string;\n  /**\n   * Contains the measurement unit for a quantity and a precision that\n   * specifies the number of digits after the decimal point for decimal quantities.\n   */\n  quantityUnit?: OrderQuantityUnit;\n  /** The note of the return line item. */\n  note?: string;\n  /** The [CatalogItemVariation]($m/CatalogItemVariation) ID applied to this return line item. */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this line item references. */\n  catalogVersion?: bigint;\n  /** The name of the variation applied to this return line item. */\n  variationName?: string;\n  /** Represents the line item type. */\n  itemType?: string;\n  /** The [CatalogModifier]($m/CatalogModifier)s applied to this line item. */\n  returnModifiers?: OrderReturnLineItemModifier[];\n  /**\n   * The list of references to `OrderReturnTax` entities applied to the return line item. Each\n   * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level\n   * `OrderReturnTax` applied to the return line item. On reads, the applied amount\n   * is populated.\n   */\n  appliedTaxes?: OrderLineItemAppliedTax[];\n  /**\n   * The list of references to `OrderReturnDiscount` entities applied to the return line item. Each\n   * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level\n   * `OrderReturnDiscount` applied to the return line item. On reads, the applied amount\n   * is populated.\n   */\n  appliedDiscounts?: OrderLineItemAppliedDiscount[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  basePriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  variationTotalPriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  grossReturnMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalDiscountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n}\n\nexport const orderReturnLineItemSchema: Schema<OrderReturnLineItem> = object({\n  uid: ['uid', optional(string())],\n  sourceLineItemUid: ['source_line_item_uid', optional(string())],\n  name: ['name', optional(string())],\n  quantity: ['quantity', string()],\n  quantityUnit: [\n    'quantity_unit',\n    optional(lazy(() => orderQuantityUnitSchema)),\n  ],\n  note: ['note', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogVersion: ['catalog_version', optional(bigint())],\n  variationName: ['variation_name', optional(string())],\n  itemType: ['item_type', optional(string())],\n  returnModifiers: [\n    'return_modifiers',\n    optional(array(lazy(() => orderReturnLineItemModifierSchema))),\n  ],\n  appliedTaxes: [\n    'applied_taxes',\n    optional(array(lazy(() => orderLineItemAppliedTaxSchema))),\n  ],\n  appliedDiscounts: [\n    'applied_discounts',\n    optional(array(lazy(() => orderLineItemAppliedDiscountSchema))),\n  ],\n  basePriceMoney: ['base_price_money', optional(lazy(() => moneySchema))],\n  variationTotalPriceMoney: [\n    'variation_total_price_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  grossReturnMoney: ['gross_return_money', optional(lazy(() => moneySchema))],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n  totalDiscountMoney: [\n    'total_discount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n});\n","import {\n  array,\n  bigint,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  OrderLineItemAppliedTax,\n  orderLineItemAppliedTaxSchema,\n} from './orderLineItemAppliedTax';\n\n/** Represents the service charge applied to the original order. */\nexport interface OrderReturnServiceCharge {\n  /** A unique ID that identifies the return service charge only within this order. */\n  uid?: string;\n  /**\n   * The service charge `uid` from the order containing the original\n   * service charge. `source_service_charge_uid` is `null` for\n   * unlinked returns.\n   */\n  sourceServiceChargeUid?: string;\n  /** The name of the service charge. */\n  name?: string;\n  /** The catalog object ID of the associated [OrderServiceCharge]($m/OrderServiceCharge). */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this service charge references. */\n  catalogVersion?: bigint;\n  /**\n   * The percentage of the service charge, as a string representation of\n   * a decimal number. For example, a value of `\"7.25\"` corresponds to a\n   * percentage of 7.25%.\n   * Either `percentage` or `amount_money` should be set, but not both.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents a phase in the process of calculating order totals.\n   * Service charges are applied after the indicated phase.\n   * [Read more about how order totals are calculated.](https://developer.squareup.com/docs/orders-api/how-it-works#how-totals-are-calculated)\n   */\n  calculationPhase?: string;\n  /**\n   * Indicates whether the surcharge can be taxed. Service charges\n   * calculated in the `TOTAL_PHASE` cannot be marked as taxable.\n   */\n  taxable?: boolean;\n  /**\n   * The list of references to `OrderReturnTax` entities applied to the\n   * `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid`\n   * that references the `uid` of a top-level `OrderReturnTax` that is being\n   * applied to the `OrderReturnServiceCharge`. On reads, the applied amount is\n   * populated.\n   */\n  appliedTaxes?: OrderLineItemAppliedTax[];\n}\n\nexport const orderReturnServiceChargeSchema: Schema<OrderReturnServiceCharge> = object(\n  {\n    uid: ['uid', optional(string())],\n    sourceServiceChargeUid: ['source_service_charge_uid', optional(string())],\n    name: ['name', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    catalogVersion: ['catalog_version', optional(bigint())],\n    percentage: ['percentage', optional(string())],\n    amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n    appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n    totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n    totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n    calculationPhase: ['calculation_phase', optional(string())],\n    taxable: ['taxable', optional(boolean())],\n    appliedTaxes: [\n      'applied_taxes',\n      optional(array(lazy(() => orderLineItemAppliedTaxSchema))),\n    ],\n  }\n);\n","import { bigint, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a tax being returned that applies to one or more return line items in an order.\n * Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals.\n * The amount distributed to each return line item is relative to that item’s contribution to the\n * order subtotal.\n */\nexport interface OrderReturnTax {\n  /** A unique ID that identifies the returned tax only within this order. */\n  uid?: string;\n  /** The tax `uid` from the order that contains the original tax charge. */\n  sourceTaxUid?: string;\n  /** The catalog object ID referencing [CatalogTax]($m/CatalogTax). */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this tax references. */\n  catalogVersion?: bigint;\n  /** The tax's name. */\n  name?: string;\n  /** Indicates how the tax is applied to the associated line item or order. */\n  type?: string;\n  /**\n   * The percentage of the tax, as a string representation of a decimal number.\n   * For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /** Indicates whether this is a line-item or order-level tax. */\n  scope?: string;\n}\n\nexport const orderReturnTaxSchema: Schema<OrderReturnTax> = object({\n  uid: ['uid', optional(string())],\n  sourceTaxUid: ['source_tax_uid', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogVersion: ['catalog_version', optional(bigint())],\n  name: ['name', optional(string())],\n  type: ['type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  scope: ['scope', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * A rounding adjustment of the money being returned. Commonly used to apply cash rounding\n * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.\n */\nexport interface OrderRoundingAdjustment {\n  /** A unique ID that identifies the rounding adjustment only within this order. */\n  uid?: string;\n  /** The name of the rounding adjustment from the original sale order. */\n  name?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n}\n\nexport const orderRoundingAdjustmentSchema: Schema<OrderRoundingAdjustment> = object(\n  {\n    uid: ['uid', optional(string())],\n    name: ['name', optional(string())],\n    amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  OrderMoneyAmounts,\n  orderMoneyAmountsSchema,\n} from './orderMoneyAmounts';\nimport {\n  OrderReturnDiscount,\n  orderReturnDiscountSchema,\n} from './orderReturnDiscount';\nimport {\n  OrderReturnLineItem,\n  orderReturnLineItemSchema,\n} from './orderReturnLineItem';\nimport {\n  OrderReturnServiceCharge,\n  orderReturnServiceChargeSchema,\n} from './orderReturnServiceCharge';\nimport { OrderReturnTax, orderReturnTaxSchema } from './orderReturnTax';\nimport {\n  OrderRoundingAdjustment,\n  orderRoundingAdjustmentSchema,\n} from './orderRoundingAdjustment';\n\n/** The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order. */\nexport interface OrderReturn {\n  /** A unique ID that identifies the return only within this order. */\n  uid?: string;\n  /**\n   * An order that contains the original sale of these return line items. This is unset\n   * for unlinked returns.\n   */\n  sourceOrderId?: string;\n  /** A collection of line items that are being returned. */\n  returnLineItems?: OrderReturnLineItem[];\n  /** A collection of service charges that are being returned. */\n  returnServiceCharges?: OrderReturnServiceCharge[];\n  /**\n   * A collection of references to taxes being returned for an order, including the total\n   * applied tax amount to be returned. The taxes must reference a top-level tax ID from the source\n   * order.\n   */\n  returnTaxes?: OrderReturnTax[];\n  /**\n   * A collection of references to discounts being returned for an order, including the total\n   * applied discount amount to be returned. The discounts must reference a top-level discount ID\n   * from the source order.\n   */\n  returnDiscounts?: OrderReturnDiscount[];\n  /**\n   * A rounding adjustment of the money being returned. Commonly used to apply cash rounding\n   * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.\n   */\n  roundingAdjustment?: OrderRoundingAdjustment;\n  /** A collection of various money amounts. */\n  returnAmounts?: OrderMoneyAmounts;\n}\n\nexport const orderReturnSchema: Schema<OrderReturn> = object({\n  uid: ['uid', optional(string())],\n  sourceOrderId: ['source_order_id', optional(string())],\n  returnLineItems: [\n    'return_line_items',\n    optional(array(lazy(() => orderReturnLineItemSchema))),\n  ],\n  returnServiceCharges: [\n    'return_service_charges',\n    optional(array(lazy(() => orderReturnServiceChargeSchema))),\n  ],\n  returnTaxes: [\n    'return_taxes',\n    optional(array(lazy(() => orderReturnTaxSchema))),\n  ],\n  returnDiscounts: [\n    'return_discounts',\n    optional(array(lazy(() => orderReturnDiscountSchema))),\n  ],\n  roundingAdjustment: [\n    'rounding_adjustment',\n    optional(lazy(() => orderRoundingAdjustmentSchema)),\n  ],\n  returnAmounts: [\n    'return_amounts',\n    optional(lazy(() => orderMoneyAmountsSchema)),\n  ],\n});\n","import { object, Schema, string } from '../schema';\n\n/**\n * Represents a reward that can be applied to an order if the necessary\n * reward tier criteria are met. Rewards are created through the Loyalty API.\n */\nexport interface OrderReward {\n  /** The identifier of the reward. */\n  id: string;\n  /** The identifier of the reward tier corresponding to this reward. */\n  rewardTierId: string;\n}\n\nexport const orderRewardSchema: Schema<OrderReward> = object({\n  id: ['id', string()],\n  rewardTierId: ['reward_tier_id', string()],\n});\n","import {\n  array,\n  bigint,\n  boolean,\n  dict,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  OrderLineItemAppliedTax,\n  orderLineItemAppliedTaxSchema,\n} from './orderLineItemAppliedTax';\n\n/** Represents a service charge applied to an order. */\nexport interface OrderServiceCharge {\n  /** A unique ID that identifies the service charge only within this order. */\n  uid?: string;\n  /** The name of the service charge. */\n  name?: string;\n  /** The catalog object ID referencing the service charge [CatalogObject]($m/CatalogObject). */\n  catalogObjectId?: string;\n  /** The version of the catalog object that this service charge references. */\n  catalogVersion?: bigint;\n  /**\n   * The service charge percentage as a string representation of a\n   * decimal number. For example, `\"7.25\"` indicates a service charge of 7.25%.\n   * Exactly 1 of `percentage` or `amount_money` should be set.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents a phase in the process of calculating order totals.\n   * Service charges are applied after the indicated phase.\n   * [Read more about how order totals are calculated.](https://developer.squareup.com/docs/orders-api/how-it-works#how-totals-are-calculated)\n   */\n  calculationPhase?: string;\n  /**\n   * Indicates whether the service charge can be taxed. If set to `true`,\n   * order-level taxes automatically apply to the service charge. Note that\n   * service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.\n   */\n  taxable?: boolean;\n  /**\n   * The list of references to the taxes applied to this service charge. Each\n   * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level\n   * `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied\n   * is populated.\n   * An `OrderLineItemAppliedTax` is automatically created on every taxable service charge\n   * for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records\n   * for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable\n   * service charge. Taxable service charges have the `taxable` field set to `true` and calculated\n   * in the `SUBTOTAL_PHASE`.\n   * To change the amount of a tax, modify the referenced top-level tax.\n   */\n  appliedTaxes?: OrderLineItemAppliedTax[];\n  /**\n   * Application-defined data attached to this service charge. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally\n   * identifiable information or card details).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a maximum length of 255 characters.\n   * An application can have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).\n   */\n  metadata?: Record<string, string>;\n  type?: string;\n}\n\nexport const orderServiceChargeSchema: Schema<OrderServiceCharge> = object({\n  uid: ['uid', optional(string())],\n  name: ['name', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogVersion: ['catalog_version', optional(bigint())],\n  percentage: ['percentage', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n  calculationPhase: ['calculation_phase', optional(string())],\n  taxable: ['taxable', optional(boolean())],\n  appliedTaxes: [\n    'applied_taxes',\n    optional(array(lazy(() => orderLineItemAppliedTaxSchema))),\n  ],\n  metadata: ['metadata', optional(dict(string()))],\n  type: ['type', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents the origination details of an order. */\nexport interface OrderSource {\n  /**\n   * The name used to identify the place (physical or digital) that an order originates.\n   * If unset, the name defaults to the name of the application that created the order.\n   */\n  name?: string;\n}\n\nexport const orderSourceSchema: Schema<OrderSource> = object({\n  name: ['name', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents an additional recipient (other than the merchant) receiving a portion of this tender. */\nexport interface AdditionalRecipient {\n  /** The location ID for a recipient (other than the merchant) receiving a portion of this tender. */\n  locationId: string;\n  /** The description of the additional recipient. */\n  description?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /** The unique ID for this [AdditionalRecipientReceivable]($m/AdditionalRecipientReceivable), assigned by the server. */\n  receivableId?: string;\n}\n\nexport const additionalRecipientSchema: Schema<AdditionalRecipient> = object({\n  locationId: ['location_id', string()],\n  description: ['description', optional(string())],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  receivableId: ['receivable_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  AdditionalRecipient,\n  additionalRecipientSchema,\n} from './additionalRecipient';\nimport { Money, moneySchema } from './money';\n\n/** Represents a refund processed for a Square transaction. */\nexport interface Refund {\n  /** The refund's unique ID. */\n  id: string;\n  /** The ID of the refund's associated location. */\n  locationId: string;\n  /** The ID of the transaction that the refunded tender is part of. */\n  transactionId?: string;\n  /** The ID of the refunded tender. */\n  tenderId: string;\n  /** The timestamp for when the refund was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The reason for the refund being issued. */\n  reason: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /** Indicates a refund's current status. */\n  status: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  processingFeeMoney?: Money;\n  /**\n   * Additional recipients (other than the merchant) receiving a portion of this refund.\n   * For example, fees assessed on a refund of a purchase by a third party integration.\n   */\n  additionalRecipients?: AdditionalRecipient[];\n}\n\nexport const refundSchema: Schema<Refund> = object({\n  id: ['id', string()],\n  locationId: ['location_id', string()],\n  transactionId: ['transaction_id', optional(string())],\n  tenderId: ['tender_id', string()],\n  createdAt: ['created_at', optional(string())],\n  reason: ['reason', string()],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  status: ['status', string()],\n  processingFeeMoney: [\n    'processing_fee_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  additionalRecipients: [\n    'additional_recipients',\n    optional(array(lazy(() => additionalRecipientSchema))),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Card, cardSchema } from './card';\n\n/** Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD` */\nexport interface TenderCardDetails {\n  /** Indicates the card transaction's current status. */\n  status?: string;\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the payment token generated by Web Payments SDK.\n   */\n  card?: Card;\n  /** Indicates the method used to enter the card's details. */\n  entryMethod?: string;\n}\n\nexport const tenderCardDetailsSchema: Schema<TenderCardDetails> = object({\n  status: ['status', optional(string())],\n  card: ['card', optional(lazy(() => cardSchema))],\n  entryMethod: ['entry_method', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents the details of a tender with `type` `CASH`. */\nexport interface TenderCashDetails {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  buyerTenderedMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  changeBackMoney?: Money;\n}\n\nexport const tenderCashDetailsSchema: Schema<TenderCashDetails> = object({\n  buyerTenderedMoney: [\n    'buyer_tendered_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  changeBackMoney: ['change_back_money', optional(lazy(() => moneySchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  AdditionalRecipient,\n  additionalRecipientSchema,\n} from './additionalRecipient';\nimport { Money, moneySchema } from './money';\nimport {\n  TenderCardDetails,\n  tenderCardDetailsSchema,\n} from './tenderCardDetails';\nimport {\n  TenderCashDetails,\n  tenderCashDetailsSchema,\n} from './tenderCashDetails';\n\n/** Represents a tender (i.e., a method of payment) used in a Square transaction. */\nexport interface Tender {\n  /** The tender's unique ID. It is the associated payment ID. */\n  id?: string;\n  /** The ID of the transaction's associated location. */\n  locationId?: string;\n  /** The ID of the tender's associated transaction. */\n  transactionId?: string;\n  /** The timestamp for when the tender was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** An optional note associated with the tender at the time of payment. */\n  note?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  tipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  processingFeeMoney?: Money;\n  /**\n   * If the tender is associated with a customer or represents a customer's card on file,\n   * this is the ID of the associated customer.\n   */\n  customerId?: string;\n  /** Indicates a tender's type. */\n  type: string;\n  /** Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD` */\n  cardDetails?: TenderCardDetails;\n  /** Represents the details of a tender with `type` `CASH`. */\n  cashDetails?: TenderCashDetails;\n  /**\n   * Additional recipients (other than the merchant) receiving a portion of this tender.\n   * For example, fees assessed on the purchase by a third party integration.\n   */\n  additionalRecipients?: AdditionalRecipient[];\n  /**\n   * The ID of the [Payment]($m/Payment) that corresponds to this tender.\n   * This value is only present for payments created with the v2 Payments API.\n   */\n  paymentId?: string;\n}\n\nexport const tenderSchema: Schema<Tender> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  transactionId: ['transaction_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  note: ['note', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],\n  processingFeeMoney: [\n    'processing_fee_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  customerId: ['customer_id', optional(string())],\n  type: ['type', string()],\n  cardDetails: ['card_details', optional(lazy(() => tenderCardDetailsSchema))],\n  cashDetails: ['cash_details', optional(lazy(() => tenderCashDetailsSchema))],\n  additionalRecipients: [\n    'additional_recipients',\n    optional(array(lazy(() => additionalRecipientSchema))),\n  ],\n  paymentId: ['payment_id', optional(string())],\n});\n","import {\n  array,\n  dict,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport { OrderFulfillment, orderFulfillmentSchema } from './orderFulfillment';\nimport { OrderLineItem, orderLineItemSchema } from './orderLineItem';\nimport {\n  OrderLineItemDiscount,\n  orderLineItemDiscountSchema,\n} from './orderLineItemDiscount';\nimport { OrderLineItemTax, orderLineItemTaxSchema } from './orderLineItemTax';\nimport {\n  OrderMoneyAmounts,\n  orderMoneyAmountsSchema,\n} from './orderMoneyAmounts';\nimport {\n  OrderPricingOptions,\n  orderPricingOptionsSchema,\n} from './orderPricingOptions';\nimport { OrderReturn, orderReturnSchema } from './orderReturn';\nimport { OrderReward, orderRewardSchema } from './orderReward';\nimport {\n  OrderRoundingAdjustment,\n  orderRoundingAdjustmentSchema,\n} from './orderRoundingAdjustment';\nimport {\n  OrderServiceCharge,\n  orderServiceChargeSchema,\n} from './orderServiceCharge';\nimport { OrderSource, orderSourceSchema } from './orderSource';\nimport { Refund, refundSchema } from './refund';\nimport { Tender, tenderSchema } from './tender';\n\n/**\n * Contains all information related to a single order to process with Square,\n * including line items that specify the products to purchase. `Order` objects also\n * include information about any associated tenders, refunds, and returns.\n * All Connect V2 Transactions have all been converted to Orders including all associated\n * itemization data.\n */\nexport interface Order {\n  /** The order's unique ID. */\n  id?: string;\n  /** The ID of the seller location that this order is associated with. */\n  locationId: string;\n  /**\n   * A client-specified ID to associate an entity in another system\n   * with this order.\n   */\n  referenceId?: string;\n  /** Represents the origination details of an order. */\n  source?: OrderSource;\n  /**\n   * The ID of the [customer]($m/Customer) associated with the order.\n   * __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions\n   * to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the\n   * `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the\n   * creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).\n   */\n  customerId?: string;\n  /** The line items included in the order. */\n  lineItems?: OrderLineItem[];\n  /**\n   * The list of all taxes associated with the order.\n   * Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an\n   * `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes\n   * with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.\n   * On reads, each tax in the list includes the total amount of that tax applied to the order.\n   * __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated\n   * `line_items.taxes` field results in an error. Use `line_items.applied_taxes`\n   * instead.\n   */\n  taxes?: OrderLineItemTax[];\n  /**\n   * The list of all discounts associated with the order.\n   * Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,\n   * an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.\n   * For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`\n   * for every line item.\n   * __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated\n   * `line_items.discounts` field results in an error. Use `line_items.applied_discounts`\n   * instead.\n   */\n  discounts?: OrderLineItemDiscount[];\n  /** A list of service charges applied to the order. */\n  serviceCharges?: OrderServiceCharge[];\n  /**\n   * Details about order fulfillment.\n   * Orders can only be created with at most one fulfillment. However, orders returned\n   * by the API might contain multiple fulfillments.\n   */\n  fulfillments?: OrderFulfillment[];\n  /**\n   * A collection of items from sale orders being returned in this one. Normally part of an\n   * itemized return or exchange. There is exactly one `Return` object per sale `Order` being\n   * referenced.\n   */\n  returns?: OrderReturn[];\n  /** A collection of various money amounts. */\n  returnAmounts?: OrderMoneyAmounts;\n  /** A collection of various money amounts. */\n  netAmounts?: OrderMoneyAmounts;\n  /**\n   * A rounding adjustment of the money being returned. Commonly used to apply cash rounding\n   * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.\n   */\n  roundingAdjustment?: OrderRoundingAdjustment;\n  /** The tenders that were used to pay for the order. */\n  tenders?: Tender[];\n  /** The refunds that are part of this order. */\n  refunds?: Refund[];\n  /**\n   * Application-defined data attached to this order. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally\n   * identifiable information or card details).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a maximum length of 255 characters.\n   * An application can have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).\n   */\n  metadata?: Record<string, string>;\n  /** The timestamp for when the order was created, in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\"). */\n  createdAt?: string;\n  /** The timestamp for when the order was last updated, in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\"). */\n  updatedAt?: string;\n  /** The timestamp for when the order reached a terminal [state]($m/OrderState), in RFC 3339 format (for example \"2016-09-04T23:59:33.123Z\"). */\n  closedAt?: string;\n  /** The state of the order. */\n  state?: string;\n  /**\n   * The version number, which is incremented each time an update is committed to the order.\n   * Orders not created through the API do not include a version number and\n   * therefore cannot be updated.\n   * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).\n   */\n  version?: number;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalDiscountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalServiceChargeMoney?: Money;\n  /**\n   * A short-term identifier for the order (such as a customer first name, table number, or\n   * auto-generated order number that resets daily). For orders created in Square Point of Sale, the `ticket_name` is\n   * printed on in-person tickets and stubs. It converts to the `kitchen_printing.name` field in the\n   * bill cart feature details.\n   */\n  ticketName?: string;\n  /**\n   * Pricing options for an order. The options affect how the order's price is calculated.\n   * They can be used, for example, to apply automatic price adjustments that are based on preconfigured\n   * [pricing rules]($m/CatalogPricingRule).\n   */\n  pricingOptions?: OrderPricingOptions;\n  /** A set-like list of Rewards that have been added to the Order. */\n  rewards?: OrderReward[];\n}\n\nexport const orderSchema: Schema<Order> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', string()],\n  referenceId: ['reference_id', optional(string())],\n  source: ['source', optional(lazy(() => orderSourceSchema))],\n  customerId: ['customer_id', optional(string())],\n  lineItems: ['line_items', optional(array(lazy(() => orderLineItemSchema)))],\n  taxes: ['taxes', optional(array(lazy(() => orderLineItemTaxSchema)))],\n  discounts: [\n    'discounts',\n    optional(array(lazy(() => orderLineItemDiscountSchema))),\n  ],\n  serviceCharges: [\n    'service_charges',\n    optional(array(lazy(() => orderServiceChargeSchema))),\n  ],\n  fulfillments: [\n    'fulfillments',\n    optional(array(lazy(() => orderFulfillmentSchema))),\n  ],\n  returns: ['returns', optional(array(lazy(() => orderReturnSchema)))],\n  returnAmounts: [\n    'return_amounts',\n    optional(lazy(() => orderMoneyAmountsSchema)),\n  ],\n  netAmounts: ['net_amounts', optional(lazy(() => orderMoneyAmountsSchema))],\n  roundingAdjustment: [\n    'rounding_adjustment',\n    optional(lazy(() => orderRoundingAdjustmentSchema)),\n  ],\n  tenders: ['tenders', optional(array(lazy(() => tenderSchema)))],\n  refunds: ['refunds', optional(array(lazy(() => refundSchema)))],\n  metadata: ['metadata', optional(dict(string()))],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  closedAt: ['closed_at', optional(string())],\n  state: ['state', optional(string())],\n  version: ['version', optional(number())],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n  totalDiscountMoney: [\n    'total_discount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  totalTipMoney: ['total_tip_money', optional(lazy(() => moneySchema))],\n  totalServiceChargeMoney: [\n    'total_service_charge_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  ticketName: ['ticket_name', optional(string())],\n  pricingOptions: [\n    'pricing_options',\n    optional(lazy(() => orderPricingOptionsSchema)),\n  ],\n  rewards: ['rewards', optional(array(lazy(() => orderRewardSchema)))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Order, orderSchema } from './order';\n\nexport interface CreateOrderRequest {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /**\n   * A value you specify that uniquely identifies this\n   * order among orders you have created.\n   * If you are unsure whether a particular order was created successfully,\n   * you can try it again with the same idempotency key without\n   * worrying about creating duplicate orders.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).\n   */\n  idempotencyKey?: string;\n}\n\nexport const createOrderRequestSchema: Schema<CreateOrderRequest> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  idempotencyKey: ['idempotency_key', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Address, addressSchema } from './address';\nimport {\n  ChargeRequestAdditionalRecipient,\n  chargeRequestAdditionalRecipientSchema,\n} from './chargeRequestAdditionalRecipient';\nimport {\n  CreateOrderRequest,\n  createOrderRequestSchema,\n} from './createOrderRequest';\n\n/**\n * Defines the parameters that can be included in the body of\n * a request to the `CreateCheckout` endpoint.\n */\nexport interface CreateCheckoutRequest {\n  /**\n   * A unique string that identifies this checkout among others you have created. It can be\n   * any valid string but must be unique for every order sent to Square Checkout for a given location ID.\n   * The idempotency key is used to avoid processing the same order more than once. If you are\n   * unsure whether a particular checkout was created successfully, you can attempt it again with\n   * the same idempotency key and all the same other parameters without worrying about creating duplicates.\n   * You should use a random number/string generator native to the language\n   * you are working in to generate strings for your idempotency keys.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  order: CreateOrderRequest;\n  /**\n   * If `true`, Square Checkout collects shipping information on your behalf and stores\n   * that information with the transaction information in the Square Seller Dashboard.\n   * Default: `false`.\n   */\n  askForShippingAddress?: boolean;\n  /**\n   * The email address to display on the Square Checkout confirmation page\n   * and confirmation email that the buyer can use to contact the seller.\n   * If this value is not set, the confirmation page and email display the\n   * primary email address associated with the seller's Square account.\n   * Default: none; only exists if explicitly set.\n   */\n  merchantSupportEmail?: string;\n  /**\n   * If provided, the buyer's email is prepopulated on the checkout page\n   * as an editable text field.\n   * Default: none; only exists if explicitly set.\n   */\n  prePopulateBuyerEmail?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  prePopulateShippingAddress?: Address;\n  /**\n   * The URL to redirect to after the checkout is completed with `checkoutId`,\n   * `transactionId`, and `referenceId` appended as URL parameters. For example,\n   * if the provided redirect URL is `http://www.example.com/order-complete`, a\n   * successful transaction redirects the customer to:\n   * <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>\n   * If you do not provide a redirect URL, Square Checkout displays an order\n   * confirmation page on your behalf; however, it is strongly recommended that\n   * you provide a redirect URL so you can verify the transaction results and\n   * finalize the order through your existing/normal confirmation workflow.\n   * Default: none; only exists if explicitly set.\n   */\n  redirectUrl?: string;\n  /**\n   * The basic primitive of a multi-party transaction. The value is optional.\n   * The transaction facilitated by you can be split from here.\n   * If you provide this value, the `amount_money` value in your `additional_recipients` field\n   * cannot be more than 90% of the `total_money` calculated by Square for your order.\n   * The `location_id` must be a valid seller location where the checkout is occurring.\n   * This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.\n   * This field is currently not supported in the Square Sandbox.\n   */\n  additionalRecipients?: ChargeRequestAdditionalRecipient[];\n  /**\n   * An optional note to associate with the `checkout` object.\n   * This value cannot exceed 60 characters.\n   */\n  note?: string;\n}\n\nexport const createCheckoutRequestSchema: Schema<CreateCheckoutRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    order: ['order', lazy(() => createOrderRequestSchema)],\n    askForShippingAddress: ['ask_for_shipping_address', optional(boolean())],\n    merchantSupportEmail: ['merchant_support_email', optional(string())],\n    prePopulateBuyerEmail: ['pre_populate_buyer_email', optional(string())],\n    prePopulateShippingAddress: [\n      'pre_populate_shipping_address',\n      optional(lazy(() => addressSchema)),\n    ],\n    redirectUrl: ['redirect_url', optional(string())],\n    additionalRecipients: [\n      'additional_recipients',\n      optional(array(lazy(() => chargeRequestAdditionalRecipientSchema))),\n    ],\n    note: ['note', optional(string())],\n  }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  AdditionalRecipient,\n  additionalRecipientSchema,\n} from './additionalRecipient';\nimport { Address, addressSchema } from './address';\nimport { Order, orderSchema } from './order';\n\n/**\n * Square Checkout lets merchants accept online payments for supported\n * payment types using a checkout workflow hosted on squareup.com.\n */\nexport interface Checkout {\n  /** ID generated by Square Checkout when a new checkout is requested. */\n  id?: string;\n  /**\n   * The URL that the buyer's browser should be redirected to after the\n   * checkout is completed.\n   */\n  checkoutPageUrl?: string;\n  /**\n   * If `true`, Square Checkout will collect shipping information on your\n   * behalf and store that information with the transaction information in your\n   * Square Dashboard.\n   * Default: `false`.\n   */\n  askForShippingAddress?: boolean;\n  /**\n   * The email address to display on the Square Checkout confirmation page\n   * and confirmation email that the buyer can use to contact the merchant.\n   * If this value is not set, the confirmation page and email will display the\n   * primary email address associated with the merchant's Square account.\n   * Default: none; only exists if explicitly set.\n   */\n  merchantSupportEmail?: string;\n  /**\n   * If provided, the buyer's email is pre-populated on the checkout page\n   * as an editable text field.\n   * Default: none; only exists if explicitly set.\n   */\n  prePopulateBuyerEmail?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  prePopulateShippingAddress?: Address;\n  /**\n   * The URL to redirect to after checkout is completed with `checkoutId`,\n   * Square's `orderId`, `transactionId`, and `referenceId` appended as URL\n   * parameters. For example, if the provided redirect_url is\n   * `http://www.example.com/order-complete`, a successful transaction redirects\n   * the customer to:\n   * <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>\n   * If you do not provide a redirect URL, Square Checkout will display an order\n   * confirmation page on your behalf; however Square strongly recommends that\n   * you provide a redirect URL so you can verify the transaction results and\n   * finalize the order through your existing/normal confirmation workflow.\n   */\n  redirectUrl?: string;\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** The time when the checkout was created, in RFC 3339 format. */\n  createdAt?: string;\n  /**\n   * Additional recipients (other than the merchant) receiving a portion of this checkout.\n   * For example, fees assessed on the purchase by a third party integration.\n   */\n  additionalRecipients?: AdditionalRecipient[];\n}\n\nexport const checkoutSchema: Schema<Checkout> = object({\n  id: ['id', optional(string())],\n  checkoutPageUrl: ['checkout_page_url', optional(string())],\n  askForShippingAddress: ['ask_for_shipping_address', optional(boolean())],\n  merchantSupportEmail: ['merchant_support_email', optional(string())],\n  prePopulateBuyerEmail: ['pre_populate_buyer_email', optional(string())],\n  prePopulateShippingAddress: [\n    'pre_populate_shipping_address',\n    optional(lazy(() => addressSchema)),\n  ],\n  redirectUrl: ['redirect_url', optional(string())],\n  order: ['order', optional(lazy(() => orderSchema))],\n  createdAt: ['created_at', optional(string())],\n  additionalRecipients: [\n    'additional_recipients',\n    optional(array(lazy(() => additionalRecipientSchema))),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Checkout, checkoutSchema } from './checkout';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `CreateCheckout` endpoint.\n */\nexport interface CreateCheckoutResponse {\n  /**\n   * Square Checkout lets merchants accept online payments for supported\n   * payment types using a checkout workflow hosted on squareup.com.\n   */\n  checkout?: Checkout;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createCheckoutResponseSchema: Schema<CreateCheckoutResponse> = object(\n  {\n    checkout: ['checkout', optional(lazy(() => checkoutSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateCheckoutRequest,\n  createCheckoutRequestSchema,\n} from '../models/createCheckoutRequest';\nimport {\n  CreateCheckoutResponse,\n  createCheckoutResponseSchema,\n} from '../models/createCheckoutResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CheckoutApi extends BaseApi {\n  /**\n   * Links a `checkoutId` to a `checkout_page_url` that customers are\n   * directed to in order to provide their payment information using a\n   * payment processing workflow hosted on connect.squareup.com.\n   *\n   * @param locationId   The ID of the business location to associate the checkout\n   *                                                     with.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createCheckout(\n    locationId: string,\n    body: CreateCheckoutRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCheckoutResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, createCheckoutRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/checkouts`;\n    return req.callAsJson(createCheckoutResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a group of customer profiles.\n * Customer groups can be created, be modified, and have their membership defined using\n * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.\n */\nexport interface CustomerGroup {\n  /** A unique Square-generated ID for the customer group. */\n  id?: string;\n  /** The name of the customer group. */\n  name: string;\n  /** The timestamp when the customer group was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the customer group was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const customerGroupSchema: Schema<CustomerGroup> = object({\n  id: ['id', optional(string())],\n  name: ['name', string()],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\n\n/**\n * Defines the body parameters that can be included in a request to the\n * [CreateCustomerGroup]($e/CustomerGroups/CreateCustomerGroup) endpoint.\n */\nexport interface CreateCustomerGroupRequest {\n  /** The idempotency key for the request. For more information, see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency). */\n  idempotencyKey?: string;\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, be modified, and have their membership defined using\n   * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.\n   */\n  group: CustomerGroup;\n}\n\nexport const createCustomerGroupRequestSchema: Schema<CreateCustomerGroupRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    group: ['group', lazy(() => customerGroupSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [CreateCustomerGroup]($e/CustomerGroups/CreateCustomerGroup) endpoint.\n * Either `errors` or `group` is present in a given response (never both).\n */\nexport interface CreateCustomerGroupResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, be modified, and have their membership defined using\n   * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.\n   */\n  group?: CustomerGroup;\n}\n\nexport const createCustomerGroupResponseSchema: Schema<CreateCustomerGroupResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    group: ['group', optional(lazy(() => customerGroupSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [DeleteCustomerGroup]($e/CustomerGroups/DeleteCustomerGroup) endpoint.\n */\nexport interface DeleteCustomerGroupResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteCustomerGroupResponseSchema: Schema<DeleteCustomerGroupResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [ListCustomerGroups]($e/CustomerGroups/ListCustomerGroups) endpoint.\n * Either `errors` or `groups` is present in a given response (never both).\n */\nexport interface ListCustomerGroupsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** A list of customer groups belonging to the current seller. */\n  groups?: CustomerGroup[];\n  /**\n   * A pagination cursor to retrieve the next set of results for your\n   * original query to the endpoint. This value is present only if the request\n   * succeeded and additional results are available.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listCustomerGroupsResponseSchema: Schema<ListCustomerGroupsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    groups: ['groups', optional(array(lazy(() => customerGroupSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RetrieveCustomerGroup]($e/CustomerGroups/RetrieveCustomerGroup) endpoint.\n * Either `errors` or `group` is present in a given response (never both).\n */\nexport interface RetrieveCustomerGroupResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, be modified, and have their membership defined using\n   * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.\n   */\n  group?: CustomerGroup;\n}\n\nexport const retrieveCustomerGroupResponseSchema: Schema<RetrieveCustomerGroupResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    group: ['group', optional(lazy(() => customerGroupSchema))],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\n\n/**\n * Defines the body parameters that can be included in a request to the\n * [UpdateCustomerGroup]($e/CustomerGroups/UpdateCustomerGroup) endpoint.\n */\nexport interface UpdateCustomerGroupRequest {\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, be modified, and have their membership defined using\n   * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.\n   */\n  group: CustomerGroup;\n}\n\nexport const updateCustomerGroupRequestSchema: Schema<UpdateCustomerGroupRequest> = object(\n  { group: ['group', lazy(() => customerGroupSchema)] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [UpdateCustomerGroup]($e/CustomerGroups/UpdateCustomerGroup) endpoint.\n * Either `errors` or `group` is present in a given response (never both).\n */\nexport interface UpdateCustomerGroupResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, be modified, and have their membership defined using\n   * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.\n   */\n  group?: CustomerGroup;\n}\n\nexport const updateCustomerGroupResponseSchema: Schema<UpdateCustomerGroupResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    group: ['group', optional(lazy(() => customerGroupSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateCustomerGroupRequest,\n  createCustomerGroupRequestSchema,\n} from '../models/createCustomerGroupRequest';\nimport {\n  CreateCustomerGroupResponse,\n  createCustomerGroupResponseSchema,\n} from '../models/createCustomerGroupResponse';\nimport {\n  DeleteCustomerGroupResponse,\n  deleteCustomerGroupResponseSchema,\n} from '../models/deleteCustomerGroupResponse';\nimport {\n  ListCustomerGroupsResponse,\n  listCustomerGroupsResponseSchema,\n} from '../models/listCustomerGroupsResponse';\nimport {\n  RetrieveCustomerGroupResponse,\n  retrieveCustomerGroupResponseSchema,\n} from '../models/retrieveCustomerGroupResponse';\nimport {\n  UpdateCustomerGroupRequest,\n  updateCustomerGroupRequestSchema,\n} from '../models/updateCustomerGroupRequest';\nimport {\n  UpdateCustomerGroupResponse,\n  updateCustomerGroupResponseSchema,\n} from '../models/updateCustomerGroupResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CustomerGroupsApi extends BaseApi {\n  /**\n   * Retrieves the list of customer groups of a business.\n   *\n   * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to\n   *                         retrieve the next set of results for your original query.  For more information, see\n   *                         [Pagination](https://developer.squareup.com/docs/build-basics/common-api-\n   *                         patterns/pagination).\n   * @param limit  The maximum number of results to return in a single page. This limit is advisory. The\n   *                         response might contain more or fewer results. If the limit is less than 1 or greater than\n   *                         50, Square returns a `400 VALUE_TOO_LOW` or `400 VALUE_TOO_HIGH` error. The default value\n   *                         is 50.  For more information, see [Pagination](https://developer.squareup.com/docs/build-\n   *                         basics/common-api-patterns/pagination).\n   * @return Response from the API call\n   */\n  async listCustomerGroups(\n    cursor?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCustomerGroupsResponse>> {\n    const req = this.createRequest('GET', '/v2/customers/groups');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listCustomerGroupsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new customer group for a business.\n   *\n   * The request must include the `name` value of the group.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async createCustomerGroup(\n    body: CreateCustomerGroupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCustomerGroupResponse>> {\n    const req = this.createRequest('POST', '/v2/customers/groups');\n    const mapped = req.prepareArgs({\n      body: [body, createCustomerGroupRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createCustomerGroupResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a customer group as identified by the `group_id` value.\n   *\n   * @param groupId  The ID of the customer group to delete.\n   * @return Response from the API call\n   */\n  async deleteCustomerGroup(\n    groupId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteCustomerGroupResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ groupId: [groupId, string()] });\n    req.appendTemplatePath`/v2/customers/groups/${mapped.groupId}`;\n    return req.callAsJson(deleteCustomerGroupResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a specific customer group as identified by the `group_id` value.\n   *\n   * @param groupId  The ID of the customer group to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveCustomerGroup(\n    groupId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCustomerGroupResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ groupId: [groupId, string()] });\n    req.appendTemplatePath`/v2/customers/groups/${mapped.groupId}`;\n    return req.callAsJson(retrieveCustomerGroupResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a customer group as identified by the `group_id` value.\n   *\n   * @param groupId      The ID of the customer group to update.\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async updateCustomerGroup(\n    groupId: string,\n    body: UpdateCustomerGroupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateCustomerGroupResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      groupId: [groupId, string()],\n      body: [body, updateCustomerGroupRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/customers/groups/${mapped.groupId}`;\n    return req.callAsJson(updateCustomerGroupResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [AddGroupToCustomer]($e/Customers/AddGroupToCustomer) endpoint.\n */\nexport interface AddGroupToCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const addGroupToCustomerResponseSchema: Schema<AddGroupToCustomerResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\n\n/**\n * Defines the fields that are included in the request body of a request\n * to the `CreateCustomerCard` endpoint.\n */\nexport interface CreateCustomerCardRequest {\n  /**\n   * A card nonce representing the credit card to link to the customer.\n   * Card nonces are generated by the Square payment form when customers enter\n   * their card information. For more information, see\n   * [Walkthrough: Integrate Square Payments in a Website](https://developer.squareup.com/docs/web-payments/take-card-payment).\n   * __NOTE:__ Card nonces generated by digital wallets (such as Apple Pay)\n   * cannot be used to create a customer card.\n   */\n  cardNonce: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  billingAddress?: Address;\n  /** The full name printed on the credit card. */\n  cardholderName?: string;\n  /**\n   * An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).\n   * Verification tokens encapsulate customer device information and 3-D Secure\n   * challenge results to indicate that Square has verified the buyer identity.\n   */\n  verificationToken?: string;\n}\n\nexport const createCustomerCardRequestSchema: Schema<CreateCustomerCardRequest> = object(\n  {\n    cardNonce: ['card_nonce', string()],\n    billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n    cardholderName: ['cardholder_name', optional(string())],\n    verificationToken: ['verification_token', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Card, cardSchema } from './card';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `CreateCustomerCard` endpoint.\n * Either `errors` or `card` is present in a given response (never both).\n */\nexport interface CreateCustomerCardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the payment token generated by Web Payments SDK.\n   */\n  card?: Card;\n}\n\nexport const createCustomerCardResponseSchema: Schema<CreateCustomerCardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    card: ['card', optional(lazy(() => cardSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents the tax ID associated with a [customer profile]($m/Customer). The corresponding `tax_ids` field is available only for customers of sellers in EU countries or the United Kingdom.\n * For more information, see [Customer tax IDs](https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids).\n */\nexport interface CustomerTaxIds {\n  /** The EU VAT identification number for the customer. For example, `IE3426675K`. The ID can contain alphanumeric characters only. */\n  euVat?: string;\n}\n\nexport const customerTaxIdsSchema: Schema<CustomerTaxIds> = object({\n  euVat: ['eu_vat', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport { CustomerTaxIds, customerTaxIdsSchema } from './customerTaxIds';\n\n/**\n * Defines the body parameters that can be included in a request to the\n * `CreateCustomer` endpoint.\n */\nexport interface CreateCustomerRequest {\n  /**\n   * The idempotency key for the request.\tFor more information, see\n   * [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).\n   */\n  idempotencyKey?: string;\n  /** The given name (that is, the first name) associated with the customer profile. */\n  givenName?: string;\n  /** The family name (that is, the last name) associated with the customer profile. */\n  familyName?: string;\n  /** A business name associated with the customer profile. */\n  companyName?: string;\n  /** A nickname for the customer profile. */\n  nickname?: string;\n  /** The email address associated with the customer profile. */\n  emailAddress?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  address?: Address;\n  /** The phone number associated with the customer profile. A phone number can contain 9–16 digits, with an optional `+` prefix. */\n  phoneNumber?: string;\n  /**\n   * An optional second ID used to associate the customer profile with an\n   * entity in another system.\n   */\n  referenceId?: string;\n  /** A custom note associated with the customer profile. */\n  note?: string;\n  /**\n   * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.\n   * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.\n   * You can also specify this value in `YYYY-MM-DD` format.\n   */\n  birthday?: string;\n  /**\n   * Represents the tax ID associated with a [customer profile]($m/Customer). The corresponding `tax_ids` field is available only for customers of sellers in EU countries or the United Kingdom.\n   * For more information, see [Customer tax IDs](https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids).\n   */\n  taxIds?: CustomerTaxIds;\n}\n\nexport const createCustomerRequestSchema: Schema<CreateCustomerRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    givenName: ['given_name', optional(string())],\n    familyName: ['family_name', optional(string())],\n    companyName: ['company_name', optional(string())],\n    nickname: ['nickname', optional(string())],\n    emailAddress: ['email_address', optional(string())],\n    address: ['address', optional(lazy(() => addressSchema))],\n    phoneNumber: ['phone_number', optional(string())],\n    referenceId: ['reference_id', optional(string())],\n    note: ['note', optional(string())],\n    birthday: ['birthday', optional(string())],\n    taxIds: ['tax_ids', optional(lazy(() => customerTaxIdsSchema))],\n  }\n);\n","import { boolean, object, optional, Schema } from '../schema';\n\n/** Represents communication preferences for the customer profile. */\nexport interface CustomerPreferences {\n  /** Indicates whether the customer has unsubscribed from marketing campaign emails. A value of `true` means that the customer chose to opt out of email marketing from the current Square seller or from all Square sellers. This value is read-only from the Customers API. */\n  emailUnsubscribed?: boolean;\n}\n\nexport const customerPreferencesSchema: Schema<CustomerPreferences> = object({\n  emailUnsubscribed: ['email_unsubscribed', optional(boolean())],\n});\n","import {\n  array,\n  bigint,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Address, addressSchema } from './address';\nimport { Card, cardSchema } from './card';\nimport {\n  CustomerPreferences,\n  customerPreferencesSchema,\n} from './customerPreferences';\nimport { CustomerTaxIds, customerTaxIdsSchema } from './customerTaxIds';\n\n/** Represents a Square customer profile in the Customer Directory of a Square seller. */\nexport interface Customer {\n  /**\n   * A unique Square-assigned ID for the customer profile.\n   * If you need this ID for an API request, use the ID returned when you created the customer profile or call the [SearchCustomers]($e/Customers/SearchCustomers)\n   * or [ListCustomers]($e/Customers/ListCustomers) endpoint.\n   */\n  id?: string;\n  /** The timestamp when the customer profile was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the customer profile was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /**\n   * Payment details of the credit, debit, and gift cards stored on file for the customer profile.\n   * DEPRECATED at version 2021-06-16. Replaced by calling [ListCards]($e/Cards/ListCards) (for credit and debit cards on file)\n   * or [ListGiftCards]($e/GiftCards/ListGiftCards) (for gift cards on file) and including the `customer_id` query parameter.\n   * For more information, see [Migration notes](https://developer.squareup.com/docs/customers-api/what-it-does#migrate-customer-cards).\n   */\n  cards?: Card[];\n  /** The given name (that is, the first name) associated with the customer profile. */\n  givenName?: string;\n  /** The family name (that is, the last name) associated with the customer profile. */\n  familyName?: string;\n  /** A nickname for the customer profile. */\n  nickname?: string;\n  /** A business name associated with the customer profile. */\n  companyName?: string;\n  /** The email address associated with the customer profile. */\n  emailAddress?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  address?: Address;\n  /** The phone number associated with the customer profile. A phone number can contain 9–16 digits, with an optional `+` prefix. */\n  phoneNumber?: string;\n  /**\n   * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.\n   * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.\n   */\n  birthday?: string;\n  /**\n   * An optional second ID used to associate the customer profile with an\n   * entity in another system.\n   */\n  referenceId?: string;\n  /** A custom note associated with the customer profile. */\n  note?: string;\n  /** Represents communication preferences for the customer profile. */\n  preferences?: CustomerPreferences;\n  /** Indicates the method used to create the customer profile. */\n  creationSource?: string;\n  /** The IDs of customer groups the customer belongs to. */\n  groupIds?: string[];\n  /** The IDs of segments the customer belongs to. */\n  segmentIds?: string[];\n  /** The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership and cards on file. */\n  version?: bigint;\n  /**\n   * Represents the tax ID associated with a [customer profile]($m/Customer). The corresponding `tax_ids` field is available only for customers of sellers in EU countries or the United Kingdom.\n   * For more information, see [Customer tax IDs](https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids).\n   */\n  taxIds?: CustomerTaxIds;\n}\n\nexport const customerSchema: Schema<Customer> = object({\n  id: ['id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  cards: ['cards', optional(array(lazy(() => cardSchema)))],\n  givenName: ['given_name', optional(string())],\n  familyName: ['family_name', optional(string())],\n  nickname: ['nickname', optional(string())],\n  companyName: ['company_name', optional(string())],\n  emailAddress: ['email_address', optional(string())],\n  address: ['address', optional(lazy(() => addressSchema))],\n  phoneNumber: ['phone_number', optional(string())],\n  birthday: ['birthday', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  note: ['note', optional(string())],\n  preferences: ['preferences', optional(lazy(() => customerPreferencesSchema))],\n  creationSource: ['creation_source', optional(string())],\n  groupIds: ['group_ids', optional(array(string()))],\n  segmentIds: ['segment_ids', optional(array(string()))],\n  version: ['version', optional(bigint())],\n  taxIds: ['tax_ids', optional(lazy(() => customerTaxIdsSchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `CreateCustomer` endpoint.\n * Either `errors` or `customer` is present in a given response (never both).\n */\nexport interface CreateCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square customer profile in the Customer Directory of a Square seller. */\n  customer?: Customer;\n}\n\nexport const createCustomerResponseSchema: Schema<CreateCustomerResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customer: ['customer', optional(lazy(() => customerSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `DeleteCustomerCard` endpoint.\n */\nexport interface DeleteCustomerCardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteCustomerCardResponseSchema: Schema<DeleteCustomerCardResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `DeleteCustomer` endpoint.\n */\nexport interface DeleteCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteCustomerResponseSchema: Schema<DeleteCustomerResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `ListCustomers` endpoint.\n * Either `errors` or `customers` is present in a given response (never both).\n */\nexport interface ListCustomersResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** An array of `Customer` objects that match the provided query. */\n  customers?: Customer[];\n  /**\n   * A pagination cursor to retrieve the next set of results for the\n   * original query. A cursor is only present if the request succeeded and additional results\n   * are available.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listCustomersResponseSchema: Schema<ListCustomersResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customers: ['customers', optional(array(lazy(() => customerSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RemoveGroupFromCustomer]($e/Customers/RemoveGroupFromCustomer)\n * endpoint.\n */\nexport interface RemoveGroupFromCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const removeGroupFromCustomerResponseSchema: Schema<RemoveGroupFromCustomerResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `RetrieveCustomer` endpoint.\n * Either `errors` or `customer` is present in a given response (never both).\n */\nexport interface RetrieveCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square customer profile in the Customer Directory of a Square seller. */\n  customer?: Customer;\n}\n\nexport const retrieveCustomerResponseSchema: Schema<RetrieveCustomerResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customer: ['customer', optional(lazy(() => customerSchema))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * The creation source filter.\n * If one or more creation sources are set, customer profiles are included in,\n * or excluded from, the result if they match at least one of the filter criteria.\n */\nexport interface CustomerCreationSourceFilter {\n  /**\n   * The list of creation sources used as filtering criteria.\n   * See [CustomerCreationSource](#type-customercreationsource) for possible values\n   */\n  values?: string[];\n  /**\n   * Indicates whether customers should be included in, or excluded from,\n   * the result set when they match the filtering criteria.\n   */\n  rule?: string;\n}\n\nexport const customerCreationSourceFilterSchema: Schema<CustomerCreationSourceFilter> = object(\n  {\n    values: ['values', optional(array(string()))],\n    rule: ['rule', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A filter to select customers based on exact or fuzzy matching of\n * customer attributes against a specified query. Depending on the customer attributes,\n * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.\n */\nexport interface CustomerTextFilter {\n  /** Use the exact filter to select customers whose attributes match exactly the specified query. */\n  exact?: string;\n  /**\n   * Use the fuzzy filter to select customers whose attributes match the specified query\n   * in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then\n   * each query token must be matched somewhere in the searched attribute. For single token queries,\n   * this is effectively the same behavior as a partial match operation.\n   */\n  fuzzy?: string;\n}\n\nexport const customerTextFilterSchema: Schema<CustomerTextFilter> = object({\n  exact: ['exact', optional(string())],\n  fuzzy: ['fuzzy', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  CustomerCreationSourceFilter,\n  customerCreationSourceFilterSchema,\n} from './customerCreationSourceFilter';\nimport {\n  CustomerTextFilter,\n  customerTextFilterSchema,\n} from './customerTextFilter';\nimport { FilterValue, filterValueSchema } from './filterValue';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/**\n * Represents a set of `CustomerQuery` filters used to limit the set of\n * customers returned by the [SearchCustomers]($e/Customers/SearchCustomers) endpoint.\n */\nexport interface CustomerFilter {\n  /**\n   * The creation source filter.\n   * If one or more creation sources are set, customer profiles are included in,\n   * or excluded from, the result if they match at least one of the filter criteria.\n   */\n  creationSource?: CustomerCreationSourceFilter;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt?: TimeRange;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  updatedAt?: TimeRange;\n  /**\n   * A filter to select customers based on exact or fuzzy matching of\n   * customer attributes against a specified query. Depending on the customer attributes,\n   * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.\n   */\n  emailAddress?: CustomerTextFilter;\n  /**\n   * A filter to select customers based on exact or fuzzy matching of\n   * customer attributes against a specified query. Depending on the customer attributes,\n   * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.\n   */\n  phoneNumber?: CustomerTextFilter;\n  /**\n   * A filter to select customers based on exact or fuzzy matching of\n   * customer attributes against a specified query. Depending on the customer attributes,\n   * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.\n   */\n  referenceId?: CustomerTextFilter;\n  /**\n   * A filter to select resources based on an exact field value. For any given\n   * value, the value can only be in one property. Depending on the field, either\n   * all properties can be set or only a subset will be available.\n   * Refer to the documentation of the field.\n   */\n  groupIds?: FilterValue;\n}\n\nexport const customerFilterSchema: Schema<CustomerFilter> = object({\n  creationSource: [\n    'creation_source',\n    optional(lazy(() => customerCreationSourceFilterSchema)),\n  ],\n  createdAt: ['created_at', optional(lazy(() => timeRangeSchema))],\n  updatedAt: ['updated_at', optional(lazy(() => timeRangeSchema))],\n  emailAddress: [\n    'email_address',\n    optional(lazy(() => customerTextFilterSchema)),\n  ],\n  phoneNumber: ['phone_number', optional(lazy(() => customerTextFilterSchema))],\n  referenceId: ['reference_id', optional(lazy(() => customerTextFilterSchema))],\n  groupIds: ['group_ids', optional(lazy(() => filterValueSchema))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Specifies how searched customers profiles are sorted, including the sort key and sort order. */\nexport interface CustomerSort {\n  /** Specifies customer attributes as the sort key to customer profiles returned from a search. */\n  field?: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  order?: string;\n}\n\nexport const customerSortSchema: Schema<CustomerSort> = object({\n  field: ['field', optional(string())],\n  order: ['order', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { CustomerFilter, customerFilterSchema } from './customerFilter';\nimport { CustomerSort, customerSortSchema } from './customerSort';\n\n/**\n * Represents a query (including filtering criteria, sorting criteria, or both) used to search\n * for customer profiles.\n */\nexport interface CustomerQuery {\n  /**\n   * Represents a set of `CustomerQuery` filters used to limit the set of\n   * customers returned by the [SearchCustomers]($e/Customers/SearchCustomers) endpoint.\n   */\n  filter?: CustomerFilter;\n  /** Specifies how searched customers profiles are sorted, including the sort key and sort order. */\n  sort?: CustomerSort;\n}\n\nexport const customerQuerySchema: Schema<CustomerQuery> = object({\n  filter: ['filter', optional(lazy(() => customerFilterSchema))],\n  sort: ['sort', optional(lazy(() => customerSortSchema))],\n});\n","import { bigint, lazy, object, optional, Schema, string } from '../schema';\nimport { CustomerQuery, customerQuerySchema } from './customerQuery';\n\n/**\n * Defines the fields that are included in the request body of a request to the\n * `SearchCustomers` endpoint.\n */\nexport interface SearchCustomersRequest {\n  /**\n   * Include the pagination cursor in subsequent calls to this endpoint to retrieve\n   * the next set of results associated with the original query.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).\n   */\n  cursor?: string;\n  /**\n   * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.\n   * If the specified limit is invalid, Square returns a `400 VALUE_TOO_LOW` or `400 VALUE_TOO_HIGH` error. The default value is 100.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).\n   */\n  limit?: bigint;\n  /**\n   * Represents a query (including filtering criteria, sorting criteria, or both) used to search\n   * for customer profiles.\n   */\n  query?: CustomerQuery;\n}\n\nexport const searchCustomersRequestSchema: Schema<SearchCustomersRequest> = object(\n  {\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(bigint())],\n    query: ['query', optional(lazy(() => customerQuerySchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `SearchCustomers` endpoint.\n * Either `errors` or `customers` is present in a given response (never both).\n */\nexport interface SearchCustomersResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** An array of `Customer` objects that match a query. */\n  customers?: Customer[];\n  /**\n   * A pagination cursor that can be used during subsequent calls\n   * to `SearchCustomers` to retrieve the next set of results associated\n   * with the original query. Pagination cursors are only present when\n   * a request succeeds and additional results are available.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchCustomersResponseSchema: Schema<SearchCustomersResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customers: ['customers', optional(array(lazy(() => customerSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { bigint, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport { CustomerTaxIds, customerTaxIdsSchema } from './customerTaxIds';\n\n/**\n * Defines the body parameters that can be included in a request to the\n * `UpdateCustomer` endpoint.\n */\nexport interface UpdateCustomerRequest {\n  /** The given name (that is, the first name) associated with the customer profile. */\n  givenName?: string;\n  /** The family name (that is, the last name) associated with the customer profile. */\n  familyName?: string;\n  /** A business name associated with the customer profile. */\n  companyName?: string;\n  /** A nickname for the customer profile. */\n  nickname?: string;\n  /** The email address associated with the customer profile. */\n  emailAddress?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  address?: Address;\n  /** The phone number associated with the customer profile. A phone number can contain 9–16 digits, with an optional `+` prefix. */\n  phoneNumber?: string;\n  /**\n   * An optional second ID used to associate the customer profile with an\n   * entity in another system.\n   */\n  referenceId?: string;\n  /** A custom note associated with the customer profile. */\n  note?: string;\n  /**\n   * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.\n   * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.\n   * You can also specify this value in `YYYY-MM-DD` format.\n   */\n  birthday?: string;\n  /**\n   * The current version of the customer profile.\n   * As a best practice, you should include this field to enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency) control. For more information, see [Update a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#update-a-customer-profile).\n   */\n  version?: bigint;\n  /**\n   * Represents the tax ID associated with a [customer profile]($m/Customer). The corresponding `tax_ids` field is available only for customers of sellers in EU countries or the United Kingdom.\n   * For more information, see [Customer tax IDs](https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids).\n   */\n  taxIds?: CustomerTaxIds;\n}\n\nexport const updateCustomerRequestSchema: Schema<UpdateCustomerRequest> = object(\n  {\n    givenName: ['given_name', optional(string())],\n    familyName: ['family_name', optional(string())],\n    companyName: ['company_name', optional(string())],\n    nickname: ['nickname', optional(string())],\n    emailAddress: ['email_address', optional(string())],\n    address: ['address', optional(lazy(() => addressSchema))],\n    phoneNumber: ['phone_number', optional(string())],\n    referenceId: ['reference_id', optional(string())],\n    note: ['note', optional(string())],\n    birthday: ['birthday', optional(string())],\n    version: ['version', optional(bigint())],\n    taxIds: ['tax_ids', optional(lazy(() => customerTaxIdsSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `UpdateCustomer` endpoint.\n * Either `errors` or `customer` is present in a given response (never both).\n */\nexport interface UpdateCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square customer profile in the Customer Directory of a Square seller. */\n  customer?: Customer;\n}\n\nexport const updateCustomerResponseSchema: Schema<UpdateCustomerResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customer: ['customer', optional(lazy(() => customerSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  AddGroupToCustomerResponse,\n  addGroupToCustomerResponseSchema,\n} from '../models/addGroupToCustomerResponse';\nimport {\n  CreateCustomerCardRequest,\n  createCustomerCardRequestSchema,\n} from '../models/createCustomerCardRequest';\nimport {\n  CreateCustomerCardResponse,\n  createCustomerCardResponseSchema,\n} from '../models/createCustomerCardResponse';\nimport {\n  CreateCustomerRequest,\n  createCustomerRequestSchema,\n} from '../models/createCustomerRequest';\nimport {\n  CreateCustomerResponse,\n  createCustomerResponseSchema,\n} from '../models/createCustomerResponse';\nimport {\n  DeleteCustomerCardResponse,\n  deleteCustomerCardResponseSchema,\n} from '../models/deleteCustomerCardResponse';\nimport {\n  DeleteCustomerResponse,\n  deleteCustomerResponseSchema,\n} from '../models/deleteCustomerResponse';\nimport {\n  ListCustomersResponse,\n  listCustomersResponseSchema,\n} from '../models/listCustomersResponse';\nimport {\n  RemoveGroupFromCustomerResponse,\n  removeGroupFromCustomerResponseSchema,\n} from '../models/removeGroupFromCustomerResponse';\nimport {\n  RetrieveCustomerResponse,\n  retrieveCustomerResponseSchema,\n} from '../models/retrieveCustomerResponse';\nimport {\n  SearchCustomersRequest,\n  searchCustomersRequestSchema,\n} from '../models/searchCustomersRequest';\nimport {\n  SearchCustomersResponse,\n  searchCustomersResponseSchema,\n} from '../models/searchCustomersResponse';\nimport {\n  UpdateCustomerRequest,\n  updateCustomerRequestSchema,\n} from '../models/updateCustomerRequest';\nimport {\n  UpdateCustomerResponse,\n  updateCustomerResponseSchema,\n} from '../models/updateCustomerResponse';\nimport { bigint, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CustomersApi extends BaseApi {\n  /**\n   * Lists customer profiles associated with a Square account.\n   *\n   * Under normal operating conditions, newly created or updated customer profiles become available\n   * for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated\n   * profiles can take closer to one minute or longer, especially during network incidents and outages.\n   *\n   * @param cursor     A pagination cursor returned by a previous call to this endpoint. Provide this cursor\n   *                             to retrieve the next set of results for your original query.  For more information,\n   *                             see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-\n   *                             patterns/pagination).\n   * @param limit      The maximum number of results to return in a single page. This limit is advisory. The\n   *                             response might contain more or fewer results. If the specified limit is less than 1 or\n   *                             greater than 100, Square returns a `400 VALUE_TOO_LOW` or `400 VALUE_TOO_HIGH` error.\n   *                             The default value is 100.  For more information, see [Pagination](https://developer.\n   *                             squareup.com/docs/build-basics/common-api-patterns/pagination).\n   * @param sortField  Indicates how customers should be sorted.  The default value is `DEFAULT`.\n   * @param sortOrder  Indicates whether customers should be sorted in ascending (`ASC`) or descending\n   *                             (`DESC`) order.  The default value is `ASC`.\n   * @return Response from the API call\n   */\n  async listCustomers(\n    cursor?: string,\n    limit?: number,\n    sortField?: string,\n    sortOrder?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCustomersResponse>> {\n    const req = this.createRequest('GET', '/v2/customers');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n      sortField: [sortField, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    req.query('sort_field', mapped.sortField);\n    req.query('sort_order', mapped.sortOrder);\n    return req.callAsJson(listCustomersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new customer for a business.\n   *\n   * You must provide at least one of the following values in your request to this\n   * endpoint:\n   *\n   * - `given_name`\n   * - `family_name`\n   * - `company_name`\n   * - `email_address`\n   * - `phone_number`\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createCustomer(\n    body: CreateCustomerRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCustomerResponse>> {\n    const req = this.createRequest('POST', '/v2/customers');\n    const mapped = req.prepareArgs({\n      body: [body, createCustomerRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createCustomerResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches the customer profiles associated with a Square account using a supported query filter.\n   *\n   * Calling `SearchCustomers` without any explicit query filter returns all\n   * customer profiles ordered alphabetically based on `given_name` and\n   * `family_name`.\n   *\n   * Under normal operating conditions, newly created or updated customer profiles become available\n   * for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated\n   * profiles can take closer to one minute or longer, especially during network incidents and outages.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchCustomers(\n    body: SearchCustomersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchCustomersResponse>> {\n    const req = this.createRequest('POST', '/v2/customers/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchCustomersRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchCustomersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a customer profile from a business. This operation also unlinks any associated cards on file.\n   *\n   *\n   * As a best practice, you should include the `version` field in the request to enable [optimistic\n   * concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.\n   * The value must be set to the current version of the customer profile.\n   *\n   * To delete a customer profile that was created by merging existing profiles, you must use the ID of\n   * the newly created profile.\n   *\n   * @param customerId  The ID of the customer to delete.\n   * @param version     The current version of the customer profile.  As a best practice, you should include\n   *                              this parameter to enable [optimistic concurrency](https://developer.squareup.\n   *                              com/docs/build-basics/common-api-patterns/optimistic-concurrency) control.  For more\n   *                              information, see [Delete a customer profile](https://developer.squareup.\n   *                              com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).\n   * @return Response from the API call\n   */\n  async deleteCustomer(\n    customerId: string,\n    version?: bigint,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteCustomerResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      version: [version, optional(bigint())],\n    });\n    req.query('version', mapped.version);\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}`;\n    return req.callAsJson(deleteCustomerResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns details for a single customer.\n   *\n   * @param customerId  The ID of the customer to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveCustomer(\n    customerId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCustomerResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ customerId: [customerId, string()] });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}`;\n    return req.callAsJson(retrieveCustomerResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a customer profile. To change an attribute, specify the new value. To remove an attribute,\n   * specify the value as an empty string or empty object.\n   *\n   * As a best practice, you should include the `version` field in the request to enable [optimistic\n   * concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.\n   * The value must be set to the current version of the customer profile.\n   *\n   * To update a customer profile that was created by merging existing profiles, you must use the ID of\n   * the newly created profile.\n   *\n   * You cannot use this endpoint to change cards on file. To make changes, use the [Cards API]($e/Cards)\n   * or [Gift Cards API]($e/GiftCards).\n   *\n   * @param customerId   The ID of the customer to update.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateCustomer(\n    customerId: string,\n    body: UpdateCustomerRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateCustomerResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      body: [body, updateCustomerRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}`;\n    return req.callAsJson(updateCustomerResponseSchema, requestOptions);\n  }\n\n  /**\n   * Adds a card on file to an existing customer.\n   *\n   * As with charges, calls to `CreateCustomerCard` are idempotent. Multiple\n   * calls with the same card nonce return the same card record that was created\n   * with the provided nonce during the _first_ call.\n   *\n   * @param customerId   The Square ID of the customer profile the card is linked\n   *                                                         to.\n   * @param body         An object containing the fields to POST for the request.\n   *                                                         See the corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createCustomerCard(\n    customerId: string,\n    body: CreateCustomerCardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCustomerCardResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      body: [body, createCustomerCardRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}/cards`;\n    req.deprecated('CustomersApi.createCustomerCard');\n    return req.callAsJson(createCustomerCardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Removes a card on file from a customer.\n   *\n   * @param customerId  The ID of the customer that the card on file belongs to.\n   * @param cardId      The ID of the card on file to delete.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteCustomerCard(\n    customerId: string,\n    cardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteCustomerCardResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      cardId: [cardId, string()],\n    });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}/cards/${mapped.cardId}`;\n    req.deprecated('CustomersApi.deleteCustomerCard');\n    return req.callAsJson(deleteCustomerCardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Removes a group membership from a customer.\n   *\n   * The customer is identified by the `customer_id` value\n   * and the customer group is identified by the `group_id` value.\n   *\n   * @param customerId  The ID of the customer to remove from the group.\n   * @param groupId     The ID of the customer group to remove the customer from.\n   * @return Response from the API call\n   */\n  async removeGroupFromCustomer(\n    customerId: string,\n    groupId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RemoveGroupFromCustomerResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      groupId: [groupId, string()],\n    });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}/groups/${mapped.groupId}`;\n    return req.callAsJson(\n      removeGroupFromCustomerResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Adds a group membership to a customer.\n   *\n   * The customer is identified by the `customer_id` value\n   * and the customer group is identified by the `group_id` value.\n   *\n   * @param customerId  The ID of the customer to add to a group.\n   * @param groupId     The ID of the customer group to add the customer to.\n   * @return Response from the API call\n   */\n  async addGroupToCustomer(\n    customerId: string,\n    groupId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<AddGroupToCustomerResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      groupId: [groupId, string()],\n    });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}/groups/${mapped.groupId}`;\n    return req.callAsJson(addGroupToCustomerResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a group of customer profiles that match one or more predefined filter criteria.\n * Segments (also known as Smart Groups) are defined and created within the Customer Directory in the\n * Square Seller Dashboard or Point of Sale.\n */\nexport interface CustomerSegment {\n  /** A unique Square-generated ID for the segment. */\n  id?: string;\n  /** The name of the segment. */\n  name: string;\n  /** The timestamp when the segment was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the segment was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const customerSegmentSchema: Schema<CustomerSegment> = object({\n  id: ['id', optional(string())],\n  name: ['name', string()],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CustomerSegment, customerSegmentSchema } from './customerSegment';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body for requests to the `ListCustomerSegments` endpoint.\n * Either `errors` or `segments` is present in a given response (never both).\n */\nexport interface ListCustomerSegmentsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The list of customer segments belonging to the associated Square account. */\n  segments?: CustomerSegment[];\n  /**\n   * A pagination cursor to be used in subsequent calls to `ListCustomerSegments`\n   * to retrieve the next set of query results. The cursor is only present if the request succeeded and\n   * additional results are available.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listCustomerSegmentsResponseSchema: Schema<ListCustomerSegmentsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    segments: ['segments', optional(array(lazy(() => customerSegmentSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CustomerSegment, customerSegmentSchema } from './customerSegment';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body for requests to the `RetrieveCustomerSegment` endpoint.\n * Either `errors` or `segment` is present in a given response (never both).\n */\nexport interface RetrieveCustomerSegmentResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a group of customer profiles that match one or more predefined filter criteria.\n   * Segments (also known as Smart Groups) are defined and created within the Customer Directory in the\n   * Square Seller Dashboard or Point of Sale.\n   */\n  segment?: CustomerSegment;\n}\n\nexport const retrieveCustomerSegmentResponseSchema: Schema<RetrieveCustomerSegmentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    segment: ['segment', optional(lazy(() => customerSegmentSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  ListCustomerSegmentsResponse,\n  listCustomerSegmentsResponseSchema,\n} from '../models/listCustomerSegmentsResponse';\nimport {\n  RetrieveCustomerSegmentResponse,\n  retrieveCustomerSegmentResponseSchema,\n} from '../models/retrieveCustomerSegmentResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CustomerSegmentsApi extends BaseApi {\n  /**\n   * Retrieves the list of customer segments of a business.\n   *\n   * @param cursor A pagination cursor returned by previous calls to `ListCustomerSegments`. This cursor is\n   *                         used to retrieve the next set of query results.  For more information, see\n   *                         [Pagination](https://developer.squareup.com/docs/build-basics/common-api-\n   *                         patterns/pagination).\n   * @param limit  The maximum number of results to return in a single page. This limit is advisory. The\n   *                         response might contain more or fewer results. If the specified limit is less than 1 or\n   *                         greater than 50, Square returns a `400 VALUE_TOO_LOW` or `400 VALUE_TOO_HIGH` error. The\n   *                         default value is 50.  For more information, see [Pagination](https://developer.squareup.\n   *                         com/docs/build-basics/common-api-patterns/pagination).\n   * @return Response from the API call\n   */\n  async listCustomerSegments(\n    cursor?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCustomerSegmentsResponse>> {\n    const req = this.createRequest('GET', '/v2/customers/segments');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listCustomerSegmentsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a specific customer segment as identified by the `segment_id` value.\n   *\n   * @param segmentId  The Square-issued ID of the customer segment.\n   * @return Response from the API call\n   */\n  async retrieveCustomerSegment(\n    segmentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCustomerSegmentResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ segmentId: [segmentId, string()] });\n    req.appendTemplatePath`/v2/customers/segments/${mapped.segmentId}`;\n    return req.callAsJson(\n      retrieveCustomerSegmentResponseSchema,\n      requestOptions\n    );\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface DeviceCode {\n  /** The unique id for this device code. */\n  id?: string;\n  /** An optional user-defined name for the device code. */\n  name?: string;\n  /** The unique code that can be used to login. */\n  code?: string;\n  /** The unique id of the device that used this code. Populated when the device is paired up. */\n  deviceId?: string;\n  productType: string;\n  /** The location assigned to this code. */\n  locationId?: string;\n  /** DeviceCode.Status enum. */\n  status?: string;\n  /** When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format. */\n  pairBy?: string;\n  /** When this DeviceCode was created. Timestamp in RFC 3339 format. */\n  createdAt?: string;\n  /** When this DeviceCode's status was last changed. Timestamp in RFC 3339 format. */\n  statusChangedAt?: string;\n  /** When this DeviceCode was paired. Timestamp in RFC 3339 format. */\n  pairedAt?: string;\n}\n\nexport const deviceCodeSchema: Schema<DeviceCode> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  code: ['code', optional(string())],\n  deviceId: ['device_id', optional(string())],\n  productType: ['product_type', string()],\n  locationId: ['location_id', optional(string())],\n  status: ['status', optional(string())],\n  pairBy: ['pair_by', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  statusChangedAt: ['status_changed_at', optional(string())],\n  pairedAt: ['paired_at', optional(string())],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { DeviceCode, deviceCodeSchema } from './deviceCode';\n\nexport interface CreateDeviceCodeRequest {\n  /**\n   * A unique string that identifies this CreateDeviceCode request. Keys can\n   * be any valid string but must be unique for every CreateDeviceCode request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  deviceCode: DeviceCode;\n}\n\nexport const createDeviceCodeRequestSchema: Schema<CreateDeviceCodeRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    deviceCode: ['device_code', lazy(() => deviceCodeSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DeviceCode, deviceCodeSchema } from './deviceCode';\nimport { Error, errorSchema } from './error';\n\nexport interface CreateDeviceCodeResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  deviceCode?: DeviceCode;\n}\n\nexport const createDeviceCodeResponseSchema: Schema<CreateDeviceCodeResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deviceCode: ['device_code', optional(lazy(() => deviceCodeSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DeviceCode, deviceCodeSchema } from './deviceCode';\nimport { Error, errorSchema } from './error';\n\nexport interface GetDeviceCodeResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  deviceCode?: DeviceCode;\n}\n\nexport const getDeviceCodeResponseSchema: Schema<GetDeviceCodeResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deviceCode: ['device_code', optional(lazy(() => deviceCodeSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { DeviceCode, deviceCodeSchema } from './deviceCode';\nimport { Error, errorSchema } from './error';\n\nexport interface ListDeviceCodesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The queried DeviceCode. */\n  deviceCodes?: DeviceCode[];\n  /**\n   * A pagination cursor to retrieve the next set of results for your\n   * original query to the endpoint. This value is present only if the request\n   * succeeded and additional results are available.\n   * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listDeviceCodesResponseSchema: Schema<ListDeviceCodesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deviceCodes: [\n      'device_codes',\n      optional(array(lazy(() => deviceCodeSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateDeviceCodeRequest,\n  createDeviceCodeRequestSchema,\n} from '../models/createDeviceCodeRequest';\nimport {\n  CreateDeviceCodeResponse,\n  createDeviceCodeResponseSchema,\n} from '../models/createDeviceCodeResponse';\nimport {\n  GetDeviceCodeResponse,\n  getDeviceCodeResponseSchema,\n} from '../models/getDeviceCodeResponse';\nimport {\n  ListDeviceCodesResponse,\n  listDeviceCodesResponseSchema,\n} from '../models/listDeviceCodesResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class DevicesApi extends BaseApi {\n  /**\n   * Lists all DeviceCodes associated with the merchant.\n   *\n   * @param cursor       A pagination cursor returned by a previous call to this endpoint. Provide this to\n   *                               retrieve the next set of results for your original query.  See [Paginating\n   *                               results](https://developer.squareup.com/docs/working-with-apis/pagination) for more\n   *                               information.\n   * @param locationId   If specified, only returns DeviceCodes of the specified location. Returns\n   *                               DeviceCodes of all locations if empty.\n   * @param productType  If specified, only returns DeviceCodes targeting the specified product type.\n   *                               Returns DeviceCodes of all product types if empty.\n   * @param status       If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes\n   *                               of status `PAIRED` and `UNPAIRED` if empty.\n   * @return Response from the API call\n   */\n  async listDeviceCodes(\n    cursor?: string,\n    locationId?: string,\n    productType?: string,\n    status?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListDeviceCodesResponse>> {\n    const req = this.createRequest('GET', '/v2/devices/codes');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      locationId: [locationId, optional(string())],\n      productType: [productType, optional(string())],\n      status: [status, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('location_id', mapped.locationId);\n    req.query('product_type', mapped.productType);\n    req.query('status', mapped.status);\n    return req.callAsJson(listDeviceCodesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected\n   * terminal mode.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                       See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createDeviceCode(\n    body: CreateDeviceCodeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateDeviceCodeResponse>> {\n    const req = this.createRequest('POST', '/v2/devices/codes');\n    const mapped = req.prepareArgs({\n      body: [body, createDeviceCodeRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createDeviceCodeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves DeviceCode with the associated ID.\n   *\n   * @param id The unique identifier for the device code.\n   * @return Response from the API call\n   */\n  async getDeviceCode(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetDeviceCodeResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/devices/codes/${mapped.id}`;\n    return req.callAsJson(getDeviceCodeResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** The payment the cardholder disputed. */\nexport interface DisputedPayment {\n  /** Square-generated unique ID of the payment being disputed. */\n  paymentId?: string;\n}\n\nexport const disputedPaymentSchema: Schema<DisputedPayment> = object({\n  paymentId: ['payment_id', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { DisputedPayment, disputedPaymentSchema } from './disputedPayment';\nimport { Money, moneySchema } from './money';\n\n/** Represents a dispute a cardholder initiated with their bank. */\nexport interface Dispute {\n  /** The unique ID for this `Dispute`, generated by Square. */\n  disputeId?: string;\n  /** The unique ID for this `Dispute`, generated by Square. */\n  id?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * The list of possible reasons why a cardholder might initiate a\n   * dispute with their bank.\n   */\n  reason?: string;\n  /** The list of possible dispute states. */\n  state?: string;\n  /** The time when the next action is due, in RFC 3339 format. */\n  dueAt?: string;\n  /** The payment the cardholder disputed. */\n  disputedPayment?: DisputedPayment;\n  /** The IDs of the evidence associated with the dispute. */\n  evidenceIds?: string[];\n  /** Indicates a card's brand, such as `VISA` or `MASTERCARD`. */\n  cardBrand?: string;\n  /** The timestamp when the dispute was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the dispute was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /** The ID of the dispute in the card brand system, generated by the card brand. */\n  brandDisputeId?: string;\n  /** The timestamp when the dispute was reported, in RFC 3339 format. */\n  reportedDate?: string;\n  /** The timestamp when the dispute was reported, in RFC 3339 format. */\n  reportedAt?: string;\n  /** The current version of the `Dispute`. */\n  version?: number;\n  /** The ID of the location where the dispute originated. */\n  locationId?: string;\n}\n\nexport const disputeSchema: Schema<Dispute> = object({\n  disputeId: ['dispute_id', optional(string())],\n  id: ['id', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  reason: ['reason', optional(string())],\n  state: ['state', optional(string())],\n  dueAt: ['due_at', optional(string())],\n  disputedPayment: [\n    'disputed_payment',\n    optional(lazy(() => disputedPaymentSchema)),\n  ],\n  evidenceIds: ['evidence_ids', optional(array(string()))],\n  cardBrand: ['card_brand', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  brandDisputeId: ['brand_dispute_id', optional(string())],\n  reportedDate: ['reported_date', optional(string())],\n  reportedAt: ['reported_at', optional(string())],\n  version: ['version', optional(number())],\n  locationId: ['location_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Dispute, disputeSchema } from './dispute';\nimport { Error, errorSchema } from './error';\n\n/** Defines the fields in an `AcceptDispute` response. */\nexport interface AcceptDisputeResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a dispute a cardholder initiated with their bank. */\n  dispute?: Dispute;\n}\n\nexport const acceptDisputeResponseSchema: Schema<AcceptDisputeResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    dispute: ['dispute', optional(lazy(() => disputeSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Defines the parameters for a `CreateDisputeEvidenceFile` request. */\nexport interface CreateDisputeEvidenceFileRequest {\n  /** The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency). */\n  idempotencyKey: string;\n  /** The type of the dispute evidence. */\n  evidenceType?: string;\n  /**\n   * The MIME type of the uploaded file.\n   * The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.\n   */\n  contentType?: string;\n}\n\nexport const createDisputeEvidenceFileRequestSchema: Schema<CreateDisputeEvidenceFileRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    evidenceType: ['evidence_type', optional(string())],\n    contentType: ['content_type', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** A file to be uploaded as dispute evidence. */\nexport interface DisputeEvidenceFile {\n  /** The file name including the file extension. For example: \"receipt.tiff\". */\n  filename?: string;\n  /** Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats. */\n  filetype?: string;\n}\n\nexport const disputeEvidenceFileSchema: Schema<DisputeEvidenceFile> = object({\n  filename: ['filename', optional(string())],\n  filetype: ['filetype', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  DisputeEvidenceFile,\n  disputeEvidenceFileSchema,\n} from './disputeEvidenceFile';\n\nexport interface DisputeEvidence {\n  /** The Square-generated ID of the evidence. */\n  evidenceId?: string;\n  /** The Square-generated ID of the evidence. */\n  id?: string;\n  /** The ID of the dispute the evidence is associated with. */\n  disputeId?: string;\n  /** A file to be uploaded as dispute evidence. */\n  evidenceFile?: DisputeEvidenceFile;\n  /** Raw text */\n  evidenceText?: string;\n  /** The time when the evidence was uploaded, in RFC 3339 format. */\n  uploadedAt?: string;\n  /** The type of the dispute evidence. */\n  evidenceType?: string;\n}\n\nexport const disputeEvidenceSchema: Schema<DisputeEvidence> = object({\n  evidenceId: ['evidence_id', optional(string())],\n  id: ['id', optional(string())],\n  disputeId: ['dispute_id', optional(string())],\n  evidenceFile: [\n    'evidence_file',\n    optional(lazy(() => disputeEvidenceFileSchema)),\n  ],\n  evidenceText: ['evidence_text', optional(string())],\n  uploadedAt: ['uploaded_at', optional(string())],\n  evidenceType: ['evidence_type', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DisputeEvidence, disputeEvidenceSchema } from './disputeEvidence';\nimport { Error, errorSchema } from './error';\n\n/** Defines the fields in a `CreateDisputeEvidenceFile` response. */\nexport interface CreateDisputeEvidenceFileResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  evidence?: DisputeEvidence;\n}\n\nexport const createDisputeEvidenceFileResponseSchema: Schema<CreateDisputeEvidenceFileResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    evidence: ['evidence', optional(lazy(() => disputeEvidenceSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Defines the parameters for a `CreateDisputeEvidenceText` request. */\nexport interface CreateDisputeEvidenceTextRequest {\n  /** The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency). */\n  idempotencyKey: string;\n  /** The type of the dispute evidence. */\n  evidenceType?: string;\n  /** The evidence string. */\n  evidenceText: string;\n}\n\nexport const createDisputeEvidenceTextRequestSchema: Schema<CreateDisputeEvidenceTextRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    evidenceType: ['evidence_type', optional(string())],\n    evidenceText: ['evidence_text', string()],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DisputeEvidence, disputeEvidenceSchema } from './disputeEvidence';\nimport { Error, errorSchema } from './error';\n\n/** Defines the fields in a `CreateDisputeEvidenceText` response. */\nexport interface CreateDisputeEvidenceTextResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  evidence?: DisputeEvidence;\n}\n\nexport const createDisputeEvidenceTextResponseSchema: Schema<CreateDisputeEvidenceTextResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    evidence: ['evidence', optional(lazy(() => disputeEvidenceSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/** Defines the fields in a `DeleteDisputeEvidence` response. */\nexport interface DeleteDisputeEvidenceResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const deleteDisputeEvidenceResponseSchema: Schema<DeleteDisputeEvidenceResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { DisputeEvidence, disputeEvidenceSchema } from './disputeEvidence';\nimport { Error, errorSchema } from './error';\n\n/** Defines the fields in a `ListDisputeEvidence` response. */\nexport interface ListDisputeEvidenceResponse {\n  /** The list of evidence previously uploaded to the specified dispute. */\n  evidence?: DisputeEvidence[];\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * The pagination cursor to be used in a subsequent request.\n   * If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listDisputeEvidenceResponseSchema: Schema<ListDisputeEvidenceResponse> = object(\n  {\n    evidence: ['evidence', optional(array(lazy(() => disputeEvidenceSchema)))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Dispute, disputeSchema } from './dispute';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a `ListDisputes` response. */\nexport interface ListDisputesResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The list of disputes. */\n  disputes?: Dispute[];\n  /**\n   * The pagination cursor to be used in a subsequent request.\n   * If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listDisputesResponseSchema: Schema<ListDisputesResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  disputes: ['disputes', optional(array(lazy(() => disputeSchema)))],\n  cursor: ['cursor', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DisputeEvidence, disputeEvidenceSchema } from './disputeEvidence';\nimport { Error, errorSchema } from './error';\n\n/** Defines the fields in a `RetrieveDisputeEvidence` response. */\nexport interface RetrieveDisputeEvidenceResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  evidence?: DisputeEvidence;\n}\n\nexport const retrieveDisputeEvidenceResponseSchema: Schema<RetrieveDisputeEvidenceResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    evidence: ['evidence', optional(lazy(() => disputeEvidenceSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Dispute, disputeSchema } from './dispute';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a `RetrieveDispute` response. */\nexport interface RetrieveDisputeResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a dispute a cardholder initiated with their bank. */\n  dispute?: Dispute;\n}\n\nexport const retrieveDisputeResponseSchema: Schema<RetrieveDisputeResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    dispute: ['dispute', optional(lazy(() => disputeSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Dispute, disputeSchema } from './dispute';\nimport { Error, errorSchema } from './error';\n\n/** Defines the fields in a `SubmitEvidence` response. */\nexport interface SubmitEvidenceResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a dispute a cardholder initiated with their bank. */\n  dispute?: Dispute;\n}\n\nexport const submitEvidenceResponseSchema: Schema<SubmitEvidenceResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    dispute: ['dispute', optional(lazy(() => disputeSchema))],\n  }\n);\n","import { ApiResponse, FileWrapper, RequestOptions } from '../core';\nimport {\n  AcceptDisputeResponse,\n  acceptDisputeResponseSchema,\n} from '../models/acceptDisputeResponse';\nimport {\n  CreateDisputeEvidenceFileRequest,\n  createDisputeEvidenceFileRequestSchema,\n} from '../models/createDisputeEvidenceFileRequest';\nimport {\n  CreateDisputeEvidenceFileResponse,\n  createDisputeEvidenceFileResponseSchema,\n} from '../models/createDisputeEvidenceFileResponse';\nimport {\n  CreateDisputeEvidenceTextRequest,\n  createDisputeEvidenceTextRequestSchema,\n} from '../models/createDisputeEvidenceTextRequest';\nimport {\n  CreateDisputeEvidenceTextResponse,\n  createDisputeEvidenceTextResponseSchema,\n} from '../models/createDisputeEvidenceTextResponse';\nimport {\n  DeleteDisputeEvidenceResponse,\n  deleteDisputeEvidenceResponseSchema,\n} from '../models/deleteDisputeEvidenceResponse';\nimport {\n  ListDisputeEvidenceResponse,\n  listDisputeEvidenceResponseSchema,\n} from '../models/listDisputeEvidenceResponse';\nimport {\n  ListDisputesResponse,\n  listDisputesResponseSchema,\n} from '../models/listDisputesResponse';\nimport {\n  RetrieveDisputeEvidenceResponse,\n  retrieveDisputeEvidenceResponseSchema,\n} from '../models/retrieveDisputeEvidenceResponse';\nimport {\n  RetrieveDisputeResponse,\n  retrieveDisputeResponseSchema,\n} from '../models/retrieveDisputeResponse';\nimport {\n  SubmitEvidenceResponse,\n  submitEvidenceResponseSchema,\n} from '../models/submitEvidenceResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class DisputesApi extends BaseApi {\n  /**\n   * Returns a list of disputes associated with a particular account.\n   *\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                              cursor to retrieve the next set of results for the original query. For more\n   *                              information, see [Pagination](https://developer.squareup.\n   *                              com/docs/basics/api101/pagination).\n   * @param states      The dispute states to filter the result. If not specified, the endpoint returns all\n   *                              open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`).\n   * @param locationId  The ID of the location for which to return a list of disputes. If not specified, the\n   *                              endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`,\n   *                              or `LOST`) associated with all locations.\n   * @return Response from the API call\n   */\n  async listDisputes(\n    cursor?: string,\n    states?: string,\n    locationId?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListDisputesResponse>> {\n    const req = this.createRequest('GET', '/v2/disputes');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      states: [states, optional(string())],\n      locationId: [locationId, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('states', mapped.states);\n    req.query('location_id', mapped.locationId);\n    return req.callAsJson(listDisputesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns details about a specific dispute.\n   *\n   * @param disputeId  The ID of the dispute you want more details about.\n   * @return Response from the API call\n   */\n  async retrieveDispute(\n    disputeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveDisputeResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}`;\n    return req.callAsJson(retrieveDisputeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and\n   * updates the dispute state to ACCEPTED.\n   *\n   * Square debits the disputed amount from the seller’s Square account. If the Square account\n   * does not have sufficient funds, Square debits the associated bank account.\n   *\n   * @param disputeId  The ID of the dispute you want to accept.\n   * @return Response from the API call\n   */\n  async acceptDispute(\n    disputeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<AcceptDisputeResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/accept`;\n    return req.callAsJson(acceptDisputeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a list of evidence associated with a dispute.\n   *\n   * @param disputeId  The ID of the dispute.\n   * @param cursor     A pagination cursor returned by a previous call to this endpoint. Provide this cursor\n   *                             to retrieve the next set of results for the original query. For more information, see\n   *                             [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   * @return Response from the API call\n   */\n  async listDisputeEvidence(\n    disputeId: string,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListDisputeEvidenceResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence`;\n    return req.callAsJson(listDisputeEvidenceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Uploads a file to use as evidence in a dispute challenge. The endpoint accepts HTTP\n   * multipart/form-data file uploads in HEIC, HEIF, JPEG, PDF, PNG, and TIFF formats.\n   *\n   * @param disputeId  The ID of the dispute you want to upload evidence\n   *                                                              for.\n   * @param request    Defines the parameters for a\n   *                                                              `CreateDisputeEvidenceFile` request.\n   * @param imageFile\n   * @return Response from the API call\n   */\n  async createDisputeEvidenceFile(\n    disputeId: string,\n    request?: CreateDisputeEvidenceFileRequest,\n    imageFile?: FileWrapper,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateDisputeEvidenceFileResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      request: [request, optional(createDisputeEvidenceFileRequestSchema)],\n    });\n    req.formData({\n      request: JSON.stringify(mapped.request),\n      image_file: imageFile,\n    });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence-files`;\n    return req.callAsJson(\n      createDisputeEvidenceFileResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Uploads text to use as evidence for a dispute challenge.\n   *\n   * @param disputeId    The ID of the dispute you want to upload evidence\n   *                                                                for.\n   * @param body         An object containing the fields to POST for the\n   *                                                                request.  See the corresponding object definition\n   *                                                                for field details.\n   * @return Response from the API call\n   */\n  async createDisputeEvidenceText(\n    disputeId: string,\n    body: CreateDisputeEvidenceTextRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateDisputeEvidenceTextResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      body: [body, createDisputeEvidenceTextRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence-text`;\n    return req.callAsJson(\n      createDisputeEvidenceTextResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Removes specified evidence from a dispute.\n   *\n   * Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after\n   * submitting it to the bank using [SubmitEvidence]($e/Disputes/SubmitEvidence).\n   *\n   * @param disputeId   The ID of the dispute you want to remove evidence from.\n   * @param evidenceId  The ID of the evidence you want to remove.\n   * @return Response from the API call\n   */\n  async deleteDisputeEvidence(\n    disputeId: string,\n    evidenceId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteDisputeEvidenceResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      evidenceId: [evidenceId, string()],\n    });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence/${mapped.evidenceId}`;\n    return req.callAsJson(deleteDisputeEvidenceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns the evidence metadata specified by the evidence ID in the request URL path\n   *\n   * You must maintain a copy of the evidence you upload if you want to reference it later. You cannot\n   * download the evidence after you upload it.\n   *\n   * @param disputeId   The ID of the dispute that you want to retrieve evidence from.\n   * @param evidenceId  The ID of the evidence to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveDisputeEvidence(\n    disputeId: string,\n    evidenceId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveDisputeEvidenceResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      evidenceId: [evidenceId, string()],\n    });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence/${mapped.evidenceId}`;\n    return req.callAsJson(\n      retrieveDisputeEvidenceResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Submits evidence to the cardholder's bank.\n   *\n   * Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded\n   * using the [CreateDisputeEvidenceFile]($e/Disputes/CreateDisputeEvidenceFile) and\n   * [CreateDisputeEvidenceText]($e/Disputes/CreateDisputeEvidenceText) endpoints and\n   * evidence automatically provided by Square, when available.\n   *\n   * @param disputeId  The ID of the dispute that you want to submit evidence for.\n   * @return Response from the API call\n   */\n  async submitEvidence(\n    disputeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SubmitEvidenceResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/submit-evidence`;\n    return req.callAsJson(submitEvidenceResponseSchema, requestOptions);\n  }\n}\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\n/** An employee object that is used by the external API. */\nexport interface Employee {\n  /** UUID for this object. */\n  id?: string;\n  /** The employee's first name. */\n  firstName?: string;\n  /** The employee's last name. */\n  lastName?: string;\n  /** The employee's email address */\n  email?: string;\n  /** The employee's phone number in E.164 format, i.e. \"+12125554250\" */\n  phoneNumber?: string;\n  /** A list of location IDs where this employee has access to. */\n  locationIds?: string[];\n  /** The status of the Employee being retrieved. */\n  status?: string;\n  /**\n   * Whether this employee is the owner of the merchant. Each merchant\n   * has one owner employee, and that employee has full authority over\n   * the account.\n   */\n  isOwner?: boolean;\n  /** A read-only timestamp in RFC 3339 format. */\n  createdAt?: string;\n  /** A read-only timestamp in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const employeeSchema: Schema<Employee> = object({\n  id: ['id', optional(string())],\n  firstName: ['first_name', optional(string())],\n  lastName: ['last_name', optional(string())],\n  email: ['email', optional(string())],\n  phoneNumber: ['phone_number', optional(string())],\n  locationIds: ['location_ids', optional(array(string()))],\n  status: ['status', optional(string())],\n  isOwner: ['is_owner', optional(boolean())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Employee, employeeSchema } from './employee';\nimport { Error, errorSchema } from './error';\n\nexport interface ListEmployeesResponse {\n  employees?: Employee[];\n  /** The token to be used to retrieve the next page of results. */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listEmployeesResponseSchema: Schema<ListEmployeesResponse> = object(\n  {\n    employees: ['employees', optional(array(lazy(() => employeeSchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Employee, employeeSchema } from './employee';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveEmployeeResponse {\n  /** An employee object that is used by the external API. */\n  employee?: Employee;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveEmployeeResponseSchema: Schema<RetrieveEmployeeResponse> = object(\n  {\n    employee: ['employee', optional(lazy(() => employeeSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  ListEmployeesResponse,\n  listEmployeesResponseSchema,\n} from '../models/listEmployeesResponse';\nimport {\n  RetrieveEmployeeResponse,\n  retrieveEmployeeResponseSchema,\n} from '../models/retrieveEmployeeResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class EmployeesApi extends BaseApi {\n  /**\n   * ListEmployees\n   *\n   * @param locationId\n   * @param status      Specifies the EmployeeStatus to filter the employee by.\n   * @param limit       The number of employees to be returned on each page.\n   * @param cursor      The token required to retrieve the specified page of results.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listEmployees(\n    locationId?: string,\n    status?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListEmployeesResponse>> {\n    const req = this.createRequest('GET', '/v2/employees');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, optional(string())],\n      status: [status, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('status', mapped.status);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.deprecated('EmployeesApi.listEmployees');\n    return req.callAsJson(listEmployeesResponseSchema, requestOptions);\n  }\n\n  /**\n   * RetrieveEmployee\n   *\n   * @param id UUID for the employee that was requested.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveEmployee(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveEmployeeResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/employees/${mapped.id}`;\n    req.deprecated('EmployeesApi.retrieveEmployee');\n    return req.callAsJson(retrieveEmployeeResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Describes a gift card activity of the ACTIVATE type. */\nexport interface GiftCardActivityActivate {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * The ID of the order associated with the activity.\n   * This is required if your application uses the Square Orders API.\n   */\n  orderId?: string;\n  /**\n   * The `line_item_uid` of the gift card line item in an order.\n   * This is required if your application uses the Square Orders API.\n   */\n  lineItemUid?: string;\n  /**\n   * If your application does not use the Square Orders API, you can optionally use this field\n   * to associate the gift card activity with a client-side entity.\n   */\n  referenceId?: string;\n  /**\n   * Required if your application does not use the Square Orders API.\n   * This is a list of client-provided payment instrument IDs.\n   * Square uses this information to perform compliance checks.\n   * If you use the Square Orders API, Square has the necessary instrument IDs to perform necessary\n   * compliance checks.\n   */\n  buyerPaymentInstrumentIds?: string[];\n}\n\nexport const giftCardActivityActivateSchema: Schema<GiftCardActivityActivate> = object(\n  {\n    amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n    orderId: ['order_id', optional(string())],\n    lineItemUid: ['line_item_uid', optional(string())],\n    referenceId: ['reference_id', optional(string())],\n    buyerPaymentInstrumentIds: [\n      'buyer_payment_instrument_ids',\n      optional(array(string())),\n    ],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Describes a gift card activity of the ADJUST_DECREMENT type. */\nexport interface GiftCardActivityAdjustDecrement {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  reason: string;\n}\n\nexport const giftCardActivityAdjustDecrementSchema: Schema<GiftCardActivityAdjustDecrement> = object(\n  {\n    amountMoney: ['amount_money', lazy(() => moneySchema)],\n    reason: ['reason', string()],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Describes a gift card activity of the ADJUST_INCREMENT type. */\nexport interface GiftCardActivityAdjustIncrement {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  reason: string;\n}\n\nexport const giftCardActivityAdjustIncrementSchema: Schema<GiftCardActivityAdjustIncrement> = object(\n  {\n    amountMoney: ['amount_money', lazy(() => moneySchema)],\n    reason: ['reason', string()],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Describes a gift card activity of the BLOCK type. */\nexport interface GiftCardActivityBlock {\n  reason: string;\n}\n\nexport const giftCardActivityBlockSchema: Schema<GiftCardActivityBlock> = object(\n  { reason: ['reason', string()] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Describes a gift card activity of the CLEAR_BALANCE type. */\nexport interface GiftCardActivityClearBalance {\n  reason: string;\n}\n\nexport const giftCardActivityClearBalanceSchema: Schema<GiftCardActivityClearBalance> = object(\n  { reason: ['reason', string()] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Describes a gift card activity of the DEACTIVATE type. */\nexport interface GiftCardActivityDeactivate {\n  reason: string;\n}\n\nexport const giftCardActivityDeactivateSchema: Schema<GiftCardActivityDeactivate> = object(\n  { reason: ['reason', string()] }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER\n * (a third-party gift card).\n */\nexport interface GiftCardActivityImport {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n}\n\nexport const giftCardActivityImportSchema: Schema<GiftCardActivityImport> = object(\n  { amountMoney: ['amount_money', lazy(() => moneySchema)] }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER */\nexport interface GiftCardActivityImportReversal {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n}\n\nexport const giftCardActivityImportReversalSchema: Schema<GiftCardActivityImportReversal> = object(\n  { amountMoney: ['amount_money', lazy(() => moneySchema)] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Present only when `GiftCardActivityType` is LOAD. */\nexport interface GiftCardActivityLoad {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * The `order_id` of the order associated with the activity.\n   * It is populated along with `line_item_uid` and is required if using the Square Orders API.\n   */\n  orderId?: string;\n  /**\n   * The `line_item_uid` of the gift card’s line item in the order associated with the activity.\n   * It is populated along with `order_id` and is required if using the Square Orders API.\n   */\n  lineItemUid?: string;\n  /**\n   * A client-specified ID to associate an entity, in another system, with this gift card\n   * activity. This can be used to track the order or payment related information when the Square Orders\n   * API is not being used.\n   */\n  referenceId?: string;\n  /**\n   * If you are not using the Orders API, this field is required because it is used to identify a buyer\n   * to perform compliance checks.\n   */\n  buyerPaymentInstrumentIds?: string[];\n}\n\nexport const giftCardActivityLoadSchema: Schema<GiftCardActivityLoad> = object({\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  orderId: ['order_id', optional(string())],\n  lineItemUid: ['line_item_uid', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  buyerPaymentInstrumentIds: [\n    'buyer_payment_instrument_ids',\n    optional(array(string())),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Present only when `GiftCardActivityType` is REDEEM. */\nexport interface GiftCardActivityRedeem {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * When the Square Payments API is used, Redeem is not called on the Gift Cards API.\n   * However, when Square reads a Redeem activity from the Gift Cards API, developers need to know the\n   * associated `payment_id`.\n   */\n  paymentId?: string;\n  /**\n   * A client-specified ID to associate an entity, in another system, with this gift card\n   * activity. This can be used to track the order or payment related information when the Square Orders\n   * API is not being used.\n   */\n  referenceId?: string;\n}\n\nexport const giftCardActivityRedeemSchema: Schema<GiftCardActivityRedeem> = object(\n  {\n    amountMoney: ['amount_money', lazy(() => moneySchema)],\n    paymentId: ['payment_id', optional(string())],\n    referenceId: ['reference_id', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Present only when `GiftCardActivityType` is REFUND. */\nexport interface GiftCardActivityRefund {\n  /**\n   * The ID for the Redeem activity that needs to be refunded. Hence, the activity it\n   * refers to has to be of the REDEEM type.\n   */\n  redeemActivityId: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * A client-specified ID to associate an entity, in another system, with this gift card\n   * activity. This can be used to track the order or payment related information when the Square Orders\n   * API is not being used.\n   */\n  referenceId?: string;\n  /**\n   * When the Square Payments API is used, Refund is not called on the Gift Cards API.\n   * However, when Square reads a Refund activity from the Gift Cards API, the developer needs to know the\n   * ID of the payment (made using this gift card) that is being refunded.\n   */\n  paymentId?: string;\n}\n\nexport const giftCardActivityRefundSchema: Schema<GiftCardActivityRefund> = object(\n  {\n    redeemActivityId: ['redeem_activity_id', string()],\n    amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n    referenceId: ['reference_id', optional(string())],\n    paymentId: ['payment_id', optional(string())],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Present only when `GiftCardActivityType` is UNBLOCK. */\nexport interface GiftCardActivityUnblock {\n  reason: string;\n}\n\nexport const giftCardActivityUnblockSchema: Schema<GiftCardActivityUnblock> = object(\n  { reason: ['reason', string()] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND. */\nexport interface GiftCardActivityUnlinkedActivityRefund {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * A client-specified ID to associate an entity, in another system, with this gift card\n   * activity. This can be used to track the order or payment related information when the Square Payments\n   * API is not being used.\n   */\n  referenceId?: string;\n  /**\n   * When using the Square Payments API, the ID of the payment that was refunded to this gift\n   * card.\n   */\n  paymentId?: string;\n}\n\nexport const giftCardActivityUnlinkedActivityRefundSchema: Schema<GiftCardActivityUnlinkedActivityRefund> = object(\n  {\n    amountMoney: ['amount_money', lazy(() => moneySchema)],\n    referenceId: ['reference_id', optional(string())],\n    paymentId: ['payment_id', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  GiftCardActivityActivate,\n  giftCardActivityActivateSchema,\n} from './giftCardActivityActivate';\nimport {\n  GiftCardActivityAdjustDecrement,\n  giftCardActivityAdjustDecrementSchema,\n} from './giftCardActivityAdjustDecrement';\nimport {\n  GiftCardActivityAdjustIncrement,\n  giftCardActivityAdjustIncrementSchema,\n} from './giftCardActivityAdjustIncrement';\nimport {\n  GiftCardActivityBlock,\n  giftCardActivityBlockSchema,\n} from './giftCardActivityBlock';\nimport {\n  GiftCardActivityClearBalance,\n  giftCardActivityClearBalanceSchema,\n} from './giftCardActivityClearBalance';\nimport {\n  GiftCardActivityDeactivate,\n  giftCardActivityDeactivateSchema,\n} from './giftCardActivityDeactivate';\nimport {\n  GiftCardActivityImport,\n  giftCardActivityImportSchema,\n} from './giftCardActivityImport';\nimport {\n  GiftCardActivityImportReversal,\n  giftCardActivityImportReversalSchema,\n} from './giftCardActivityImportReversal';\nimport {\n  GiftCardActivityLoad,\n  giftCardActivityLoadSchema,\n} from './giftCardActivityLoad';\nimport {\n  GiftCardActivityRedeem,\n  giftCardActivityRedeemSchema,\n} from './giftCardActivityRedeem';\nimport {\n  GiftCardActivityRefund,\n  giftCardActivityRefundSchema,\n} from './giftCardActivityRefund';\nimport {\n  GiftCardActivityUnblock,\n  giftCardActivityUnblockSchema,\n} from './giftCardActivityUnblock';\nimport {\n  GiftCardActivityUnlinkedActivityRefund,\n  giftCardActivityUnlinkedActivityRefundSchema,\n} from './giftCardActivityUnlinkedActivityRefund';\nimport { Money, moneySchema } from './money';\n\n/** Represents an action performed on a gift card that affects its state or balance. */\nexport interface GiftCardActivity {\n  /** The unique ID of the gift card activity. */\n  id?: string;\n  /** Indicates the gift card activity type. */\n  type: string;\n  /** The ID of the location at which the activity occurred. */\n  locationId: string;\n  /** The timestamp when the gift card activity was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The gift card ID. The ID is not required if a GAN is present. */\n  giftCardId?: string;\n  /** The gift card GAN. The GAN is not required if `gift_card_id` is present. */\n  giftCardGan?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  giftCardBalanceMoney?: Money;\n  /** Present only when `GiftCardActivityType` is LOAD. */\n  loadActivityDetails?: GiftCardActivityLoad;\n  /** Describes a gift card activity of the ACTIVATE type. */\n  activateActivityDetails?: GiftCardActivityActivate;\n  /** Present only when `GiftCardActivityType` is REDEEM. */\n  redeemActivityDetails?: GiftCardActivityRedeem;\n  /** Describes a gift card activity of the CLEAR_BALANCE type. */\n  clearBalanceActivityDetails?: GiftCardActivityClearBalance;\n  /** Describes a gift card activity of the DEACTIVATE type. */\n  deactivateActivityDetails?: GiftCardActivityDeactivate;\n  /** Describes a gift card activity of the ADJUST_INCREMENT type. */\n  adjustIncrementActivityDetails?: GiftCardActivityAdjustIncrement;\n  /** Describes a gift card activity of the ADJUST_DECREMENT type. */\n  adjustDecrementActivityDetails?: GiftCardActivityAdjustDecrement;\n  /** Present only when `GiftCardActivityType` is REFUND. */\n  refundActivityDetails?: GiftCardActivityRefund;\n  /** Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND. */\n  unlinkedActivityRefundActivityDetails?: GiftCardActivityUnlinkedActivityRefund;\n  /**\n   * Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER\n   * (a third-party gift card).\n   */\n  importActivityDetails?: GiftCardActivityImport;\n  /** Describes a gift card activity of the BLOCK type. */\n  blockActivityDetails?: GiftCardActivityBlock;\n  /** Present only when `GiftCardActivityType` is UNBLOCK. */\n  unblockActivityDetails?: GiftCardActivityUnblock;\n  /** Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER */\n  importReversalActivityDetails?: GiftCardActivityImportReversal;\n}\n\nexport const giftCardActivitySchema: Schema<GiftCardActivity> = object({\n  id: ['id', optional(string())],\n  type: ['type', string()],\n  locationId: ['location_id', string()],\n  createdAt: ['created_at', optional(string())],\n  giftCardId: ['gift_card_id', optional(string())],\n  giftCardGan: ['gift_card_gan', optional(string())],\n  giftCardBalanceMoney: [\n    'gift_card_balance_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  loadActivityDetails: [\n    'load_activity_details',\n    optional(lazy(() => giftCardActivityLoadSchema)),\n  ],\n  activateActivityDetails: [\n    'activate_activity_details',\n    optional(lazy(() => giftCardActivityActivateSchema)),\n  ],\n  redeemActivityDetails: [\n    'redeem_activity_details',\n    optional(lazy(() => giftCardActivityRedeemSchema)),\n  ],\n  clearBalanceActivityDetails: [\n    'clear_balance_activity_details',\n    optional(lazy(() => giftCardActivityClearBalanceSchema)),\n  ],\n  deactivateActivityDetails: [\n    'deactivate_activity_details',\n    optional(lazy(() => giftCardActivityDeactivateSchema)),\n  ],\n  adjustIncrementActivityDetails: [\n    'adjust_increment_activity_details',\n    optional(lazy(() => giftCardActivityAdjustIncrementSchema)),\n  ],\n  adjustDecrementActivityDetails: [\n    'adjust_decrement_activity_details',\n    optional(lazy(() => giftCardActivityAdjustDecrementSchema)),\n  ],\n  refundActivityDetails: [\n    'refund_activity_details',\n    optional(lazy(() => giftCardActivityRefundSchema)),\n  ],\n  unlinkedActivityRefundActivityDetails: [\n    'unlinked_activity_refund_activity_details',\n    optional(lazy(() => giftCardActivityUnlinkedActivityRefundSchema)),\n  ],\n  importActivityDetails: [\n    'import_activity_details',\n    optional(lazy(() => giftCardActivityImportSchema)),\n  ],\n  blockActivityDetails: [\n    'block_activity_details',\n    optional(lazy(() => giftCardActivityBlockSchema)),\n  ],\n  unblockActivityDetails: [\n    'unblock_activity_details',\n    optional(lazy(() => giftCardActivityUnblockSchema)),\n  ],\n  importReversalActivityDetails: [\n    'import_reversal_activity_details',\n    optional(lazy(() => giftCardActivityImportReversalSchema)),\n  ],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { GiftCardActivity, giftCardActivitySchema } from './giftCardActivity';\n\n/** A request to create a gift card activity. */\nexport interface CreateGiftCardActivityRequest {\n  /** A unique string that identifies the `CreateGiftCardActivity` request. */\n  idempotencyKey: string;\n  /** Represents an action performed on a gift card that affects its state or balance. */\n  giftCardActivity: GiftCardActivity;\n}\n\nexport const createGiftCardActivityRequestSchema: Schema<CreateGiftCardActivityRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    giftCardActivity: [\n      'gift_card_activity',\n      lazy(() => giftCardActivitySchema),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCardActivity, giftCardActivitySchema } from './giftCardActivity';\n\n/**\n * A response that contains a `GiftCardActivity` that was created.\n * The response might contain a set of `Error` objects if the request resulted in errors.\n */\nexport interface CreateGiftCardActivityResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents an action performed on a gift card that affects its state or balance. */\n  giftCardActivity?: GiftCardActivity;\n}\n\nexport const createGiftCardActivityResponseSchema: Schema<CreateGiftCardActivityResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCardActivity: [\n      'gift_card_activity',\n      optional(lazy(() => giftCardActivitySchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCardActivity, giftCardActivitySchema } from './giftCardActivity';\n\n/**\n * A response that contains a list of `GiftCardActivity` objects. If the request resulted in errors,\n * the response contains a set of `Error` objects.\n */\nexport interface ListGiftCardActivitiesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The requested gift card activities or an empty object if none are found. */\n  giftCardActivities?: GiftCardActivity[];\n  /**\n   * When a response is truncated, it includes a cursor that you can use in a\n   * subsequent request to retrieve the next set of activities. If a cursor is not present, this is\n   * the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listGiftCardActivitiesResponseSchema: Schema<ListGiftCardActivitiesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCardActivities: [\n      'gift_card_activities',\n      optional(array(lazy(() => giftCardActivitySchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateGiftCardActivityRequest,\n  createGiftCardActivityRequestSchema,\n} from '../models/createGiftCardActivityRequest';\nimport {\n  CreateGiftCardActivityResponse,\n  createGiftCardActivityResponseSchema,\n} from '../models/createGiftCardActivityResponse';\nimport {\n  ListGiftCardActivitiesResponse,\n  listGiftCardActivitiesResponseSchema,\n} from '../models/listGiftCardActivitiesResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class GiftCardActivitiesApi extends BaseApi {\n  /**\n   * Lists gift card activities. By default, you get gift card activities for all\n   * gift cards in the seller's account. You can optionally specify query parameters to\n   * filter the list. For example, you can get a list of gift card activities for a gift card,\n   * for all gift cards in a specific region, or for activities within a time window.\n   *\n   * @param giftCardId   If a gift card ID is provided, the endpoint returns activities related  to the\n   *                               specified gift card. Otherwise, the endpoint returns all gift card activities for\n   *                               the seller.\n   * @param type         If a [type]($m/GiftCardActivityType) is provided, the endpoint returns gift card\n   *                               activities of the specified type.  Otherwise, the endpoint returns all types of gift\n   *                               card activities.\n   * @param locationId   If a location ID is provided, the endpoint returns gift card activities for the\n   *                               specified location.  Otherwise, the endpoint returns gift card activities for all\n   *                               locations.\n   * @param beginTime    The timestamp for the beginning of the reporting period, in RFC 3339 format. This\n   *                               start time is inclusive. The default value is the current time minus one year.\n   * @param endTime      The timestamp for the end of the reporting period, in RFC 3339 format. This end\n   *                               time is inclusive. The default value is the current time.\n   * @param limit        If a limit is provided, the endpoint returns the specified number  of results (or\n   *                               fewer) per page. The maximum value is 100. The default value is 50. For more\n   *                               information, see [Pagination](https://developer.squareup.com/docs/working-with-\n   *                               apis/pagination).\n   * @param cursor       A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                               cursor to retrieve the next set of results for the original query. If a cursor is\n   *                               not provided, the endpoint returns the first page of the results. For more\n   *                               information, see [Pagination](https://developer.squareup.com/docs/working-with-\n   *                               apis/pagination).\n   * @param sortOrder    The order in which the endpoint returns the activities, based on `created_at`. -\n   *                               `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).\n   * @return Response from the API call\n   */\n  async listGiftCardActivities(\n    giftCardId?: string,\n    type?: string,\n    locationId?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    cursor?: string,\n    sortOrder?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListGiftCardActivitiesResponse>> {\n    const req = this.createRequest('GET', '/v2/gift-cards/activities');\n    const mapped = req.prepareArgs({\n      giftCardId: [giftCardId, optional(string())],\n      type: [type, optional(string())],\n      locationId: [locationId, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n    });\n    req.query('gift_card_id', mapped.giftCardId);\n    req.query('type', mapped.type);\n    req.query('location_id', mapped.locationId);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.query('sort_order', mapped.sortOrder);\n    return req.callAsJson(listGiftCardActivitiesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a gift card activity. For more information, see\n   * [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-\n   * api#giftcardactivity) and\n   * [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-\n   * api#using-activated-gift-cards).\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                             request.  See the corresponding object definition for\n   *                                                             field details.\n   * @return Response from the API call\n   */\n  async createGiftCardActivity(\n    body: CreateGiftCardActivityRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateGiftCardActivityResponse>> {\n    const req = this.createRequest('POST', '/v2/gift-cards/activities');\n    const mapped = req.prepareArgs({\n      body: [body, createGiftCardActivityRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createGiftCardActivityResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents a Square gift card. */\nexport interface GiftCard {\n  /** The Square-assigned ID of the gift card. */\n  id?: string;\n  /** Indicates the gift card type. */\n  type: string;\n  /**\n   * Indicates the source that generated the gift card\n   * account number (GAN).\n   */\n  ganSource?: string;\n  /** Indicates the gift card state. */\n  state?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  balanceMoney?: Money;\n  /** The gift card account number. */\n  gan?: string;\n  /**\n   * The timestamp when the gift card was created, in RFC 3339 format.\n   * In the case of a digital gift card, it is the time when you create a card\n   * (using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).\n   * In the case of a plastic gift card, it is the time when Square associates the card with the\n   * seller at the time of activation.\n   */\n  createdAt?: string;\n  /** The IDs of the customers to whom this gift card is linked. */\n  customerIds?: string[];\n}\n\nexport const giftCardSchema: Schema<GiftCard> = object({\n  id: ['id', optional(string())],\n  type: ['type', string()],\n  ganSource: ['gan_source', optional(string())],\n  state: ['state', optional(string())],\n  balanceMoney: ['balance_money', optional(lazy(() => moneySchema))],\n  gan: ['gan', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  customerIds: ['customer_ids', optional(array(string()))],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { GiftCard, giftCardSchema } from './giftCard';\n\n/** A request to create a gift card. */\nexport interface CreateGiftCardRequest {\n  /** A unique string that identifies the `CreateGiftCard` request. */\n  idempotencyKey: string;\n  /** The location ID where the gift card that will be created should be registered. */\n  locationId: string;\n  /** Represents a Square gift card. */\n  giftCard: GiftCard;\n}\n\nexport const createGiftCardRequestSchema: Schema<CreateGiftCardRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    locationId: ['location_id', string()],\n    giftCard: ['gift_card', lazy(() => giftCardSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCard, giftCardSchema } from './giftCard';\n\n/**\n * A response that contains a `GiftCard`. The response might contain a set of `Error` objects if the request\n * resulted in errors.\n */\nexport interface CreateGiftCardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square gift card. */\n  giftCard?: GiftCard;\n}\n\nexport const createGiftCardResponseSchema: Schema<CreateGiftCardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCard: ['gift_card', optional(lazy(() => giftCardSchema))],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** A request to link a customer to a gift card. */\nexport interface LinkCustomerToGiftCardRequest {\n  /** The ID of the customer to link to the gift card. */\n  customerId: string;\n}\n\nexport const linkCustomerToGiftCardRequestSchema: Schema<LinkCustomerToGiftCardRequest> = object(\n  { customerId: ['customer_id', string()] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCard, giftCardSchema } from './giftCard';\n\n/**\n * A response that contains the linked `GiftCard` object. If the request resulted in errors,\n * the response contains a set of `Error` objects.\n */\nexport interface LinkCustomerToGiftCardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square gift card. */\n  giftCard?: GiftCard;\n}\n\nexport const linkCustomerToGiftCardResponseSchema: Schema<LinkCustomerToGiftCardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCard: ['gift_card', optional(lazy(() => giftCardSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCard, giftCardSchema } from './giftCard';\n\n/**\n * A response that contains a list of `GiftCard` objects. If the request resulted in errors,\n * the response contains a set of `Error` objects.\n */\nexport interface ListGiftCardsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The requested gift cards or an empty object if none are found. */\n  giftCards?: GiftCard[];\n  /**\n   * When a response is truncated, it includes a cursor that you can use in a\n   * subsequent request to retrieve the next set of gift cards. If a cursor is not present, this is\n   * the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listGiftCardsResponseSchema: Schema<ListGiftCardsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCards: ['gift_cards', optional(array(lazy(() => giftCardSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** A request to retrieve gift cards by their GANs. */\nexport interface RetrieveGiftCardFromGANRequest {\n  /**\n   * The gift card account number (GAN) of the gift card to retrieve.\n   * The maximum length of a GAN is 255 digits to account for third-party GANs that have been imported.\n   * Square-issued gift cards have 16-digit GANs.\n   */\n  gan: string;\n}\n\nexport const retrieveGiftCardFromGANRequestSchema: Schema<RetrieveGiftCardFromGANRequest> = object(\n  { gan: ['gan', string()] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCard, giftCardSchema } from './giftCard';\n\n/**\n * A response that contains a `GiftCard`. This response might contain a set of `Error` objects\n * if the request resulted in errors.\n */\nexport interface RetrieveGiftCardFromGANResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square gift card. */\n  giftCard?: GiftCard;\n}\n\nexport const retrieveGiftCardFromGANResponseSchema: Schema<RetrieveGiftCardFromGANResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCard: ['gift_card', optional(lazy(() => giftCardSchema))],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** A request to retrieve a gift card by using a payment token. */\nexport interface RetrieveGiftCardFromNonceRequest {\n  /**\n   * The payment token of the gift card to retrieve. Payment tokens are generated by the\n   * Web Payments SDK or In-App Payments SDK.\n   */\n  nonce: string;\n}\n\nexport const retrieveGiftCardFromNonceRequestSchema: Schema<RetrieveGiftCardFromNonceRequest> = object(\n  { nonce: ['nonce', string()] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCard, giftCardSchema } from './giftCard';\n\n/**\n * A response that contains a `GiftCard` object. If the request resulted in errors,\n * the response contains a set of `Error` objects.\n */\nexport interface RetrieveGiftCardFromNonceResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square gift card. */\n  giftCard?: GiftCard;\n}\n\nexport const retrieveGiftCardFromNonceResponseSchema: Schema<RetrieveGiftCardFromNonceResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCard: ['gift_card', optional(lazy(() => giftCardSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCard, giftCardSchema } from './giftCard';\n\n/**\n * A response that contains a `GiftCard`. The response might contain a set of `Error` objects\n * if the request resulted in errors.\n */\nexport interface RetrieveGiftCardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square gift card. */\n  giftCard?: GiftCard;\n}\n\nexport const retrieveGiftCardResponseSchema: Schema<RetrieveGiftCardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCard: ['gift_card', optional(lazy(() => giftCardSchema))],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** A request to unlink a customer from a gift card. */\nexport interface UnlinkCustomerFromGiftCardRequest {\n  /** The ID of the customer to unlink from the gift card. */\n  customerId: string;\n}\n\nexport const unlinkCustomerFromGiftCardRequestSchema: Schema<UnlinkCustomerFromGiftCardRequest> = object(\n  { customerId: ['customer_id', string()] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { GiftCard, giftCardSchema } from './giftCard';\n\n/**\n * A response that contains the unlinked `GiftCard` object. If the request resulted in errors,\n * the response contains a set of `Error` objects.\n */\nexport interface UnlinkCustomerFromGiftCardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a Square gift card. */\n  giftCard?: GiftCard;\n}\n\nexport const unlinkCustomerFromGiftCardResponseSchema: Schema<UnlinkCustomerFromGiftCardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    giftCard: ['gift_card', optional(lazy(() => giftCardSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateGiftCardRequest,\n  createGiftCardRequestSchema,\n} from '../models/createGiftCardRequest';\nimport {\n  CreateGiftCardResponse,\n  createGiftCardResponseSchema,\n} from '../models/createGiftCardResponse';\nimport {\n  LinkCustomerToGiftCardRequest,\n  linkCustomerToGiftCardRequestSchema,\n} from '../models/linkCustomerToGiftCardRequest';\nimport {\n  LinkCustomerToGiftCardResponse,\n  linkCustomerToGiftCardResponseSchema,\n} from '../models/linkCustomerToGiftCardResponse';\nimport {\n  ListGiftCardsResponse,\n  listGiftCardsResponseSchema,\n} from '../models/listGiftCardsResponse';\nimport {\n  RetrieveGiftCardFromGANRequest,\n  retrieveGiftCardFromGANRequestSchema,\n} from '../models/retrieveGiftCardFromGANRequest';\nimport {\n  RetrieveGiftCardFromGANResponse,\n  retrieveGiftCardFromGANResponseSchema,\n} from '../models/retrieveGiftCardFromGANResponse';\nimport {\n  RetrieveGiftCardFromNonceRequest,\n  retrieveGiftCardFromNonceRequestSchema,\n} from '../models/retrieveGiftCardFromNonceRequest';\nimport {\n  RetrieveGiftCardFromNonceResponse,\n  retrieveGiftCardFromNonceResponseSchema,\n} from '../models/retrieveGiftCardFromNonceResponse';\nimport {\n  RetrieveGiftCardResponse,\n  retrieveGiftCardResponseSchema,\n} from '../models/retrieveGiftCardResponse';\nimport {\n  UnlinkCustomerFromGiftCardRequest,\n  unlinkCustomerFromGiftCardRequestSchema,\n} from '../models/unlinkCustomerFromGiftCardRequest';\nimport {\n  UnlinkCustomerFromGiftCardResponse,\n  unlinkCustomerFromGiftCardResponseSchema,\n} from '../models/unlinkCustomerFromGiftCardResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class GiftCardsApi extends BaseApi {\n  /**\n   * Lists all gift cards. You can specify optional filters to retrieve\n   * a subset of the gift cards.\n   *\n   * @param type        If a [type]($m/GiftCardType) is provided, the endpoint returns gift cards of the\n   *                              specified type. Otherwise, the endpoint returns gift cards of all types.\n   * @param state       If a [state]($m/GiftCardStatus) is provided, the endpoint returns the gift cards in\n   *                              the specified state. Otherwise, the endpoint returns the gift cards of all states.\n   * @param limit       If a limit is provided, the endpoint returns only the specified number of results\n   *                              per page. The maximum value is 50. The default value is 30. For more information, see\n   *                              [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                              cursor to retrieve the next set of results for the original query. If a cursor is not\n   *                              provided, the endpoint returns the first page of the results.  For more information,\n   *                              see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   * @param customerId  If a customer ID is provided, the endpoint returns only the gift cards linked to the\n   *                              specified customer.\n   * @return Response from the API call\n   */\n  async listGiftCards(\n    type?: string,\n    state?: string,\n    limit?: number,\n    cursor?: string,\n    customerId?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListGiftCardsResponse>> {\n    const req = this.createRequest('GET', '/v2/gift-cards');\n    const mapped = req.prepareArgs({\n      type: [type, optional(string())],\n      state: [state, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n      customerId: [customerId, optional(string())],\n    });\n    req.query('type', mapped.type);\n    req.query('state', mapped.state);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.query('customer_id', mapped.customerId);\n    return req.callAsJson(listGiftCardsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift\n   * card before\n   * it can be used for payment. For more information, see\n   * [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-\n   * square-gift-cards).\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createGiftCard(\n    body: CreateGiftCardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateGiftCardResponse>> {\n    const req = this.createRequest('POST', '/v2/gift-cards');\n    const mapped = req.prepareArgs({\n      body: [body, createGiftCardRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createGiftCardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a gift card using the gift card account number (GAN).\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                              request.  See the corresponding object definition for\n   *                                                              field details.\n   * @return Response from the API call\n   */\n  async retrieveGiftCardFromGAN(\n    body: RetrieveGiftCardFromGANRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveGiftCardFromGANResponse>> {\n    const req = this.createRequest('POST', '/v2/gift-cards/from-gan');\n    const mapped = req.prepareArgs({\n      body: [body, retrieveGiftCardFromGANRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      retrieveGiftCardFromGANResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves a gift card using a secure payment token that represents the gift card.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                                request.  See the corresponding object definition\n   *                                                                for field details.\n   * @return Response from the API call\n   */\n  async retrieveGiftCardFromNonce(\n    body: RetrieveGiftCardFromNonceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveGiftCardFromNonceResponse>> {\n    const req = this.createRequest('POST', '/v2/gift-cards/from-nonce');\n    const mapped = req.prepareArgs({\n      body: [body, retrieveGiftCardFromNonceRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      retrieveGiftCardFromNonceResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Links a customer to a gift card, which is also referred to as adding a card on file.\n   *\n   * @param giftCardId   The ID of the gift card to be linked.\n   * @param body         An object containing the fields to POST for the\n   *                                                             request.  See the corresponding object definition for\n   *                                                             field details.\n   * @return Response from the API call\n   */\n  async linkCustomerToGiftCard(\n    giftCardId: string,\n    body: LinkCustomerToGiftCardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<LinkCustomerToGiftCardResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      giftCardId: [giftCardId, string()],\n      body: [body, linkCustomerToGiftCardRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/gift-cards/${mapped.giftCardId}/link-customer`;\n    return req.callAsJson(linkCustomerToGiftCardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Unlinks a customer from a gift card, which is also referred to as removing a card on file.\n   *\n   * @param giftCardId   The ID of the gift card to be unlinked.\n   * @param body         An object containing the fields to POST for the\n   *                                                                 request.  See the corresponding object definition\n   *                                                                 for field details.\n   * @return Response from the API call\n   */\n  async unlinkCustomerFromGiftCard(\n    giftCardId: string,\n    body: UnlinkCustomerFromGiftCardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UnlinkCustomerFromGiftCardResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      giftCardId: [giftCardId, string()],\n      body: [body, unlinkCustomerFromGiftCardRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/gift-cards/${mapped.giftCardId}/unlink-customer`;\n    return req.callAsJson(\n      unlinkCustomerFromGiftCardResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves a gift card using its ID.\n   *\n   * @param id The ID of the gift card to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveGiftCard(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveGiftCardResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/gift-cards/${mapped.id}`;\n    return req.callAsJson(retrieveGiftCardResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface InventoryAdjustmentGroup {\n  /**\n   * A unique ID generated by Square for the\n   * `InventoryAdjustmentGroup`.\n   */\n  id?: string;\n  /** The inventory adjustment of the composed variation. */\n  rootAdjustmentId?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  fromState?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  toState?: string;\n}\n\nexport const inventoryAdjustmentGroupSchema: Schema<InventoryAdjustmentGroup> = object(\n  {\n    id: ['id', optional(string())],\n    rootAdjustmentId: ['root_adjustment_id', optional(string())],\n    fromState: ['from_state', optional(string())],\n    toState: ['to_state', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  InventoryAdjustmentGroup,\n  inventoryAdjustmentGroupSchema,\n} from './inventoryAdjustmentGroup';\nimport { Money, moneySchema } from './money';\nimport {\n  SourceApplication,\n  sourceApplicationSchema,\n} from './sourceApplication';\n\n/**\n * Represents a change in state or quantity of product inventory at a\n * particular time and location.\n */\nexport interface InventoryAdjustment {\n  /**\n   * A unique ID generated by Square for the\n   * `InventoryAdjustment`.\n   */\n  id?: string;\n  /**\n   * An optional ID provided by the application to tie the\n   * `InventoryAdjustment` to an external\n   * system.\n   */\n  referenceId?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  fromState?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  toState?: string;\n  /**\n   * The Square-generated ID of the [Location]($m/Location) where the related\n   * quantity of items is being tracked.\n   */\n  locationId?: string;\n  /**\n   * The Square-generated ID of the\n   * [CatalogObject]($m/CatalogObject) being tracked.\n   */\n  catalogObjectId?: string;\n  /**\n   * The [type]($m/CatalogObjectType) of the [CatalogObject]($m/CatalogObject) being tracked.\n   * The Inventory API supports setting and reading the `\"catalog_object_type\": \"ITEM_VARIATION\"` field value.\n   * In addition, it can also read the `\"catalog_object_type\": \"ITEM\"` field value that is set by the Square Restaurants app.\n   */\n  catalogObjectType?: string;\n  /**\n   * The number of items affected by the adjustment as a decimal string.\n   * Can support up to 5 digits after the decimal point.\n   */\n  quantity?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalPriceMoney?: Money;\n  /**\n   * A client-generated RFC 3339-formatted timestamp that indicates when\n   * the inventory adjustment took place. For inventory adjustment updates, the `occurred_at`\n   * timestamp cannot be older than 24 hours or in the future relative to the\n   * time of the request.\n   */\n  occurredAt?: string;\n  /** An RFC 3339-formatted timestamp that indicates when the inventory adjustment is received. */\n  createdAt?: string;\n  /** Provides information about the application used to generate a change. */\n  source?: SourceApplication;\n  /**\n   * The Square-generated ID of the [Employee]($m/Employee) responsible for the\n   * inventory adjustment.\n   */\n  employeeId?: string;\n  /**\n   * The Square-generated ID of the [Team Member]($m/TeamMember) responsible for the\n   * inventory adjustment.\n   */\n  teamMemberId?: string;\n  /**\n   * The Square-generated ID of the [Transaction]($m/Transaction) that\n   * caused the adjustment. Only relevant for payment-related state\n   * transitions.\n   */\n  transactionId?: string;\n  /**\n   * The Square-generated ID of the [Refund]($m/Refund) that\n   * caused the adjustment. Only relevant for refund-related state\n   * transitions.\n   */\n  refundId?: string;\n  /**\n   * The Square-generated ID of the purchase order that caused the\n   * adjustment. Only relevant for state transitions from the Square for Retail\n   * app.\n   */\n  purchaseOrderId?: string;\n  /**\n   * The Square-generated ID of the goods receipt that caused the\n   * adjustment. Only relevant for state transitions from the Square for Retail\n   * app.\n   */\n  goodsReceiptId?: string;\n  adjustmentGroup?: InventoryAdjustmentGroup;\n}\n\nexport const inventoryAdjustmentSchema: Schema<InventoryAdjustment> = object({\n  id: ['id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  fromState: ['from_state', optional(string())],\n  toState: ['to_state', optional(string())],\n  locationId: ['location_id', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogObjectType: ['catalog_object_type', optional(string())],\n  quantity: ['quantity', optional(string())],\n  totalPriceMoney: ['total_price_money', optional(lazy(() => moneySchema))],\n  occurredAt: ['occurred_at', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  source: ['source', optional(lazy(() => sourceApplicationSchema))],\n  employeeId: ['employee_id', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n  transactionId: ['transaction_id', optional(string())],\n  refundId: ['refund_id', optional(string())],\n  purchaseOrderId: ['purchase_order_id', optional(string())],\n  goodsReceiptId: ['goods_receipt_id', optional(string())],\n  adjustmentGroup: [\n    'adjustment_group',\n    optional(lazy(() => inventoryAdjustmentGroupSchema)),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  SourceApplication,\n  sourceApplicationSchema,\n} from './sourceApplication';\n\n/**\n * Represents the quantity of an item variation that is physically present\n * at a specific location, verified by a seller or a seller's employee. For example,\n * a physical count might come from an employee counting the item variations on\n * hand or from syncing with an external system.\n */\nexport interface InventoryPhysicalCount {\n  /**\n   * A unique Square-generated ID for the\n   * [InventoryPhysicalCount]($m/InventoryPhysicalCount).\n   */\n  id?: string;\n  /**\n   * An optional ID provided by the application to tie the\n   * [InventoryPhysicalCount]($m/InventoryPhysicalCount) to an external\n   * system.\n   */\n  referenceId?: string;\n  /**\n   * The Square-generated ID of the\n   * [CatalogObject]($m/CatalogObject) being tracked.\n   */\n  catalogObjectId?: string;\n  /**\n   * The [type]($m/CatalogObjectType) of the [CatalogObject]($m/CatalogObject) being tracked.\n   * The Inventory API supports setting and reading the `\"catalog_object_type\": \"ITEM_VARIATION\"` field value.\n   * In addition, it can also read the `\"catalog_object_type\": \"ITEM\"` field value that is set by the Square Restaurants app.\n   */\n  catalogObjectType?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  state?: string;\n  /**\n   * The Square-generated ID of the [Location]($m/Location) where the related\n   * quantity of items is being tracked.\n   */\n  locationId?: string;\n  /**\n   * The number of items affected by the physical count as a decimal string.\n   * The number can support up to 5 digits after the decimal point.\n   */\n  quantity?: string;\n  /** Provides information about the application used to generate a change. */\n  source?: SourceApplication;\n  /**\n   * The Square-generated ID of the [Employee]($m/Employee) responsible for the\n   * physical count.\n   */\n  employeeId?: string;\n  /**\n   * The Square-generated ID of the [Team Member]($m/TeamMember) responsible for the\n   * physical count.\n   */\n  teamMemberId?: string;\n  /**\n   * A client-generated RFC 3339-formatted timestamp that indicates when\n   * the physical count was examined. For physical count updates, the `occurred_at`\n   * timestamp cannot be older than 24 hours or in the future relative to the\n   * time of the request.\n   */\n  occurredAt?: string;\n  /** An RFC 3339-formatted timestamp that indicates when the physical count is received. */\n  createdAt?: string;\n}\n\nexport const inventoryPhysicalCountSchema: Schema<InventoryPhysicalCount> = object(\n  {\n    id: ['id', optional(string())],\n    referenceId: ['reference_id', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    catalogObjectType: ['catalog_object_type', optional(string())],\n    state: ['state', optional(string())],\n    locationId: ['location_id', optional(string())],\n    quantity: ['quantity', optional(string())],\n    source: ['source', optional(lazy(() => sourceApplicationSchema))],\n    employeeId: ['employee_id', optional(string())],\n    teamMemberId: ['team_member_id', optional(string())],\n    occurredAt: ['occurred_at', optional(string())],\n    createdAt: ['created_at', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  SourceApplication,\n  sourceApplicationSchema,\n} from './sourceApplication';\n\n/**\n * Represents the transfer of a quantity of product inventory at a\n * particular time from one location to another.\n */\nexport interface InventoryTransfer {\n  /**\n   * A unique ID generated by Square for the\n   * `InventoryTransfer`.\n   */\n  id?: string;\n  /**\n   * An optional ID provided by the application to tie the\n   * `InventoryTransfer` to an external system.\n   */\n  referenceId?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  state?: string;\n  /**\n   * The Square-generated ID of the [Location]($m/Location) where the related\n   * quantity of items was tracked before the transfer.\n   */\n  fromLocationId?: string;\n  /**\n   * The Square-generated ID of the [Location]($m/Location) where the related\n   * quantity of items was tracked after the transfer.\n   */\n  toLocationId?: string;\n  /**\n   * The Square-generated ID of the\n   * [CatalogObject]($m/CatalogObject) being tracked.\n   */\n  catalogObjectId?: string;\n  /**\n   * The [type]($m/CatalogObjectType) of the [CatalogObject]($m/CatalogObject) being tracked.\n   * The Inventory API supports setting and reading the `\"catalog_object_type\": \"ITEM_VARIATION\"` field value.\n   * In addition, it can also read the `\"catalog_object_type\": \"ITEM\"` field value that is set by the Square Restaurants app.\n   */\n  catalogObjectType?: string;\n  /**\n   * The number of items affected by the transfer as a decimal string.\n   * Can support up to 5 digits after the decimal point.\n   */\n  quantity?: string;\n  /**\n   * A client-generated RFC 3339-formatted timestamp that indicates when\n   * the transfer took place. For write actions, the `occurred_at` timestamp\n   * cannot be older than 24 hours or in the future relative to the time of the\n   * request.\n   */\n  occurredAt?: string;\n  /**\n   * An RFC 3339-formatted timestamp that indicates when Square\n   * received the transfer request.\n   */\n  createdAt?: string;\n  /** Provides information about the application used to generate a change. */\n  source?: SourceApplication;\n  /**\n   * The Square-generated ID of the [Employee]($m/Employee) responsible for the\n   * inventory transfer.\n   */\n  employeeId?: string;\n  /**\n   * The Square-generated ID of the [Team Member]($m/TeamMember) responsible for the\n   * inventory transfer.\n   */\n  teamMemberId?: string;\n}\n\nexport const inventoryTransferSchema: Schema<InventoryTransfer> = object({\n  id: ['id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  state: ['state', optional(string())],\n  fromLocationId: ['from_location_id', optional(string())],\n  toLocationId: ['to_location_id', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogObjectType: ['catalog_object_type', optional(string())],\n  quantity: ['quantity', optional(string())],\n  occurredAt: ['occurred_at', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  source: ['source', optional(lazy(() => sourceApplicationSchema))],\n  employeeId: ['employee_id', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  CatalogMeasurementUnit,\n  catalogMeasurementUnitSchema,\n} from './catalogMeasurementUnit';\nimport {\n  InventoryAdjustment,\n  inventoryAdjustmentSchema,\n} from './inventoryAdjustment';\nimport {\n  InventoryPhysicalCount,\n  inventoryPhysicalCountSchema,\n} from './inventoryPhysicalCount';\nimport {\n  InventoryTransfer,\n  inventoryTransferSchema,\n} from './inventoryTransfer';\n\n/**\n * Represents a single physical count, inventory, adjustment, or transfer\n * that is part of the history of inventory changes for a particular\n * [CatalogObject]($m/CatalogObject) instance.\n */\nexport interface InventoryChange {\n  /** Indicates how the inventory change was applied to a tracked product quantity. */\n  type?: string;\n  /**\n   * Represents the quantity of an item variation that is physically present\n   * at a specific location, verified by a seller or a seller's employee. For example,\n   * a physical count might come from an employee counting the item variations on\n   * hand or from syncing with an external system.\n   */\n  physicalCount?: InventoryPhysicalCount;\n  /**\n   * Represents a change in state or quantity of product inventory at a\n   * particular time and location.\n   */\n  adjustment?: InventoryAdjustment;\n  /**\n   * Represents the transfer of a quantity of product inventory at a\n   * particular time from one location to another.\n   */\n  transfer?: InventoryTransfer;\n  /**\n   * Represents the unit used to measure a `CatalogItemVariation` and\n   * specifies the precision for decimal quantities.\n   */\n  measurementUnit?: CatalogMeasurementUnit;\n  /** The ID of the [CatalogMeasurementUnit]($m/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change. */\n  measurementUnitId?: string;\n}\n\nexport const inventoryChangeSchema: Schema<InventoryChange> = object({\n  type: ['type', optional(string())],\n  physicalCount: [\n    'physical_count',\n    optional(lazy(() => inventoryPhysicalCountSchema)),\n  ],\n  adjustment: ['adjustment', optional(lazy(() => inventoryAdjustmentSchema))],\n  transfer: ['transfer', optional(lazy(() => inventoryTransferSchema))],\n  measurementUnit: [\n    'measurement_unit',\n    optional(lazy(() => catalogMeasurementUnitSchema)),\n  ],\n  measurementUnitId: ['measurement_unit_id', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { InventoryChange, inventoryChangeSchema } from './inventoryChange';\n\nexport interface BatchChangeInventoryRequest {\n  /**\n   * A client-supplied, universally unique identifier (UUID) for the\n   * request.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the\n   * [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more\n   * information.\n   */\n  idempotencyKey: string;\n  /**\n   * The set of physical counts and inventory adjustments to be made.\n   * Changes are applied based on the client-supplied timestamp and may be sent\n   * out of order.\n   */\n  changes?: InventoryChange[];\n  /**\n   * Indicates whether the current physical count should be ignored if\n   * the quantity is unchanged since the last physical count. Default: `true`.\n   */\n  ignoreUnchangedCounts?: boolean;\n}\n\nexport const batchChangeInventoryRequestSchema: Schema<BatchChangeInventoryRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    changes: ['changes', optional(array(lazy(() => inventoryChangeSchema)))],\n    ignoreUnchangedCounts: ['ignore_unchanged_counts', optional(boolean())],\n  }\n);\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents Square-estimated quantity of items in a particular state at a\n * particular seller location based on the known history of physical counts and\n * inventory adjustments.\n */\nexport interface InventoryCount {\n  /**\n   * The Square-generated ID of the\n   * [CatalogObject]($m/CatalogObject) being tracked.\n   */\n  catalogObjectId?: string;\n  /**\n   * The [type]($m/CatalogObjectType) of the [CatalogObject]($m/CatalogObject) being tracked.\n   * The Inventory API supports setting and reading the `\"catalog_object_type\": \"ITEM_VARIATION\"` field value.\n   * In addition, it can also read the `\"catalog_object_type\": \"ITEM\"` field value that is set by the Square Restaurants app.\n   */\n  catalogObjectType?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  state?: string;\n  /**\n   * The Square-generated ID of the [Location]($m/Location) where the related\n   * quantity of items is being tracked.\n   */\n  locationId?: string;\n  /**\n   * The number of items affected by the estimated count as a decimal string.\n   * Can support up to 5 digits after the decimal point.\n   */\n  quantity?: string;\n  /**\n   * An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting\n   * the estimated count is received.\n   */\n  calculatedAt?: string;\n  /**\n   * Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of\n   * any of these endpoints: [BatchChangeInventory]($e/Inventory/BatchChangeInventory),\n   * [BatchRetrieveInventoryChanges]($e/Inventory/BatchRetrieveInventoryChanges),\n   * [BatchRetrieveInventoryCounts]($e/Inventory/BatchRetrieveInventoryCounts), and\n   * [RetrieveInventoryChanges]($e/Inventory/RetrieveInventoryChanges).\n   */\n  isEstimated?: boolean;\n}\n\nexport const inventoryCountSchema: Schema<InventoryCount> = object({\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogObjectType: ['catalog_object_type', optional(string())],\n  state: ['state', optional(string())],\n  locationId: ['location_id', optional(string())],\n  quantity: ['quantity', optional(string())],\n  calculatedAt: ['calculated_at', optional(string())],\n  isEstimated: ['is_estimated', optional(boolean())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryChange, inventoryChangeSchema } from './inventoryChange';\nimport { InventoryCount, inventoryCountSchema } from './inventoryCount';\n\nexport interface BatchChangeInventoryResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The current counts for all objects referenced in the request. */\n  counts?: InventoryCount[];\n  /** Changes created for the request. */\n  changes?: InventoryChange[];\n}\n\nexport const batchChangeInventoryResponseSchema: Schema<BatchChangeInventoryResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    counts: ['counts', optional(array(lazy(() => inventoryCountSchema)))],\n    changes: ['changes', optional(array(lazy(() => inventoryChangeSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface BatchRetrieveInventoryChangesRequest {\n  /**\n   * The filter to return results by `CatalogObject` ID.\n   * The filter is only applicable when set. The default value is null.\n   */\n  catalogObjectIds?: string[];\n  /**\n   * The filter to return results by `Location` ID.\n   * The filter is only applicable when set. The default value is null.\n   */\n  locationIds?: string[];\n  /**\n   * The filter to return results by `InventoryChangeType` values other than `TRANSFER`.\n   * The default value is `[PHYSICAL_COUNT, ADJUSTMENT]`.\n   */\n  types?: string[];\n  /**\n   * The filter to return `ADJUSTMENT` query results by\n   * `InventoryState`. This filter is only applied when set.\n   * The default value is null.\n   */\n  states?: string[];\n  /**\n   * The filter to return results with their `calculated_at` value\n   * after the given time as specified in an RFC 3339 timestamp.\n   * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).\n   */\n  updatedAfter?: string;\n  /**\n   * The filter to return results with their `created_at` or `calculated_at` value\n   * strictly before the given time as specified in an RFC 3339 timestamp.\n   * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).\n   */\n  updatedBefore?: string;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for the original query.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const batchRetrieveInventoryChangesRequestSchema: Schema<BatchRetrieveInventoryChangesRequest> = object(\n  {\n    catalogObjectIds: ['catalog_object_ids', optional(array(string()))],\n    locationIds: ['location_ids', optional(array(string()))],\n    types: ['types', optional(array(string()))],\n    states: ['states', optional(array(string()))],\n    updatedAfter: ['updated_after', optional(string())],\n    updatedBefore: ['updated_before', optional(string())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryChange, inventoryChangeSchema } from './inventoryChange';\n\nexport interface BatchRetrieveInventoryChangesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The current calculated inventory changes for the requested objects\n   * and locations.\n   */\n  changes?: InventoryChange[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const batchRetrieveInventoryChangesResponseSchema: Schema<BatchRetrieveInventoryChangesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    changes: ['changes', optional(array(lazy(() => inventoryChangeSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface BatchRetrieveInventoryCountsRequest {\n  /**\n   * The filter to return results by `CatalogObject` ID.\n   * The filter is applicable only when set.  The default is null.\n   */\n  catalogObjectIds?: string[];\n  /**\n   * The filter to return results by `Location` ID.\n   * This filter is applicable only when set. The default is null.\n   */\n  locationIds?: string[];\n  /**\n   * The filter to return results with their `calculated_at` value\n   * after the given time as specified in an RFC 3339 timestamp.\n   * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).\n   */\n  updatedAfter?: string;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for the original query.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n  /**\n   * The filter to return results by `InventoryState`. The filter is only applicable when set.\n   * Ignored are untracked states of `NONE`, `SOLD`, and `UNLINKED_RETURN`.\n   * The default is null.\n   */\n  states?: string[];\n}\n\nexport const batchRetrieveInventoryCountsRequestSchema: Schema<BatchRetrieveInventoryCountsRequest> = object(\n  {\n    catalogObjectIds: ['catalog_object_ids', optional(array(string()))],\n    locationIds: ['location_ids', optional(array(string()))],\n    updatedAfter: ['updated_after', optional(string())],\n    cursor: ['cursor', optional(string())],\n    states: ['states', optional(array(string()))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryCount, inventoryCountSchema } from './inventoryCount';\n\nexport interface BatchRetrieveInventoryCountsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The current calculated inventory counts for the requested objects\n   * and locations.\n   */\n  counts?: InventoryCount[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const batchRetrieveInventoryCountsResponseSchema: Schema<BatchRetrieveInventoryCountsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    counts: ['counts', optional(array(lazy(() => inventoryCountSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  InventoryAdjustment,\n  inventoryAdjustmentSchema,\n} from './inventoryAdjustment';\n\nexport interface RetrieveInventoryAdjustmentResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a change in state or quantity of product inventory at a\n   * particular time and location.\n   */\n  adjustment?: InventoryAdjustment;\n}\n\nexport const retrieveInventoryAdjustmentResponseSchema: Schema<RetrieveInventoryAdjustmentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    adjustment: ['adjustment', optional(lazy(() => inventoryAdjustmentSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryChange, inventoryChangeSchema } from './inventoryChange';\n\nexport interface RetrieveInventoryChangesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The set of inventory changes for the requested object and locations. */\n  changes?: InventoryChange[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const retrieveInventoryChangesResponseSchema: Schema<RetrieveInventoryChangesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    changes: ['changes', optional(array(lazy(() => inventoryChangeSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryCount, inventoryCountSchema } from './inventoryCount';\n\nexport interface RetrieveInventoryCountResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The current calculated inventory counts for the requested object and\n   * locations.\n   */\n  counts?: InventoryCount[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const retrieveInventoryCountResponseSchema: Schema<RetrieveInventoryCountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    counts: ['counts', optional(array(lazy(() => inventoryCountSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  InventoryPhysicalCount,\n  inventoryPhysicalCountSchema,\n} from './inventoryPhysicalCount';\n\nexport interface RetrieveInventoryPhysicalCountResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents the quantity of an item variation that is physically present\n   * at a specific location, verified by a seller or a seller's employee. For example,\n   * a physical count might come from an employee counting the item variations on\n   * hand or from syncing with an external system.\n   */\n  count?: InventoryPhysicalCount;\n}\n\nexport const retrieveInventoryPhysicalCountResponseSchema: Schema<RetrieveInventoryPhysicalCountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    count: ['count', optional(lazy(() => inventoryPhysicalCountSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  InventoryTransfer,\n  inventoryTransferSchema,\n} from './inventoryTransfer';\n\nexport interface RetrieveInventoryTransferResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents the transfer of a quantity of product inventory at a\n   * particular time from one location to another.\n   */\n  transfer?: InventoryTransfer;\n}\n\nexport const retrieveInventoryTransferResponseSchema: Schema<RetrieveInventoryTransferResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    transfer: ['transfer', optional(lazy(() => inventoryTransferSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  BatchChangeInventoryRequest,\n  batchChangeInventoryRequestSchema,\n} from '../models/batchChangeInventoryRequest';\nimport {\n  BatchChangeInventoryResponse,\n  batchChangeInventoryResponseSchema,\n} from '../models/batchChangeInventoryResponse';\nimport {\n  BatchRetrieveInventoryChangesRequest,\n  batchRetrieveInventoryChangesRequestSchema,\n} from '../models/batchRetrieveInventoryChangesRequest';\nimport {\n  BatchRetrieveInventoryChangesResponse,\n  batchRetrieveInventoryChangesResponseSchema,\n} from '../models/batchRetrieveInventoryChangesResponse';\nimport {\n  BatchRetrieveInventoryCountsRequest,\n  batchRetrieveInventoryCountsRequestSchema,\n} from '../models/batchRetrieveInventoryCountsRequest';\nimport {\n  BatchRetrieveInventoryCountsResponse,\n  batchRetrieveInventoryCountsResponseSchema,\n} from '../models/batchRetrieveInventoryCountsResponse';\nimport {\n  RetrieveInventoryAdjustmentResponse,\n  retrieveInventoryAdjustmentResponseSchema,\n} from '../models/retrieveInventoryAdjustmentResponse';\nimport {\n  RetrieveInventoryChangesResponse,\n  retrieveInventoryChangesResponseSchema,\n} from '../models/retrieveInventoryChangesResponse';\nimport {\n  RetrieveInventoryCountResponse,\n  retrieveInventoryCountResponseSchema,\n} from '../models/retrieveInventoryCountResponse';\nimport {\n  RetrieveInventoryPhysicalCountResponse,\n  retrieveInventoryPhysicalCountResponseSchema,\n} from '../models/retrieveInventoryPhysicalCountResponse';\nimport {\n  RetrieveInventoryTransferResponse,\n  retrieveInventoryTransferResponseSchema,\n} from '../models/retrieveInventoryTransferResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class InventoryApi extends BaseApi {\n  /**\n   * Deprecated version of [RetrieveInventoryAdjustment]($e/Inventory/RetrieveInventoryAdjustment) after\n   * the endpoint URL\n   * is updated to conform to the standard convention.\n   *\n   * @param adjustmentId  ID of the [InventoryAdjustment]($m/InventoryAdjustment) to retrieve.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deprecatedRetrieveInventoryAdjustment(\n    adjustmentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryAdjustmentResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ adjustmentId: [adjustmentId, string()] });\n    req.appendTemplatePath`/v2/inventory/adjustment/${mapped.adjustmentId}`;\n    req.deprecated('InventoryApi.deprecatedRetrieveInventoryAdjustment');\n    return req.callAsJson(\n      retrieveInventoryAdjustmentResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Returns the [InventoryAdjustment]($m/InventoryAdjustment) object\n   * with the provided `adjustment_id`.\n   *\n   * @param adjustmentId  ID of the [InventoryAdjustment]($m/InventoryAdjustment) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveInventoryAdjustment(\n    adjustmentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryAdjustmentResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ adjustmentId: [adjustmentId, string()] });\n    req.appendTemplatePath`/v2/inventory/adjustments/${mapped.adjustmentId}`;\n    return req.callAsJson(\n      retrieveInventoryAdjustmentResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Deprecated version of [BatchChangeInventory]($e/Inventory/BatchChangeInventory) after the endpoint\n   * URL\n   * is updated to conform to the standard convention.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deprecatedBatchChangeInventory(\n    body: BatchChangeInventoryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchChangeInventoryResponse>> {\n    const req = this.createRequest('POST', '/v2/inventory/batch-change');\n    const mapped = req.prepareArgs({\n      body: [body, batchChangeInventoryRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.deprecated('InventoryApi.deprecatedBatchChangeInventory');\n    return req.callAsJson(batchChangeInventoryResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deprecated version of [BatchRetrieveInventoryChanges]($e/Inventory/BatchRetrieveInventoryChanges)\n   * after the endpoint URL\n   * is updated to conform to the standard convention.\n   *\n   * @param body         An object containing the fields to POST for\n   *                                                                    the request.  See the corresponding object\n   *                                                                    definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deprecatedBatchRetrieveInventoryChanges(\n    body: BatchRetrieveInventoryChangesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveInventoryChangesResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/inventory/batch-retrieve-changes'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveInventoryChangesRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.deprecated('InventoryApi.deprecatedBatchRetrieveInventoryChanges');\n    return req.callAsJson(\n      batchRetrieveInventoryChangesResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Deprecated version of [BatchRetrieveInventoryCounts]($e/Inventory/BatchRetrieveInventoryCounts)\n   * after the endpoint URL\n   * is updated to conform to the standard convention.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                                   request.  See the corresponding object\n   *                                                                   definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deprecatedBatchRetrieveInventoryCounts(\n    body: BatchRetrieveInventoryCountsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveInventoryCountsResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/inventory/batch-retrieve-counts'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveInventoryCountsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.deprecated('InventoryApi.deprecatedBatchRetrieveInventoryCounts');\n    return req.callAsJson(\n      batchRetrieveInventoryCountsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Applies adjustments and counts to the provided item quantities.\n   *\n   * On success: returns the current calculated counts for all objects\n   * referenced in the request.\n   * On failure: returns a list of related errors.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async batchChangeInventory(\n    body: BatchChangeInventoryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchChangeInventoryResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/inventory/changes/batch-create'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, batchChangeInventoryRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(batchChangeInventoryResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns historical physical counts and adjustments based on the\n   * provided filter criteria.\n   *\n   * Results are paginated and sorted in ascending order according their\n   * `occurred_at` timestamp (oldest first).\n   *\n   * BatchRetrieveInventoryChanges is a catch-all query endpoint for queries\n   * that cannot be handled by other, simpler endpoints.\n   *\n   * @param body         An object containing the fields to POST for\n   *                                                                    the request.  See the corresponding object\n   *                                                                    definition for field details.\n   * @return Response from the API call\n   */\n  async batchRetrieveInventoryChanges(\n    body: BatchRetrieveInventoryChangesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveInventoryChangesResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/inventory/changes/batch-retrieve'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveInventoryChangesRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchRetrieveInventoryChangesResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Returns current counts for the provided\n   * [CatalogObject]($m/CatalogObject)s at the requested\n   * [Location]($m/Location)s.\n   *\n   * Results are paginated and sorted in descending order according to their\n   * `calculated_at` timestamp (newest first).\n   *\n   * When `updated_after` is specified, only counts that have changed since that\n   * time (based on the server timestamp for the most recent change) are\n   * returned. This allows clients to perform a \"sync\" operation, for example\n   * in response to receiving a Webhook notification.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                                   request.  See the corresponding object\n   *                                                                   definition for field details.\n   * @return Response from the API call\n   */\n  async batchRetrieveInventoryCounts(\n    body: BatchRetrieveInventoryCountsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveInventoryCountsResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/inventory/counts/batch-retrieve'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveInventoryCountsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchRetrieveInventoryCountsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Deprecated version of [RetrieveInventoryPhysicalCount]($e/Inventory/RetrieveInventoryPhysicalCount)\n   * after the endpoint URL\n   * is updated to conform to the standard convention.\n   *\n   * @param physicalCountId   ID of the [InventoryPhysicalCount]($m/InventoryPhysicalCount) to retrieve.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deprecatedRetrieveInventoryPhysicalCount(\n    physicalCountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryPhysicalCountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      physicalCountId: [physicalCountId, string()],\n    });\n    req.appendTemplatePath`/v2/inventory/physical-count/${mapped.physicalCountId}`;\n    req.deprecated('InventoryApi.deprecatedRetrieveInventoryPhysicalCount');\n    return req.callAsJson(\n      retrieveInventoryPhysicalCountResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Returns the [InventoryPhysicalCount]($m/InventoryPhysicalCount)\n   * object with the provided `physical_count_id`.\n   *\n   * @param physicalCountId   ID of the [InventoryPhysicalCount]($m/InventoryPhysicalCount) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveInventoryPhysicalCount(\n    physicalCountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryPhysicalCountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      physicalCountId: [physicalCountId, string()],\n    });\n    req.appendTemplatePath`/v2/inventory/physical-counts/${mapped.physicalCountId}`;\n    return req.callAsJson(\n      retrieveInventoryPhysicalCountResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Returns the [InventoryTransfer]($m/InventoryTransfer) object\n   * with the provided `transfer_id`.\n   *\n   * @param transferId  ID of the [InventoryTransfer]($m/InventoryTransfer) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveInventoryTransfer(\n    transferId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryTransferResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ transferId: [transferId, string()] });\n    req.appendTemplatePath`/v2/inventory/transfers/${mapped.transferId}`;\n    return req.callAsJson(\n      retrieveInventoryTransferResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves the current calculated stock count for a given\n   * [CatalogObject]($m/CatalogObject) at a given set of\n   * [Location]($m/Location)s. Responses are paginated and unsorted.\n   * For more sophisticated queries, use a batch endpoint.\n   *\n   * @param catalogObjectId   ID of the [CatalogObject]($m/CatalogObject) to retrieve.\n   * @param locationIds       The [Location]($m/Location) IDs to look up as a comma-separated list. An empty\n   *                                    list queries all locations.\n   * @param cursor            A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                                    to retrieve the next set of results for the original query.  See the\n   *                                    [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination)\n   *                                    guide for more information.\n   * @return Response from the API call\n   */\n  async retrieveInventoryCount(\n    catalogObjectId: string,\n    locationIds?: string,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryCountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      catalogObjectId: [catalogObjectId, string()],\n      locationIds: [locationIds, optional(string())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_ids', mapped.locationIds);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/inventory/${mapped.catalogObjectId}`;\n    return req.callAsJson(retrieveInventoryCountResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a set of physical counts and inventory adjustments for the\n   * provided [CatalogObject]($m/CatalogObject) at the requested\n   * [Location]($m/Location)s.\n   *\n   * You can achieve the same result by calling\n   * [BatchRetrieveInventoryChanges]($e/Inventory/BatchRetrieveInventoryChanges)\n   * and having the `catalog_object_ids` list contain a single element of the `CatalogObject` ID.\n   *\n   * Results are paginated and sorted in descending order according to their\n   * `occurred_at` timestamp (newest first).\n   *\n   * There are no limits on how far back the caller can page. This endpoint can be\n   * used to display recent changes for a specific item. For more\n   * sophisticated queries, use a batch endpoint.\n   *\n   * @param catalogObjectId   ID of the [CatalogObject]($m/CatalogObject) to retrieve.\n   * @param locationIds       The [Location]($m/Location) IDs to look up as a comma-separated list. An empty\n   *                                    list queries all locations.\n   * @param cursor            A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                                    to retrieve the next set of results for the original query.  See the\n   *                                    [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination)\n   *                                    guide for more information.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveInventoryChanges(\n    catalogObjectId: string,\n    locationIds?: string,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryChangesResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      catalogObjectId: [catalogObjectId, string()],\n      locationIds: [locationIds, optional(string())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_ids', mapped.locationIds);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/inventory/${mapped.catalogObjectId}/changes`;\n    req.deprecated('InventoryApi.retrieveInventoryChanges');\n    return req.callAsJson(\n      retrieveInventoryChangesResponseSchema,\n      requestOptions\n    );\n  }\n}\n","import { number, object, Schema } from '../schema';\n\n/** Describes a `CancelInvoice` request. */\nexport interface CancelInvoiceRequest {\n  /**\n   * The version of the [invoice]($m/Invoice) to cancel.\n   * If you do not know the version, you can call\n   * [GetInvoice]($e/Invoices/GetInvoice) or [ListInvoices]($e/Invoices/ListInvoices).\n   */\n  version: number;\n}\n\nexport const cancelInvoiceRequestSchema: Schema<CancelInvoiceRequest> = object({\n  version: ['version', number()],\n});\n","import { boolean, object, optional, Schema } from '../schema';\n\n/** The payment methods that customers can use to pay an invoice on the Square-hosted invoice page. */\nexport interface InvoiceAcceptedPaymentMethods {\n  /** Indicates whether credit card or debit card payments are accepted. The default value is `false`. */\n  card?: boolean;\n  /** Indicates whether Square gift card payments are accepted. The default value is `false`. */\n  squareGiftCard?: boolean;\n  /**\n   * Indicates whether bank transfer payments are accepted. The default value is `false`.\n   * This option is allowed only for invoices that have a single payment request of type `BALANCE`.\n   */\n  bankAccount?: boolean;\n}\n\nexport const invoiceAcceptedPaymentMethodsSchema: Schema<InvoiceAcceptedPaymentMethods> = object(\n  {\n    card: ['card', optional(boolean())],\n    squareGiftCard: ['square_gift_card', optional(boolean())],\n    bankAccount: ['bank_account', optional(boolean())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * An additional seller-defined and customer-facing field to include on the invoice. For more information,\n * see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).\n * Adding custom fields to an invoice requires an\n * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).\n */\nexport interface InvoiceCustomField {\n  /** The label or title of the custom field. This field is required for a custom field. */\n  label?: string;\n  /** The text of the custom field. If omitted, only the label is rendered. */\n  value?: string;\n  /**\n   * Indicates where to render a custom field on the Square-hosted invoice page and in emailed or PDF\n   * copies of the invoice.\n   */\n  placement?: string;\n}\n\nexport const invoiceCustomFieldSchema: Schema<InvoiceCustomField> = object({\n  label: ['label', optional(string())],\n  value: ['value', optional(string())],\n  placement: ['placement', optional(string())],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * Describes a payment request reminder (automatic notification) that Square sends\n * to the customer. You configure a reminder relative to the payment request\n * `due_date`.\n */\nexport interface InvoicePaymentReminder {\n  /**\n   * A Square-assigned ID that uniquely identifies the reminder within the\n   * `InvoicePaymentRequest`.\n   */\n  uid?: string;\n  /**\n   * The number of days before (a negative number) or after (a positive number)\n   * the payment request `due_date` when the reminder is sent. For example, -3 indicates that\n   * the reminder should be sent 3 days before the payment request `due_date`.\n   */\n  relativeScheduledDays?: number;\n  /** The reminder message. */\n  message?: string;\n  /** The status of a payment request reminder. */\n  status?: string;\n  /** If sent, the timestamp when the reminder was sent, in RFC 3339 format. */\n  sentAt?: string;\n}\n\nexport const invoicePaymentReminderSchema: Schema<InvoicePaymentReminder> = object(\n  {\n    uid: ['uid', optional(string())],\n    relativeScheduledDays: ['relative_scheduled_days', optional(number())],\n    message: ['message', optional(string())],\n    status: ['status', optional(string())],\n    sentAt: ['sent_at', optional(string())],\n  }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  InvoicePaymentReminder,\n  invoicePaymentReminderSchema,\n} from './invoicePaymentReminder';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a payment request for an [invoice]($m/Invoice). Invoices can specify a maximum\n * of 13 payment requests, with up to 12 `INSTALLMENT` request types. For more information,\n * see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).\n * Adding `INSTALLMENT` payment requests to an invoice requires an\n * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).\n */\nexport interface InvoicePaymentRequest {\n  /** The Square-generated ID of the payment request in an [invoice]($m/Invoice). */\n  uid?: string;\n  /**\n   * Specifies the action for Square to take for processing the invoice. For example,\n   * email the invoice, charge a customer's card on file, or do nothing. DEPRECATED at\n   * version 2021-01-21. The corresponding `request_method` field is replaced by the\n   * `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.\n   */\n  requestMethod?: string;\n  /**\n   * Indicates the type of the payment request. For more information, see\n   * [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).\n   */\n  requestType?: string;\n  /**\n   * The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field\n   * is required to create a payment request.\n   * After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone`\n   * of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC\n   * timestamp of 2021-03-10T08:00:00Z).\n   */\n  dueDate?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  fixedAmountRequestedMoney?: Money;\n  /**\n   * Specifies the amount for the payment request in percentage:\n   * - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount.\n   * - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less\n   * the deposit, if requested. The sum of the `percentage_requested` in all installment\n   * payment requests must be equal to 100.\n   * You cannot specify this when the payment `request_type` is `BALANCE` or when the\n   * payment request specifies the `fixed_amount_requested_money` field.\n   */\n  percentageRequested?: string;\n  /**\n   * If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)\n   * provides a place for the customer to pay a tip.\n   * This field is allowed only on the final payment request\n   * and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.\n   */\n  tippingEnabled?: boolean;\n  /** Indicates the automatic payment method for an [invoice payment request]($m/InvoicePaymentRequest). */\n  automaticPaymentSource?: string;\n  /**\n   * The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer,\n   * call [ListCards]($e/Cards/ListCards) and include the `customer_id` of the invoice recipient.\n   */\n  cardId?: string;\n  /** A list of one or more reminders to send for the payment request. */\n  reminders?: InvoicePaymentReminder[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  computedAmountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalCompletedAmountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  roundingAdjustmentIncludedMoney?: Money;\n}\n\nexport const invoicePaymentRequestSchema: Schema<InvoicePaymentRequest> = object(\n  {\n    uid: ['uid', optional(string())],\n    requestMethod: ['request_method', optional(string())],\n    requestType: ['request_type', optional(string())],\n    dueDate: ['due_date', optional(string())],\n    fixedAmountRequestedMoney: [\n      'fixed_amount_requested_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    percentageRequested: ['percentage_requested', optional(string())],\n    tippingEnabled: ['tipping_enabled', optional(boolean())],\n    automaticPaymentSource: ['automatic_payment_source', optional(string())],\n    cardId: ['card_id', optional(string())],\n    reminders: [\n      'reminders',\n      optional(array(lazy(() => invoicePaymentReminderSchema))),\n    ],\n    computedAmountMoney: [\n      'computed_amount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    totalCompletedAmountMoney: [\n      'total_completed_amount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    roundingAdjustmentIncludedMoney: [\n      'rounding_adjustment_included_money',\n      optional(lazy(() => moneySchema)),\n    ],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents the tax IDs for an invoice recipient. The country of the seller account determines\n * whether the corresponding `tax_ids` field is available for the customer. For more information,\n * see [Invoice recipient tax IDs](https://developer.squareup.com/docs/invoices-api/overview#recipient-tax-ids).\n */\nexport interface InvoiceRecipientTaxIds {\n  /** The EU VAT identification number for the invoice recipient. For example, `IE3426675K`. */\n  euVat?: string;\n}\n\nexport const invoiceRecipientTaxIdsSchema: Schema<InvoiceRecipientTaxIds> = object(\n  { euVat: ['eu_vat', optional(string())] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport {\n  InvoiceRecipientTaxIds,\n  invoiceRecipientTaxIdsSchema,\n} from './invoiceRecipientTaxIds';\n\n/**\n * Represents a snapshot of customer data. This object stores customer data that is displayed on the invoice\n * and that Square uses to deliver the invoice.\n * When you provide a customer ID for a draft invoice, Square retrieves the associated customer profile and populates\n * the remaining `InvoiceRecipient` fields. You cannot update these fields after the invoice is published.\n * Square updates the customer ID in response to a merge operation, but does not update other fields.\n */\nexport interface InvoiceRecipient {\n  /**\n   * The ID of the customer. This is the customer profile ID that\n   * you provide when creating a draft invoice.\n   */\n  customerId?: string;\n  /** The recipient's given (that is, first) name. */\n  givenName?: string;\n  /** The recipient's family (that is, last) name. */\n  familyName?: string;\n  /** The recipient's email address. */\n  emailAddress?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  address?: Address;\n  /** The recipient's phone number. */\n  phoneNumber?: string;\n  /** The name of the recipient's company. */\n  companyName?: string;\n  /**\n   * Represents the tax IDs for an invoice recipient. The country of the seller account determines\n   * whether the corresponding `tax_ids` field is available for the customer. For more information,\n   * see [Invoice recipient tax IDs](https://developer.squareup.com/docs/invoices-api/overview#recipient-tax-ids).\n   */\n  taxIds?: InvoiceRecipientTaxIds;\n}\n\nexport const invoiceRecipientSchema: Schema<InvoiceRecipient> = object({\n  customerId: ['customer_id', optional(string())],\n  givenName: ['given_name', optional(string())],\n  familyName: ['family_name', optional(string())],\n  emailAddress: ['email_address', optional(string())],\n  address: ['address', optional(lazy(() => addressSchema))],\n  phoneNumber: ['phone_number', optional(string())],\n  companyName: ['company_name', optional(string())],\n  taxIds: ['tax_ids', optional(lazy(() => invoiceRecipientTaxIdsSchema))],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  InvoiceAcceptedPaymentMethods,\n  invoiceAcceptedPaymentMethodsSchema,\n} from './invoiceAcceptedPaymentMethods';\nimport {\n  InvoiceCustomField,\n  invoiceCustomFieldSchema,\n} from './invoiceCustomField';\nimport {\n  InvoicePaymentRequest,\n  invoicePaymentRequestSchema,\n} from './invoicePaymentRequest';\nimport { InvoiceRecipient, invoiceRecipientSchema } from './invoiceRecipient';\nimport { Money, moneySchema } from './money';\n\n/**\n * Stores information about an invoice. You use the Invoices API to create and manage\n * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n */\nexport interface Invoice {\n  /** The Square-assigned ID of the invoice. */\n  id?: string;\n  /** The Square-assigned version number, which is incremented each time an update is committed to the invoice. */\n  version?: number;\n  /**\n   * The ID of the location that this invoice is associated with.\n   * If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.\n   */\n  locationId?: string;\n  /**\n   * The ID of the [order]($m/Order) for which the invoice is created.\n   * This field is required when creating an invoice, and the order must be in the `OPEN` state.\n   * To view the line items and other information for the associated order, call the\n   * [RetrieveOrder]($e/Orders/RetrieveOrder) endpoint using the order ID.\n   */\n  orderId?: string;\n  /**\n   * Represents a snapshot of customer data. This object stores customer data that is displayed on the invoice\n   * and that Square uses to deliver the invoice.\n   * When you provide a customer ID for a draft invoice, Square retrieves the associated customer profile and populates\n   * the remaining `InvoiceRecipient` fields. You cannot update these fields after the invoice is published.\n   * Square updates the customer ID in response to a merge operation, but does not update other fields.\n   */\n  primaryRecipient?: InvoiceRecipient;\n  /**\n   * The payment schedule for the invoice, represented by one or more payment requests that\n   * define payment settings, such as amount due and due date. An invoice supports the following payment request combinations:\n   * - One balance\n   * - One deposit with one balance\n   * - 2–12 installments\n   * - One deposit with 2–12 installments\n   * This field is required when creating an invoice. It must contain at least one payment request.\n   * All payment requests for the invoice must equal the total order amount. For more information, see\n   * [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).\n   * Adding `INSTALLMENT` payment requests to an invoice requires an\n   * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).\n   */\n  paymentRequests?: InvoicePaymentRequest[];\n  /** Indicates how Square delivers the [invoice]($m/Invoice) to the customer. */\n  deliveryMethod?: string;\n  /**\n   * A user-friendly invoice number that is displayed on the invoice. The value is unique within a location.\n   * If not provided when creating an invoice, Square assigns a value.\n   * It increments from 1 and is padded with zeros making it 7 characters long\n   * (for example, 0000001 and 0000002).\n   */\n  invoiceNumber?: string;\n  /** The title of the invoice, which is displayed on the invoice. */\n  title?: string;\n  /** The description of the invoice, which is displayed on the invoice. */\n  description?: string;\n  /**\n   * The timestamp when the invoice is scheduled for processing, in RFC 3339 format.\n   * After the invoice is published, Square processes the invoice on the specified date,\n   * according to the delivery method and payment request settings.\n   * If the field is not set, Square processes the invoice immediately after it is published.\n   */\n  scheduledAt?: string;\n  /**\n   * The URL of the Square-hosted invoice page.\n   * After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice\n   * page and returns the page URL in the response.\n   */\n  publicUrl?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  nextPaymentAmountMoney?: Money;\n  /** Indicates the status of an invoice. */\n  status?: string;\n  /**\n   * The time zone used to interpret calendar dates on the invoice, such as `due_date`.\n   * When an invoice is created, this field is set to the `timezone` specified for the seller\n   * location. The value cannot be changed.\n   * For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\\_Angeles\n   * becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp\n   * of 2021-03-10T08:00:00Z).\n   */\n  timezone?: string;\n  /** The timestamp when the invoice was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the invoice was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /** The payment methods that customers can use to pay an invoice on the Square-hosted invoice page. */\n  acceptedPaymentMethods?: InvoiceAcceptedPaymentMethods;\n  /**\n   * Additional seller-defined fields that are displayed on the invoice. For more information, see\n   * [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).\n   * Adding custom fields to an invoice requires an\n   * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).\n   * Max: 2 custom fields\n   */\n  customFields?: InvoiceCustomField[];\n  /**\n   * The ID of the [subscription]($m/Subscription) associated with the invoice.\n   * This field is present only on subscription billing invoices.\n   */\n  subscriptionId?: string;\n  /**\n   * The date of the sale or the date that the service is rendered, in `YYYY-MM-DD` format.\n   * This field can be used to specify a past or future date which is displayed on the invoice.\n   */\n  saleOrServiceDate?: string;\n  /**\n   * **France only.** The payment terms and conditions that are displayed on the invoice. For more information,\n   * see [Payment conditions](https://developer.squareup.com/docs/invoices-api/overview#payment-conditions).\n   * For countries other than France, Square returns an `INVALID_REQUEST_ERROR` with a `BAD_REQUEST` code and\n   * \"Payment conditions are not supported for this location's country\" detail if this field is included in `CreateInvoice` or `UpdateInvoice` requests.\n   */\n  paymentConditions?: string;\n}\n\nexport const invoiceSchema: Schema<Invoice> = object({\n  id: ['id', optional(string())],\n  version: ['version', optional(number())],\n  locationId: ['location_id', optional(string())],\n  orderId: ['order_id', optional(string())],\n  primaryRecipient: [\n    'primary_recipient',\n    optional(lazy(() => invoiceRecipientSchema)),\n  ],\n  paymentRequests: [\n    'payment_requests',\n    optional(array(lazy(() => invoicePaymentRequestSchema))),\n  ],\n  deliveryMethod: ['delivery_method', optional(string())],\n  invoiceNumber: ['invoice_number', optional(string())],\n  title: ['title', optional(string())],\n  description: ['description', optional(string())],\n  scheduledAt: ['scheduled_at', optional(string())],\n  publicUrl: ['public_url', optional(string())],\n  nextPaymentAmountMoney: [\n    'next_payment_amount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  status: ['status', optional(string())],\n  timezone: ['timezone', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  acceptedPaymentMethods: [\n    'accepted_payment_methods',\n    optional(lazy(() => invoiceAcceptedPaymentMethodsSchema)),\n  ],\n  customFields: [\n    'custom_fields',\n    optional(array(lazy(() => invoiceCustomFieldSchema))),\n  ],\n  subscriptionId: ['subscription_id', optional(string())],\n  saleOrServiceDate: ['sale_or_service_date', optional(string())],\n  paymentConditions: ['payment_conditions', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** The response returned by the `CancelInvoice` request. */\nexport interface CancelInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and manage\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const cancelInvoiceResponseSchema: Schema<CancelInvoiceResponse> = object(\n  {\n    invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `CreateInvoice` request. */\nexport interface CreateInvoiceRequest {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and manage\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice: Invoice;\n  /**\n   * A unique string that identifies the `CreateInvoice` request. If you do not\n   * provide `idempotency_key` (or provide an empty string as the value), the endpoint\n   * treats each request as independent.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey?: string;\n}\n\nexport const createInvoiceRequestSchema: Schema<CreateInvoiceRequest> = object({\n  invoice: ['invoice', lazy(() => invoiceSchema)],\n  idempotencyKey: ['idempotency_key', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** The response returned by the `CreateInvoice` request. */\nexport interface CreateInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and manage\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const createInvoiceResponseSchema: Schema<CreateInvoiceResponse> = object(\n  {\n    invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/** Describes a `DeleteInvoice` response. */\nexport interface DeleteInvoiceResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const deleteInvoiceResponseSchema: Schema<DeleteInvoiceResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `GetInvoice` response. */\nexport interface GetInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and manage\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const getInvoiceResponseSchema: Schema<GetInvoiceResponse> = object({\n  invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `ListInvoice` response. */\nexport interface ListInvoicesResponse {\n  /** The invoices retrieved. */\n  invoices?: Invoice[];\n  /**\n   * When a response is truncated, it includes a cursor that you can use in a\n   * subsequent request to retrieve the next set of invoices. If empty, this is the final\n   * response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const listInvoicesResponseSchema: Schema<ListInvoicesResponse> = object({\n  invoices: ['invoices', optional(array(lazy(() => invoiceSchema)))],\n  cursor: ['cursor', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Describes a `PublishInvoice` request. */\nexport interface PublishInvoiceRequest {\n  /**\n   * The version of the [invoice]($m/Invoice) to publish.\n   * This must match the current version of the invoice; otherwise, the request is rejected.\n   */\n  version: number;\n  /**\n   * A unique string that identifies the `PublishInvoice` request. If you do not\n   * provide `idempotency_key` (or provide an empty string as the value), the endpoint\n   * treats each request as independent.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey?: string;\n}\n\nexport const publishInvoiceRequestSchema: Schema<PublishInvoiceRequest> = object(\n  {\n    version: ['version', number()],\n    idempotencyKey: ['idempotency_key', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `PublishInvoice` response. */\nexport interface PublishInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and manage\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const publishInvoiceResponseSchema: Schema<PublishInvoiceResponse> = object(\n  {\n    invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Describes query filters to apply. */\nexport interface InvoiceFilter {\n  /**\n   * Limits the search to the specified locations. A location is required.\n   * In the current implementation, only one location can be specified.\n   */\n  locationIds: string[];\n  /**\n   * Limits the search to the specified customers, within the specified locations.\n   * Specifying a customer is optional. In the current implementation,\n   * a maximum of one customer can be specified.\n   */\n  customerIds?: string[];\n}\n\nexport const invoiceFilterSchema: Schema<InvoiceFilter> = object({\n  locationIds: ['location_ids', array(string())],\n  customerIds: ['customer_ids', optional(array(string()))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Identifies the sort field and sort order. */\nexport interface InvoiceSort {\n  /** The field to use for sorting. */\n  field: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  order?: string;\n}\n\nexport const invoiceSortSchema: Schema<InvoiceSort> = object({\n  field: ['field', string()],\n  order: ['order', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { InvoiceFilter, invoiceFilterSchema } from './invoiceFilter';\nimport { InvoiceSort, invoiceSortSchema } from './invoiceSort';\n\n/** Describes query criteria for searching invoices. */\nexport interface InvoiceQuery {\n  /** Describes query filters to apply. */\n  filter: InvoiceFilter;\n  /** Identifies the sort field and sort order. */\n  sort?: InvoiceSort;\n}\n\nexport const invoiceQuerySchema: Schema<InvoiceQuery> = object({\n  filter: ['filter', lazy(() => invoiceFilterSchema)],\n  sort: ['sort', optional(lazy(() => invoiceSortSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { InvoiceQuery, invoiceQuerySchema } from './invoiceQuery';\n\n/** Describes a `SearchInvoices` request. */\nexport interface SearchInvoicesRequest {\n  /** Describes query criteria for searching invoices. */\n  query: InvoiceQuery;\n  /**\n   * The maximum number of invoices to return (200 is the maximum `limit`).\n   * If not provided, the server uses a default limit of 100 invoices.\n   */\n  limit?: number;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this cursor to retrieve the next set of results for your original query.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchInvoicesRequestSchema: Schema<SearchInvoicesRequest> = object(\n  {\n    query: ['query', lazy(() => invoiceQuerySchema)],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `SearchInvoices` response. */\nexport interface SearchInvoicesResponse {\n  /** The list of invoices returned by the search. */\n  invoices?: Invoice[];\n  /**\n   * When a response is truncated, it includes a cursor that you can use in a\n   * subsequent request to fetch the next set of invoices. If empty, this is the final\n   * response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const searchInvoicesResponseSchema: Schema<SearchInvoicesResponse> = object(\n  {\n    invoices: ['invoices', optional(array(lazy(() => invoiceSchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `UpdateInvoice` request. */\nexport interface UpdateInvoiceRequest {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and manage\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice: Invoice;\n  /**\n   * A unique string that identifies the `UpdateInvoice` request. If you do not\n   * provide `idempotency_key` (or provide an empty string as the value), the endpoint\n   * treats each request as independent.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey?: string;\n  /**\n   * The list of fields to clear.\n   * For examples, see [Update an invoice](https://developer.squareup.com/docs/invoices-api/overview#update-an-invoice).\n   */\n  fieldsToClear?: string[];\n}\n\nexport const updateInvoiceRequestSchema: Schema<UpdateInvoiceRequest> = object({\n  invoice: ['invoice', lazy(() => invoiceSchema)],\n  idempotencyKey: ['idempotency_key', optional(string())],\n  fieldsToClear: ['fields_to_clear', optional(array(string()))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `UpdateInvoice` response. */\nexport interface UpdateInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and manage\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const updateInvoiceResponseSchema: Schema<UpdateInvoiceResponse> = object(\n  {\n    invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CancelInvoiceRequest,\n  cancelInvoiceRequestSchema,\n} from '../models/cancelInvoiceRequest';\nimport {\n  CancelInvoiceResponse,\n  cancelInvoiceResponseSchema,\n} from '../models/cancelInvoiceResponse';\nimport {\n  CreateInvoiceRequest,\n  createInvoiceRequestSchema,\n} from '../models/createInvoiceRequest';\nimport {\n  CreateInvoiceResponse,\n  createInvoiceResponseSchema,\n} from '../models/createInvoiceResponse';\nimport {\n  DeleteInvoiceResponse,\n  deleteInvoiceResponseSchema,\n} from '../models/deleteInvoiceResponse';\nimport {\n  GetInvoiceResponse,\n  getInvoiceResponseSchema,\n} from '../models/getInvoiceResponse';\nimport {\n  ListInvoicesResponse,\n  listInvoicesResponseSchema,\n} from '../models/listInvoicesResponse';\nimport {\n  PublishInvoiceRequest,\n  publishInvoiceRequestSchema,\n} from '../models/publishInvoiceRequest';\nimport {\n  PublishInvoiceResponse,\n  publishInvoiceResponseSchema,\n} from '../models/publishInvoiceResponse';\nimport {\n  SearchInvoicesRequest,\n  searchInvoicesRequestSchema,\n} from '../models/searchInvoicesRequest';\nimport {\n  SearchInvoicesResponse,\n  searchInvoicesResponseSchema,\n} from '../models/searchInvoicesResponse';\nimport {\n  UpdateInvoiceRequest,\n  updateInvoiceRequestSchema,\n} from '../models/updateInvoiceRequest';\nimport {\n  UpdateInvoiceResponse,\n  updateInvoiceResponseSchema,\n} from '../models/updateInvoiceResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class InvoicesApi extends BaseApi {\n  /**\n   * Returns a list of invoices for a given location. The response\n   * is paginated. If truncated, the response includes a `cursor` that you\n   * use in a subsequent request to retrieve the next set of invoices.\n   *\n   * @param locationId  The ID of the location for which to list invoices.\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint.  Provide this\n   *                              cursor to retrieve the next set of results for your original query.  For more\n   *                              information, see [Pagination](https://developer.squareup.com/docs/working-with-\n   *                              apis/pagination).\n   * @param limit       The maximum number of invoices to return (200 is the maximum `limit`).  If not\n   *                              provided, the server uses a default limit of 100 invoices.\n   * @return Response from the API call\n   */\n  async listInvoices(\n    locationId: string,\n    cursor?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListInvoicesResponse>> {\n    const req = this.createRequest('GET', '/v2/invoices');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listInvoicesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a draft [invoice]($m/Invoice)\n   * for an order created using the Orders API.\n   *\n   * A draft invoice remains in your account and no action is taken.\n   * You must publish the invoice before Square can process it (send it to the customer's email address\n   * or charge the customer’s card on file).\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createInvoice(\n    body: CreateInvoiceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateInvoiceResponse>> {\n    const req = this.createRequest('POST', '/v2/invoices');\n    const mapped = req.prepareArgs({\n      body: [body, createInvoiceRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for invoices from a location specified in\n   * the filter. You can optionally specify customers in the filter for whom to\n   * retrieve invoices. In the current implementation, you can only specify one location and\n   * optionally one customer.\n   *\n   * The response is paginated. If truncated, the response includes a `cursor`\n   * that you use in a subsequent request to retrieve the next set of invoices.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchInvoices(\n    body: SearchInvoicesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchInvoicesResponse>> {\n    const req = this.createRequest('POST', '/v2/invoices/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchInvoicesRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchInvoicesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes the specified invoice. When an invoice is deleted, the\n   * associated order status changes to CANCELED. You can only delete a draft\n   * invoice (you cannot delete a published invoice, including one that is scheduled for processing).\n   *\n   * @param invoiceId  The ID of the invoice to delete.\n   * @param version    The version of the [invoice]($m/Invoice) to delete. If you do not know the version,\n   *                             you can call [GetInvoice]($e/Invoices/GetInvoice) or\n   *                             [ListInvoices]($e/Invoices/ListInvoices).\n   * @return Response from the API call\n   */\n  async deleteInvoice(\n    invoiceId: string,\n    version?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteInvoiceResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      invoiceId: [invoiceId, string()],\n      version: [version, optional(number())],\n    });\n    req.query('version', mapped.version);\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}`;\n    return req.callAsJson(deleteInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves an invoice by invoice ID.\n   *\n   * @param invoiceId  The ID of the invoice to retrieve.\n   * @return Response from the API call\n   */\n  async getInvoice(\n    invoiceId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetInvoiceResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ invoiceId: [invoiceId, string()] });\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}`;\n    return req.callAsJson(getInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an invoice by modifying fields, clearing fields, or both. For most updates, you can use a\n   * sparse\n   * `Invoice` object to add fields or change values and use the `fields_to_clear` field to specify\n   * fields to clear.\n   * However, some restrictions apply. For example, you cannot change the `order_id` or `location_id`\n   * field and you\n   * must provide the complete `custom_fields` list to update a custom field. Published invoices have\n   * additional restrictions.\n   *\n   * @param invoiceId    The ID of the invoice to update.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateInvoice(\n    invoiceId: string,\n    body: UpdateInvoiceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateInvoiceResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      invoiceId: [invoiceId, string()],\n      body: [body, updateInvoiceRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}`;\n    return req.callAsJson(updateInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels an invoice. The seller cannot collect payments for\n   * the canceled invoice.\n   *\n   * You cannot cancel an invoice in the `DRAFT` state or in a terminal state: `PAID`, `REFUNDED`,\n   * `CANCELED`, or `FAILED`.\n   *\n   * @param invoiceId    The ID of the [invoice]($m/Invoice) to cancel.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async cancelInvoice(\n    invoiceId: string,\n    body: CancelInvoiceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelInvoiceResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      invoiceId: [invoiceId, string()],\n      body: [body, cancelInvoiceRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}/cancel`;\n    return req.callAsJson(cancelInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Publishes the specified draft invoice.\n   *\n   * After an invoice is published, Square\n   * follows up based on the invoice configuration. For example, Square\n   * sends the invoice to the customer's email address, charges the customer's card on file, or does\n   * nothing. Square also makes the invoice available on a Square-hosted invoice page.\n   *\n   * The invoice `status` also changes from `DRAFT` to a status\n   * based on the invoice configuration. For example, the status changes to `UNPAID` if\n   * Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the\n   * invoice amount.\n   *\n   * @param invoiceId    The ID of the invoice to publish.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async publishInvoice(\n    invoiceId: string,\n    body: PublishInvoiceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<PublishInvoiceResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      invoiceId: [invoiceId, string()],\n      body: [body, publishInvoiceRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}/publish`;\n    return req.callAsJson(publishInvoiceResponseSchema, requestOptions);\n  }\n}\n","import { boolean, number, object, optional, Schema, string } from '../schema';\n\n/**\n * A defined break template that sets an expectation for possible `Break`\n * instances on a `Shift`.\n */\nexport interface BreakType {\n  /** The UUID for this object. */\n  id?: string;\n  /** The ID of the business location this type of break applies to. */\n  locationId: string;\n  /**\n   * A human-readable name for this type of break. The name is displayed to\n   * employees in Square products.\n   */\n  breakName: string;\n  /**\n   * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of\n   * this break. Precision less than minutes is truncated.\n   */\n  expectedDuration: string;\n  /**\n   * Whether this break counts towards time worked for compensation\n   * purposes.\n   */\n  isPaid: boolean;\n  /**\n   * Used for resolving concurrency issues. The request fails if the version\n   * provided does not match the server version at the time of the request. If a value is not\n   * provided, Square's servers execute a \"blind\" write; potentially\n   * overwriting another writer's data.\n   */\n  version?: number;\n  /** A read-only timestamp in RFC 3339 format. */\n  createdAt?: string;\n  /** A read-only timestamp in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const breakTypeSchema: Schema<BreakType> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', string()],\n  breakName: ['break_name', string()],\n  expectedDuration: ['expected_duration', string()],\n  isPaid: ['is_paid', boolean()],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\n\n/** A request to create a new `BreakType`. */\nexport interface CreateBreakTypeRequest {\n  /** A unique string value to ensure the idempotency of the operation. */\n  idempotencyKey?: string;\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType: BreakType;\n}\n\nexport const createBreakTypeRequestSchema: Schema<CreateBreakTypeRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    breakType: ['break_type', lazy(() => breakTypeSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to the request to create a `BreakType`. The response contains\n * the created `BreakType` object and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface CreateBreakTypeResponse {\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType?: BreakType;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createBreakTypeResponseSchema: Schema<CreateBreakTypeResponse> = object(\n  {\n    breakType: ['break_type', optional(lazy(() => breakTypeSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** A record of an employee's break during a shift. */\nexport interface Break {\n  /** The UUID for this object. */\n  id?: string;\n  /**\n   * RFC 3339; follows the same timezone information as `Shift`. Precision up to\n   * the minute is respected; seconds are truncated.\n   */\n  startAt: string;\n  /**\n   * RFC 3339; follows the same timezone information as `Shift`. Precision up to\n   * the minute is respected; seconds are truncated.\n   */\n  endAt?: string;\n  /** The `BreakType` that this `Break` was templated on. */\n  breakTypeId: string;\n  /** A human-readable name. */\n  name: string;\n  /**\n   * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of\n   * the break.\n   */\n  expectedDuration: string;\n  /**\n   * Whether this break counts towards time worked for compensation\n   * purposes.\n   */\n  isPaid: boolean;\n}\n\nexport const breakSchema: Schema<Break> = object({\n  id: ['id', optional(string())],\n  startAt: ['start_at', string()],\n  endAt: ['end_at', optional(string())],\n  breakTypeId: ['break_type_id', string()],\n  name: ['name', string()],\n  expectedDuration: ['expected_duration', string()],\n  isPaid: ['is_paid', boolean()],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** The hourly wage rate used to compensate an employee for this shift. */\nexport interface ShiftWage {\n  /**\n   * The name of the job performed during this shift. Square\n   * labor-reporting UIs might group shifts together by title.\n   */\n  title?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  hourlyRate?: Money;\n}\n\nexport const shiftWageSchema: Schema<ShiftWage> = object({\n  title: ['title', optional(string())],\n  hourlyRate: ['hourly_rate', optional(lazy(() => moneySchema))],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Break, breakSchema } from './break';\nimport { ShiftWage, shiftWageSchema } from './shiftWage';\n\n/**\n * A record of the hourly rate, start, and end times for a single work shift\n * for an employee. This might include a record of the start and end times for breaks\n * taken during the shift.\n */\nexport interface Shift {\n  /** The UUID for this object. */\n  id?: string;\n  /** The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead. */\n  employeeId?: string;\n  /**\n   * The ID of the location this shift occurred at. The location should be based on\n   * where the employee clocked in.\n   */\n  locationId?: string;\n  /**\n   * The read-only convenience value that is calculated from the location based\n   * on the `location_id`. Format: the IANA timezone database identifier for the\n   * location timezone.\n   */\n  timezone?: string;\n  /**\n   * RFC 3339; shifted to the location timezone + offset. Precision up to the\n   * minute is respected; seconds are truncated.\n   */\n  startAt: string;\n  /**\n   * RFC 3339; shifted to the timezone + offset. Precision up to the minute is\n   * respected; seconds are truncated.\n   */\n  endAt?: string;\n  /** The hourly wage rate used to compensate an employee for this shift. */\n  wage?: ShiftWage;\n  /** A list of all the paid or unpaid breaks that were taken during this shift. */\n  breaks?: Break[];\n  /** Enumerates the possible status of a `Shift`. */\n  status?: string;\n  /**\n   * Used for resolving concurrency issues. The request fails if the version\n   * provided does not match the server version at the time of the request. If not provided,\n   * Square executes a blind write; potentially overwriting data from another\n   * write.\n   */\n  version?: number;\n  /** A read-only timestamp in RFC 3339 format; presented in UTC. */\n  createdAt?: string;\n  /** A read-only timestamp in RFC 3339 format; presented in UTC. */\n  updatedAt?: string;\n  /** The ID of the team member this shift belongs to. Replaced `employee_id` at version \"2020-08-26\". */\n  teamMemberId?: string;\n}\n\nexport const shiftSchema: Schema<Shift> = object({\n  id: ['id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  timezone: ['timezone', optional(string())],\n  startAt: ['start_at', string()],\n  endAt: ['end_at', optional(string())],\n  wage: ['wage', optional(lazy(() => shiftWageSchema))],\n  breaks: ['breaks', optional(array(lazy(() => breakSchema)))],\n  status: ['status', optional(string())],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Shift, shiftSchema } from './shift';\n\n/** Represents a request to create a `Shift`. */\nexport interface CreateShiftRequest {\n  /** A unique string value to ensure the idempotency of the operation. */\n  idempotencyKey?: string;\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. This might include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift: Shift;\n}\n\nexport const createShiftRequestSchema: Schema<CreateShiftRequest> = object({\n  idempotencyKey: ['idempotency_key', optional(string())],\n  shift: ['shift', lazy(() => shiftSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Shift, shiftSchema } from './shift';\n\n/**\n * The response to a request to create a `Shift`. The response contains\n * the created `Shift` object and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface CreateShiftResponse {\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. This might include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift?: Shift;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createShiftResponseSchema: Schema<CreateShiftResponse> = object({\n  shift: ['shift', optional(lazy(() => shiftSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request to delete a `BreakType`. The response might contain a set\n * of `Error` objects if the request resulted in errors.\n */\nexport interface DeleteBreakTypeResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteBreakTypeResponseSchema: Schema<DeleteBreakTypeResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request to delete a `Shift`. The response might contain a set of\n * `Error` objects if the request resulted in errors.\n */\nexport interface DeleteShiftResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteShiftResponseSchema: Schema<DeleteShiftResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request to get a `BreakType`. The response contains\n * the requested `BreakType` objects and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface GetBreakTypeResponse {\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType?: BreakType;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const getBreakTypeResponseSchema: Schema<GetBreakTypeResponse> = object({\n  breakType: ['break_type', optional(lazy(() => breakTypeSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * The hourly wage rate that an employee earns on a `Shift` for doing the job\n * specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.\n */\nexport interface EmployeeWage {\n  /** The UUID for this object. */\n  id?: string;\n  /** The `Employee` that this wage is assigned to. */\n  employeeId?: string;\n  /** The job title that this wage relates to. */\n  title?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  hourlyRate?: Money;\n}\n\nexport const employeeWageSchema: Schema<EmployeeWage> = object({\n  id: ['id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  title: ['title', optional(string())],\n  hourlyRate: ['hourly_rate', optional(lazy(() => moneySchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { EmployeeWage, employeeWageSchema } from './employeeWage';\nimport { Error, errorSchema } from './error';\n\n/**\n * A response to a request to get an `EmployeeWage`. The response contains\n * the requested `EmployeeWage` objects and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface GetEmployeeWageResponse {\n  /**\n   * The hourly wage rate that an employee earns on a `Shift` for doing the job\n   * specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.\n   */\n  employeeWage?: EmployeeWage;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const getEmployeeWageResponseSchema: Schema<GetEmployeeWageResponse> = object(\n  {\n    employeeWage: ['employee_wage', optional(lazy(() => employeeWageSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Shift, shiftSchema } from './shift';\n\n/**\n * A response to a request to get a `Shift`. The response contains\n * the requested `Shift` object and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface GetShiftResponse {\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. This might include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift?: Shift;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const getShiftResponseSchema: Schema<GetShiftResponse> = object({\n  shift: ['shift', optional(lazy(() => shiftSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * The hourly wage rate that a team member earns on a `Shift` for doing the job\n * specified by the `title` property of this object.\n */\nexport interface TeamMemberWage {\n  /** The UUID for this object. */\n  id?: string;\n  /** The `TeamMember` that this wage is assigned to. */\n  teamMemberId?: string;\n  /** The job title that this wage relates to. */\n  title?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  hourlyRate?: Money;\n}\n\nexport const teamMemberWageSchema: Schema<TeamMemberWage> = object({\n  id: ['id', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n  title: ['title', optional(string())],\n  hourlyRate: ['hourly_rate', optional(lazy(() => moneySchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMemberWage, teamMemberWageSchema } from './teamMemberWage';\n\n/**\n * A response to a request to get a `TeamMemberWage`. The response contains\n * the requested `TeamMemberWage` objects and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface GetTeamMemberWageResponse {\n  /**\n   * The hourly wage rate that a team member earns on a `Shift` for doing the job\n   * specified by the `title` property of this object.\n   */\n  teamMemberWage?: TeamMemberWage;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const getTeamMemberWageResponseSchema: Schema<GetTeamMemberWageResponse> = object(\n  {\n    teamMemberWage: [\n      'team_member_wage',\n      optional(lazy(() => teamMemberWageSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request for a set of `BreakType` objects. The response contains\n * the requested `BreakType` objects and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface ListBreakTypesResponse {\n  /** A page of `BreakType` results. */\n  breakTypes?: BreakType[];\n  /**\n   * The value supplied in the subsequent request to fetch the next page\n   * of `BreakType` results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listBreakTypesResponseSchema: Schema<ListBreakTypesResponse> = object(\n  {\n    breakTypes: ['break_types', optional(array(lazy(() => breakTypeSchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { EmployeeWage, employeeWageSchema } from './employeeWage';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request for a set of `EmployeeWage` objects. The response contains\n * a set of `EmployeeWage` objects.\n */\nexport interface ListEmployeeWagesResponse {\n  /** A page of `EmployeeWage` results. */\n  employeeWages?: EmployeeWage[];\n  /**\n   * The value supplied in the subsequent request to fetch the next page\n   * of `EmployeeWage` results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listEmployeeWagesResponseSchema: Schema<ListEmployeeWagesResponse> = object(\n  {\n    employeeWages: [\n      'employee_wages',\n      optional(array(lazy(() => employeeWageSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMemberWage, teamMemberWageSchema } from './teamMemberWage';\n\n/**\n * The response to a request for a set of `TeamMemberWage` objects. The response contains\n * a set of `TeamMemberWage` objects.\n */\nexport interface ListTeamMemberWagesResponse {\n  /** A page of `TeamMemberWage` results. */\n  teamMemberWages?: TeamMemberWage[];\n  /**\n   * The value supplied in the subsequent request to fetch the next page\n   * of `TeamMemberWage` results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listTeamMemberWagesResponseSchema: Schema<ListTeamMemberWagesResponse> = object(\n  {\n    teamMemberWages: [\n      'team_member_wages',\n      optional(array(lazy(() => teamMemberWageSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * Sets the day of the week and hour of the day that a business starts a\n * workweek. This is used to calculate overtime pay.\n */\nexport interface WorkweekConfig {\n  /** The UUID for this object. */\n  id?: string;\n  /** The days of the week. */\n  startOfWeek: string;\n  /**\n   * The local time at which a business week ends. Represented as a\n   * string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are\n   * truncated).\n   */\n  startOfDayLocalTime: string;\n  /**\n   * Used for resolving concurrency issues. The request fails if the version\n   * provided does not match the server version at the time of the request. If not provided,\n   * Square executes a blind write; potentially overwriting data from another\n   * write.\n   */\n  version?: number;\n  /** A read-only timestamp in RFC 3339 format; presented in UTC. */\n  createdAt?: string;\n  /** A read-only timestamp in RFC 3339 format; presented in UTC. */\n  updatedAt?: string;\n}\n\nexport const workweekConfigSchema: Schema<WorkweekConfig> = object({\n  id: ['id', optional(string())],\n  startOfWeek: ['start_of_week', string()],\n  startOfDayLocalTime: ['start_of_day_local_time', string()],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { WorkweekConfig, workweekConfigSchema } from './workweekConfig';\n\n/**\n * The response to a request for a set of `WorkweekConfig` objects. The response contains\n * the requested `WorkweekConfig` objects and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface ListWorkweekConfigsResponse {\n  /** A page of `EmployeeWage` results. */\n  workweekConfigs?: WorkweekConfig[];\n  /**\n   * The value supplied in the subsequent request to fetch the next page of\n   * `EmployeeWage` results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listWorkweekConfigsResponseSchema: Schema<ListWorkweekConfigsResponse> = object(\n  {\n    workweekConfigs: [\n      'workweek_configs',\n      optional(array(lazy(() => workweekConfigSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A range defined by two dates. Used for filtering a query for Connect v2\n * objects that have date properties.\n */\nexport interface DateRange {\n  /**\n   * A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601\n   * extended format for calendar dates.\n   * The beginning of a date range (inclusive).\n   */\n  startDate?: string;\n  /**\n   * A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601\n   * extended format for calendar dates.\n   * The end of a date range (inclusive).\n   */\n  endDate?: string;\n}\n\nexport const dateRangeSchema: Schema<DateRange> = object({\n  startDate: ['start_date', optional(string())],\n  endDate: ['end_date', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { DateRange, dateRangeSchema } from './dateRange';\n\n/**\n * A `Shift` search query filter parameter that sets a range of days that\n * a `Shift` must start or end in before passing the filter condition.\n */\nexport interface ShiftWorkday {\n  /**\n   * A range defined by two dates. Used for filtering a query for Connect v2\n   * objects that have date properties.\n   */\n  dateRange?: DateRange;\n  /** Defines the logic used to apply a workday filter. */\n  matchShiftsBy?: string;\n  /**\n   * Location-specific timezones convert workdays to datetime filters.\n   * Every location included in the query must have a timezone or this field\n   * must be provided as a fallback. Format: the IANA timezone database\n   * identifier for the relevant timezone.\n   */\n  defaultTimezone?: string;\n}\n\nexport const shiftWorkdaySchema: Schema<ShiftWorkday> = object({\n  dateRange: ['date_range', optional(lazy(() => dateRangeSchema))],\n  matchShiftsBy: ['match_shifts_by', optional(string())],\n  defaultTimezone: ['default_timezone', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { ShiftWorkday, shiftWorkdaySchema } from './shiftWorkday';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/**\n * Defines a filter used in a search for `Shift` records. `AND` logic is\n * used by Square's servers to apply each filter property specified.\n */\nexport interface ShiftFilter {\n  /** Fetch shifts for the specified location. */\n  locationIds: string[];\n  /** Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead. */\n  employeeIds?: string[];\n  /** Specifies the `status` of `Shift` records to be returned. */\n  status?: string;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  start?: TimeRange;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  end?: TimeRange;\n  /**\n   * A `Shift` search query filter parameter that sets a range of days that\n   * a `Shift` must start or end in before passing the filter condition.\n   */\n  workday?: ShiftWorkday;\n  /** Fetch shifts for the specified team members. Replaced `employee_ids` at version \"2020-08-26\". */\n  teamMemberIds: string[];\n}\n\nexport const shiftFilterSchema: Schema<ShiftFilter> = object({\n  locationIds: ['location_ids', array(string())],\n  employeeIds: ['employee_ids', optional(array(string()))],\n  status: ['status', optional(string())],\n  start: ['start', optional(lazy(() => timeRangeSchema))],\n  end: ['end', optional(lazy(() => timeRangeSchema))],\n  workday: ['workday', optional(lazy(() => shiftWorkdaySchema))],\n  teamMemberIds: ['team_member_ids', array(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Sets the sort order of search results. */\nexport interface ShiftSort {\n  /** Enumerates the `Shift` fields to sort on. */\n  field?: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  order?: string;\n}\n\nexport const shiftSortSchema: Schema<ShiftSort> = object({\n  field: ['field', optional(string())],\n  order: ['order', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { ShiftFilter, shiftFilterSchema } from './shiftFilter';\nimport { ShiftSort, shiftSortSchema } from './shiftSort';\n\n/** The parameters of a `Shift` search query, which includes filter and sort options. */\nexport interface ShiftQuery {\n  /**\n   * Defines a filter used in a search for `Shift` records. `AND` logic is\n   * used by Square's servers to apply each filter property specified.\n   */\n  filter?: ShiftFilter;\n  /** Sets the sort order of search results. */\n  sort?: ShiftSort;\n}\n\nexport const shiftQuerySchema: Schema<ShiftQuery> = object({\n  filter: ['filter', optional(lazy(() => shiftFilterSchema))],\n  sort: ['sort', optional(lazy(() => shiftSortSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { ShiftQuery, shiftQuerySchema } from './shiftQuery';\n\n/** A request for a filtered and sorted set of `Shift` objects. */\nexport interface SearchShiftsRequest {\n  /** The parameters of a `Shift` search query, which includes filter and sort options. */\n  query?: ShiftQuery;\n  /** The number of resources in a page (200 by default). */\n  limit?: number;\n  /** An opaque cursor for fetching the next page. */\n  cursor?: string;\n}\n\nexport const searchShiftsRequestSchema: Schema<SearchShiftsRequest> = object({\n  query: ['query', optional(lazy(() => shiftQuerySchema))],\n  limit: ['limit', optional(number())],\n  cursor: ['cursor', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Shift, shiftSchema } from './shift';\n\n/**\n * The response to a request for `Shift` objects. The response contains\n * the requested `Shift` objects and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface SearchShiftsResponse {\n  /** Shifts. */\n  shifts?: Shift[];\n  /** An opaque cursor for fetching the next page. */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const searchShiftsResponseSchema: Schema<SearchShiftsResponse> = object({\n  shifts: ['shifts', optional(array(lazy(() => shiftSchema)))],\n  cursor: ['cursor', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, Schema } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\n\n/** A request to update a `BreakType`. */\nexport interface UpdateBreakTypeRequest {\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType: BreakType;\n}\n\nexport const updateBreakTypeRequestSchema: Schema<UpdateBreakTypeRequest> = object(\n  { breakType: ['break_type', lazy(() => breakTypeSchema)] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\nimport { Error, errorSchema } from './error';\n\n/**\n * A response to a request to update a `BreakType`. The response contains\n * the requested `BreakType` objects and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface UpdateBreakTypeResponse {\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType?: BreakType;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateBreakTypeResponseSchema: Schema<UpdateBreakTypeResponse> = object(\n  {\n    breakType: ['break_type', optional(lazy(() => breakTypeSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { Shift, shiftSchema } from './shift';\n\n/** A request to update a `Shift` object. */\nexport interface UpdateShiftRequest {\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. This might include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift: Shift;\n}\n\nexport const updateShiftRequestSchema: Schema<UpdateShiftRequest> = object({\n  shift: ['shift', lazy(() => shiftSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Shift, shiftSchema } from './shift';\n\n/**\n * The response to a request to update a `Shift`. The response contains\n * the updated `Shift` object and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface UpdateShiftResponse {\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. This might include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift?: Shift;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateShiftResponseSchema: Schema<UpdateShiftResponse> = object({\n  shift: ['shift', optional(lazy(() => shiftSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, Schema } from '../schema';\nimport { WorkweekConfig, workweekConfigSchema } from './workweekConfig';\n\n/** A request to update a `WorkweekConfig` object. */\nexport interface UpdateWorkweekConfigRequest {\n  /**\n   * Sets the day of the week and hour of the day that a business starts a\n   * workweek. This is used to calculate overtime pay.\n   */\n  workweekConfig: WorkweekConfig;\n}\n\nexport const updateWorkweekConfigRequestSchema: Schema<UpdateWorkweekConfigRequest> = object(\n  { workweekConfig: ['workweek_config', lazy(() => workweekConfigSchema)] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { WorkweekConfig, workweekConfigSchema } from './workweekConfig';\n\n/**\n * The response to a request to update a `WorkweekConfig` object. The response contains\n * the updated `WorkweekConfig` object and might contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface UpdateWorkweekConfigResponse {\n  /**\n   * Sets the day of the week and hour of the day that a business starts a\n   * workweek. This is used to calculate overtime pay.\n   */\n  workweekConfig?: WorkweekConfig;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateWorkweekConfigResponseSchema: Schema<UpdateWorkweekConfigResponse> = object(\n  {\n    workweekConfig: [\n      'workweek_config',\n      optional(lazy(() => workweekConfigSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateBreakTypeRequest,\n  createBreakTypeRequestSchema,\n} from '../models/createBreakTypeRequest';\nimport {\n  CreateBreakTypeResponse,\n  createBreakTypeResponseSchema,\n} from '../models/createBreakTypeResponse';\nimport {\n  CreateShiftRequest,\n  createShiftRequestSchema,\n} from '../models/createShiftRequest';\nimport {\n  CreateShiftResponse,\n  createShiftResponseSchema,\n} from '../models/createShiftResponse';\nimport {\n  DeleteBreakTypeResponse,\n  deleteBreakTypeResponseSchema,\n} from '../models/deleteBreakTypeResponse';\nimport {\n  DeleteShiftResponse,\n  deleteShiftResponseSchema,\n} from '../models/deleteShiftResponse';\nimport {\n  GetBreakTypeResponse,\n  getBreakTypeResponseSchema,\n} from '../models/getBreakTypeResponse';\nimport {\n  GetEmployeeWageResponse,\n  getEmployeeWageResponseSchema,\n} from '../models/getEmployeeWageResponse';\nimport {\n  GetShiftResponse,\n  getShiftResponseSchema,\n} from '../models/getShiftResponse';\nimport {\n  GetTeamMemberWageResponse,\n  getTeamMemberWageResponseSchema,\n} from '../models/getTeamMemberWageResponse';\nimport {\n  ListBreakTypesResponse,\n  listBreakTypesResponseSchema,\n} from '../models/listBreakTypesResponse';\nimport {\n  ListEmployeeWagesResponse,\n  listEmployeeWagesResponseSchema,\n} from '../models/listEmployeeWagesResponse';\nimport {\n  ListTeamMemberWagesResponse,\n  listTeamMemberWagesResponseSchema,\n} from '../models/listTeamMemberWagesResponse';\nimport {\n  ListWorkweekConfigsResponse,\n  listWorkweekConfigsResponseSchema,\n} from '../models/listWorkweekConfigsResponse';\nimport {\n  SearchShiftsRequest,\n  searchShiftsRequestSchema,\n} from '../models/searchShiftsRequest';\nimport {\n  SearchShiftsResponse,\n  searchShiftsResponseSchema,\n} from '../models/searchShiftsResponse';\nimport {\n  UpdateBreakTypeRequest,\n  updateBreakTypeRequestSchema,\n} from '../models/updateBreakTypeRequest';\nimport {\n  UpdateBreakTypeResponse,\n  updateBreakTypeResponseSchema,\n} from '../models/updateBreakTypeResponse';\nimport {\n  UpdateShiftRequest,\n  updateShiftRequestSchema,\n} from '../models/updateShiftRequest';\nimport {\n  UpdateShiftResponse,\n  updateShiftResponseSchema,\n} from '../models/updateShiftResponse';\nimport {\n  UpdateWorkweekConfigRequest,\n  updateWorkweekConfigRequestSchema,\n} from '../models/updateWorkweekConfigRequest';\nimport {\n  UpdateWorkweekConfigResponse,\n  updateWorkweekConfigResponseSchema,\n} from '../models/updateWorkweekConfigResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class LaborApi extends BaseApi {\n  /**\n   * Returns a paginated list of `BreakType` instances for a business.\n   *\n   * @param locationId  Filter the returned `BreakType` results to only those that are associated with the\n   *                              specified location.\n   * @param limit       The maximum number of `BreakType` results to return per page. The number can range\n   *                              between 1 and 200. The default is 200.\n   * @param cursor      A pointer to the next page of `BreakType` results to fetch.\n   * @return Response from the API call\n   */\n  async listBreakTypes(\n    locationId?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListBreakTypesResponse>> {\n    const req = this.createRequest('GET', '/v2/labor/break-types');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listBreakTypesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new `BreakType`.\n   *\n   * A `BreakType` is a template for creating `Break` objects.\n   * You must provide the following values in your request to this\n   * endpoint:\n   *\n   * - `location_id`\n   * - `break_name`\n   * - `expected_duration`\n   * - `is_paid`\n   *\n   * You can only have three `BreakType` instances per location. If you attempt to add a fourth\n   * `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\"\n   * is returned.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createBreakType(\n    body: CreateBreakTypeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateBreakTypeResponse>> {\n    const req = this.createRequest('POST', '/v2/labor/break-types');\n    const mapped = req.prepareArgs({\n      body: [body, createBreakTypeRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createBreakTypeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing `BreakType`.\n   *\n   * A `BreakType` can be deleted even if it is referenced from a `Shift`.\n   *\n   * @param id The UUID for the `BreakType` being deleted.\n   * @return Response from the API call\n   */\n  async deleteBreakType(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteBreakTypeResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/break-types/${mapped.id}`;\n    return req.callAsJson(deleteBreakTypeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single `BreakType` specified by `id`.\n   *\n   * @param id The UUID for the `BreakType` being retrieved.\n   * @return Response from the API call\n   */\n  async getBreakType(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetBreakTypeResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/break-types/${mapped.id}`;\n    return req.callAsJson(getBreakTypeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an existing `BreakType`.\n   *\n   * @param id           The UUID for the `BreakType` being updated.\n   * @param body         An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateBreakType(\n    id: string,\n    body: UpdateBreakTypeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateBreakTypeResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      id: [id, string()],\n      body: [body, updateBreakTypeRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/labor/break-types/${mapped.id}`;\n    return req.callAsJson(updateBreakTypeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a paginated list of `EmployeeWage` instances for a business.\n   *\n   * @param employeeId  Filter the returned wages to only those that are associated with the specified\n   *                              employee.\n   * @param limit       The maximum number of `EmployeeWage` results to return per page. The number can\n   *                              range between 1 and 200. The default is 200.\n   * @param cursor      A pointer to the next page of `EmployeeWage` results to fetch.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listEmployeeWages(\n    employeeId?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListEmployeeWagesResponse>> {\n    const req = this.createRequest('GET', '/v2/labor/employee-wages');\n    const mapped = req.prepareArgs({\n      employeeId: [employeeId, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('employee_id', mapped.employeeId);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.deprecated('LaborApi.listEmployeeWages');\n    return req.callAsJson(listEmployeeWagesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single `EmployeeWage` specified by `id`.\n   *\n   * @param id The UUID for the `EmployeeWage` being retrieved.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async getEmployeeWage(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetEmployeeWageResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/employee-wages/${mapped.id}`;\n    req.deprecated('LaborApi.getEmployeeWage');\n    return req.callAsJson(getEmployeeWageResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new `Shift`.\n   *\n   * A `Shift` represents a complete workday for a single employee.\n   * You must provide the following values in your request to this\n   * endpoint:\n   *\n   * - `location_id`\n   * - `employee_id`\n   * - `start_at`\n   *\n   * An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:\n   * - The `status` of the new `Shift` is `OPEN` and the employee has another\n   * shift with an `OPEN` status.\n   * - The `start_at` date is in the future.\n   * - The `start_at` or `end_at` date overlaps another shift for the same employee.\n   * - The `Break` instances are set in the request and a break `start_at`\n   * is before the `Shift.start_at`, a break `end_at` is after\n   * the `Shift.end_at`, or both.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createShift(\n    body: CreateShiftRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateShiftResponse>> {\n    const req = this.createRequest('POST', '/v2/labor/shifts');\n    const mapped = req.prepareArgs({ body: [body, createShiftRequestSchema] });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createShiftResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a paginated list of `Shift` records for a business.\n   * The list to be returned can be filtered by:\n   * - Location IDs.\n   * - Employee IDs.\n   * - Shift status (`OPEN` and `CLOSED`).\n   * - Shift start.\n   * - Shift end.\n   * - Workday details.\n   *\n   * The list can be sorted by:\n   * - `start_at`.\n   * - `end_at`.\n   * - `created_at`.\n   * - `updated_at`.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchShifts(\n    body: SearchShiftsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchShiftsResponse>> {\n    const req = this.createRequest('POST', '/v2/labor/shifts/search');\n    const mapped = req.prepareArgs({ body: [body, searchShiftsRequestSchema] });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchShiftsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a `Shift`.\n   *\n   * @param id The UUID for the `Shift` being deleted.\n   * @return Response from the API call\n   */\n  async deleteShift(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteShiftResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/shifts/${mapped.id}`;\n    return req.callAsJson(deleteShiftResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single `Shift` specified by `id`.\n   *\n   * @param id The UUID for the `Shift` being retrieved.\n   * @return Response from the API call\n   */\n  async getShift(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetShiftResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/shifts/${mapped.id}`;\n    return req.callAsJson(getShiftResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an existing `Shift`.\n   *\n   * When adding a `Break` to a `Shift`, any earlier `Break` instances in the `Shift` have\n   * the `end_at` property set to a valid RFC-3339 datetime string.\n   *\n   * When closing a `Shift`, all `Break` instances in the `Shift` must be complete with `end_at`\n   * set on each `Break`.\n   *\n   * @param id           The ID of the object being updated.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateShift(\n    id: string,\n    body: UpdateShiftRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateShiftResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      id: [id, string()],\n      body: [body, updateShiftRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/labor/shifts/${mapped.id}`;\n    return req.callAsJson(updateShiftResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a paginated list of `TeamMemberWage` instances for a business.\n   *\n   * @param teamMemberId   Filter the returned wages to only those that are associated with the specified\n   *                                 team member.\n   * @param limit          The maximum number of `TeamMemberWage` results to return per page. The number can\n   *                                 range between 1 and 200. The default is 200.\n   * @param cursor         A pointer to the next page of `EmployeeWage` results to fetch.\n   * @return Response from the API call\n   */\n  async listTeamMemberWages(\n    teamMemberId?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListTeamMemberWagesResponse>> {\n    const req = this.createRequest('GET', '/v2/labor/team-member-wages');\n    const mapped = req.prepareArgs({\n      teamMemberId: [teamMemberId, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('team_member_id', mapped.teamMemberId);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listTeamMemberWagesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single `TeamMemberWage` specified by `id `.\n   *\n   * @param id The UUID for the `TeamMemberWage` being retrieved.\n   * @return Response from the API call\n   */\n  async getTeamMemberWage(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetTeamMemberWageResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/team-member-wages/${mapped.id}`;\n    return req.callAsJson(getTeamMemberWageResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a list of `WorkweekConfig` instances for a business.\n   *\n   * @param limit  The maximum number of `WorkweekConfigs` results to return per page.\n   * @param cursor A pointer to the next page of `WorkweekConfig` results to fetch.\n   * @return Response from the API call\n   */\n  async listWorkweekConfigs(\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListWorkweekConfigsResponse>> {\n    const req = this.createRequest('GET', '/v2/labor/workweek-configs');\n    const mapped = req.prepareArgs({\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listWorkweekConfigsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a `WorkweekConfig`.\n   *\n   * @param id           The UUID for the `WorkweekConfig` object being updated.\n   * @param body         An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async updateWorkweekConfig(\n    id: string,\n    body: UpdateWorkweekConfigRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateWorkweekConfigResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      id: [id, string()],\n      body: [body, updateWorkweekConfigRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/labor/workweek-configs/${mapped.id}`;\n    return req.callAsJson(updateWorkweekConfigResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents a period of time during which a business location is open. */\nexport interface BusinessHoursPeriod {\n  /** Indicates the specific day  of the week. */\n  dayOfWeek?: string;\n  /**\n   * The start time of a business hours period, specified in local time using partial-time\n   * RFC 3339 format. For example, `8:30:00` for a period starting at 8:30 in the morning.\n   * Note that the seconds value is always :00, but it is appended for conformance to the RFC.\n   */\n  startLocalTime?: string;\n  /**\n   * The end time of a business hours period, specified in local time using partial-time\n   * RFC 3339 format. For example, `21:00:00` for a period ending at 9:00 in the evening.\n   * Note that the seconds value is always :00, but it is appended for conformance to the RFC.\n   */\n  endLocalTime?: string;\n}\n\nexport const businessHoursPeriodSchema: Schema<BusinessHoursPeriod> = object({\n  dayOfWeek: ['day_of_week', optional(string())],\n  startLocalTime: ['start_local_time', optional(string())],\n  endLocalTime: ['end_local_time', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport {\n  BusinessHoursPeriod,\n  businessHoursPeriodSchema,\n} from './businessHoursPeriod';\n\n/** The hours of operation for a location. */\nexport interface BusinessHours {\n  /** The list of time periods during which the business is open. There can be at most 10 periods per day. */\n  periods?: BusinessHoursPeriod[];\n}\n\nexport const businessHoursSchema: Schema<BusinessHours> = object({\n  periods: ['periods', optional(array(lazy(() => businessHoursPeriodSchema)))],\n});\n","import { number, object, optional, Schema } from '../schema';\n\n/** Latitude and longitude coordinates. */\nexport interface Coordinates {\n  /** The latitude of the coordinate expressed in degrees. */\n  latitude?: number;\n  /** The longitude of the coordinate expressed in degrees. */\n  longitude?: number;\n}\n\nexport const coordinatesSchema: Schema<Coordinates> = object({\n  latitude: ['latitude', optional(number())],\n  longitude: ['longitude', optional(number())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Identifiers for the location used by various governments for tax purposes. */\nexport interface TaxIds {\n  /**\n   * The EU VAT number for this location. For example, `IE3426675K`.\n   * If the EU VAT number is present, it is well-formed and has been\n   * validated with VIES, the VAT Information Exchange System.\n   */\n  euVat?: string;\n  /**\n   * The SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Etablissements)\n   * number is a 14-digit code issued by the French INSEE. For example, `39922799000021`.\n   */\n  frSiret?: string;\n  /**\n   * The French government uses the NAF (Nomenclature des Activités Françaises) to display and\n   * track economic statistical data. This is also called the APE (Activite Principale de l’Entreprise) code.\n   * For example, `6910Z`.\n   */\n  frNaf?: string;\n  /**\n   * The NIF (Numero de Identificacion Fiscal) number is a nine-character tax identifier used in Spain.\n   * If it is present, it has been validated. For example, `73628495A`.\n   */\n  esNif?: string;\n}\n\nexport const taxIdsSchema: Schema<TaxIds> = object({\n  euVat: ['eu_vat', optional(string())],\n  frSiret: ['fr_siret', optional(string())],\n  frNaf: ['fr_naf', optional(string())],\n  esNif: ['es_nif', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport { BusinessHours, businessHoursSchema } from './businessHours';\nimport { Coordinates, coordinatesSchema } from './coordinates';\nimport { TaxIds, taxIdsSchema } from './taxIds';\n\n/** Represents one of a business' [locations](https://developer.squareup.com/docs/locations-api). */\nexport interface Location {\n  /** A short generated string of letters and numbers that uniquely identifies this location instance. */\n  id?: string;\n  /**\n   * The name of the location.\n   * This information appears in the Seller Dashboard as the nickname.\n   * A location name must be unique within a seller account.\n   */\n  name?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  address?: Address;\n  /**\n   * The [IANA time zone](https://www.iana.org/time-zones) identifier for\n   * the time zone of the location. For example, `America/Los_Angeles`.\n   */\n  timezone?: string;\n  /**\n   * The Square features that are enabled for the location.\n   * See [LocationCapability]($m/LocationCapability) for possible values.\n   * See [LocationCapability](#type-locationcapability) for possible values\n   */\n  capabilities?: string[];\n  /** A location's status. */\n  status?: string;\n  /**\n   * The time when the location was created, in RFC 3339 format.\n   * For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).\n   */\n  createdAt?: string;\n  /** The ID of the merchant that owns the location. */\n  merchantId?: string;\n  /**\n   * Indicates the country associated with another entity, such as a business.\n   * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).\n   */\n  country?: string;\n  /**\n   * The language associated with the location, in\n   * [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).\n   * For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).\n   */\n  languageCode?: string;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currency?: string;\n  /** The phone number of the location. For example, `+1 855-700-6000`. */\n  phoneNumber?: string;\n  /** The name of the location's overall business. This name is present on receipts and other customer-facing branding. */\n  businessName?: string;\n  /** A location's type. */\n  type?: string;\n  /** The website URL of the location.  For example, `https://squareup.com`. */\n  websiteUrl?: string;\n  /** The hours of operation for a location. */\n  businessHours?: BusinessHours;\n  /** The email address of the location. This can be unique to the location and is not always the email address for the business owner or administrator. */\n  businessEmail?: string;\n  /** The description of the location. For example, `Main Street location`. */\n  description?: string;\n  /** The Twitter username of the location without the '@' symbol. For example, `Square`. */\n  twitterUsername?: string;\n  /** The Instagram username of the location without the '@' symbol. For example, `square`. */\n  instagramUsername?: string;\n  /** The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`. */\n  facebookUrl?: string;\n  /** Latitude and longitude coordinates. */\n  coordinates?: Coordinates;\n  /**\n   * The URL of the logo image for the location. When configured in the Seller\n   * Dashboard (Receipts section), the logo appears on transactions (such as receipts and invoices) that Square generates on behalf of the seller.\n   * This image should have a roughly square (1:1) aspect ratio and should be at least 200x200 pixels.\n   */\n  logoUrl?: string;\n  /** The URL of the Point of Sale background image for the location. */\n  posBackgroundUrl?: string;\n  /**\n   * A four-digit number that describes the kind of goods or services sold at the location.\n   * The [merchant category code (MCC)](https://developer.squareup.com/docs/locations-api#initialize-a-merchant-category-code) of the location as standardized by ISO 18245.\n   * For example, `5045`, for a location that sells computer goods and software.\n   */\n  mcc?: string;\n  /**\n   * The URL of a full-format logo image for the location. When configured in the Seller\n   * Dashboard (Receipts section), the logo appears on transactions (such as receipts and invoices) that Square generates on behalf of the seller.\n   * This image can be wider than it is tall and should be at least 1280x648 pixels.\n   */\n  fullFormatLogoUrl?: string;\n  /** Identifiers for the location used by various governments for tax purposes. */\n  taxIds?: TaxIds;\n}\n\nexport const locationSchema: Schema<Location> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  address: ['address', optional(lazy(() => addressSchema))],\n  timezone: ['timezone', optional(string())],\n  capabilities: ['capabilities', optional(array(string()))],\n  status: ['status', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  country: ['country', optional(string())],\n  languageCode: ['language_code', optional(string())],\n  currency: ['currency', optional(string())],\n  phoneNumber: ['phone_number', optional(string())],\n  businessName: ['business_name', optional(string())],\n  type: ['type', optional(string())],\n  websiteUrl: ['website_url', optional(string())],\n  businessHours: ['business_hours', optional(lazy(() => businessHoursSchema))],\n  businessEmail: ['business_email', optional(string())],\n  description: ['description', optional(string())],\n  twitterUsername: ['twitter_username', optional(string())],\n  instagramUsername: ['instagram_username', optional(string())],\n  facebookUrl: ['facebook_url', optional(string())],\n  coordinates: ['coordinates', optional(lazy(() => coordinatesSchema))],\n  logoUrl: ['logo_url', optional(string())],\n  posBackgroundUrl: ['pos_background_url', optional(string())],\n  mcc: ['mcc', optional(string())],\n  fullFormatLogoUrl: ['full_format_logo_url', optional(string())],\n  taxIds: ['tax_ids', optional(lazy(() => taxIdsSchema))],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Location, locationSchema } from './location';\n\n/** The request object for the [CreateLocation]($e/Locations/CreateLocation) endpoint. */\nexport interface CreateLocationRequest {\n  /** Represents one of a business' [locations](https://developer.squareup.com/docs/locations-api). */\n  location?: Location;\n}\n\nexport const createLocationRequestSchema: Schema<CreateLocationRequest> = object(\n  { location: ['location', optional(lazy(() => locationSchema))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Location, locationSchema } from './location';\n\n/** The response object returned by the [CreateLocation]($e/Locations/CreateLocation) endpoint. */\nexport interface CreateLocationResponse {\n  /** Information about [errors](https://developer.squareup.com/docs/build-basics/handling-errors) encountered during the request. */\n  errors?: Error[];\n  /** Represents one of a business' [locations](https://developer.squareup.com/docs/locations-api). */\n  location?: Location;\n}\n\nexport const createLocationResponseSchema: Schema<CreateLocationResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    location: ['location', optional(lazy(() => locationSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Location, locationSchema } from './location';\n\n/**\n * Defines the fields that are included in the response body of a request\n * to the [ListLocations]($e/Locations/ListLocations) endpoint.\n * Either `errors` or `locations` is present in a given response (never both).\n */\nexport interface ListLocationsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The business locations. */\n  locations?: Location[];\n}\n\nexport const listLocationsResponseSchema: Schema<ListLocationsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    locations: ['locations', optional(array(lazy(() => locationSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Location, locationSchema } from './location';\n\n/**\n * Defines the fields that the [RetrieveLocation]($e/Locations/RetrieveLocation)\n * endpoint returns in a response.\n */\nexport interface RetrieveLocationResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents one of a business' [locations](https://developer.squareup.com/docs/locations-api). */\n  location?: Location;\n}\n\nexport const retrieveLocationResponseSchema: Schema<RetrieveLocationResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    location: ['location', optional(lazy(() => locationSchema))],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Location, locationSchema } from './location';\n\n/** The request object for the [UpdateLocation]($e/Locations/UpdateLocation) endpoint. */\nexport interface UpdateLocationRequest {\n  /** Represents one of a business' [locations](https://developer.squareup.com/docs/locations-api). */\n  location?: Location;\n}\n\nexport const updateLocationRequestSchema: Schema<UpdateLocationRequest> = object(\n  { location: ['location', optional(lazy(() => locationSchema))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Location, locationSchema } from './location';\n\n/** The response object returned by the [UpdateLocation]($e/Locations/UpdateLocation) endpoint. */\nexport interface UpdateLocationResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents one of a business' [locations](https://developer.squareup.com/docs/locations-api). */\n  location?: Location;\n}\n\nexport const updateLocationResponseSchema: Schema<UpdateLocationResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    location: ['location', optional(lazy(() => locationSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateLocationRequest,\n  createLocationRequestSchema,\n} from '../models/createLocationRequest';\nimport {\n  CreateLocationResponse,\n  createLocationResponseSchema,\n} from '../models/createLocationResponse';\nimport {\n  ListLocationsResponse,\n  listLocationsResponseSchema,\n} from '../models/listLocationsResponse';\nimport {\n  RetrieveLocationResponse,\n  retrieveLocationResponseSchema,\n} from '../models/retrieveLocationResponse';\nimport {\n  UpdateLocationRequest,\n  updateLocationRequestSchema,\n} from '../models/updateLocationRequest';\nimport {\n  UpdateLocationResponse,\n  updateLocationResponseSchema,\n} from '../models/updateLocationResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class LocationsApi extends BaseApi {\n  /**\n   * Provides details about all of the seller's [locations](https://developer.squareup.com/docs/locations-\n   * api),\n   * including those with an inactive status.\n   *\n   * @return Response from the API call\n   */\n  async listLocations(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListLocationsResponse>> {\n    const req = this.createRequest('GET', '/v2/locations');\n    return req.callAsJson(listLocationsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a [location](https://developer.squareup.com/docs/locations-api).\n   * Creating new locations allows for separate configuration of receipt layouts, item prices,\n   * and sales reports. Developers can use locations to separate sales activity through applications\n   * that integrate with Square from sales activity elsewhere in a seller's account.\n   * Locations created programmatically with the Locations API last forever and\n   * are visible to the seller for their own management. Therefore, ensure that\n   * each location has a sensible and unique name.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createLocation(\n    body: CreateLocationRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateLocationResponse>> {\n    const req = this.createRequest('POST', '/v2/locations');\n    const mapped = req.prepareArgs({\n      body: [body, createLocationRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createLocationResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves details of a single location. Specify \"main\"\n   * as the location ID to retrieve details of the [main location](https://developer.squareup.\n   * com/docs/locations-api#about-the-main-location).\n   *\n   * @param locationId  The ID of the location to retrieve. Specify the string \"main\" to return the main\n   *                              location.\n   * @return Response from the API call\n   */\n  async retrieveLocation(\n    locationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveLocationResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}`;\n    return req.callAsJson(retrieveLocationResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a [location](https://developer.squareup.com/docs/locations-api).\n   *\n   * @param locationId   The ID of the location to update.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateLocation(\n    locationId: string,\n    body: UpdateLocationRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateLocationResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, updateLocationRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}`;\n    return req.callAsJson(updateLocationResponseSchema, requestOptions);\n  }\n}\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */\nexport interface LoyaltyEventAccumulatePoints {\n  /** The ID of the [loyalty program]($m/LoyaltyProgram). */\n  loyaltyProgramId?: string;\n  /** The number of points accumulated by the event. */\n  points?: number;\n  /**\n   * The ID of the [order]($m/Order) for which the buyer accumulated the points.\n   * This field is returned only if the Orders API is used to process orders.\n   */\n  orderId?: string;\n}\n\nexport const loyaltyEventAccumulatePointsSchema: Schema<LoyaltyEventAccumulatePoints> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', optional(string())],\n    points: ['points', optional(number())],\n    orderId: ['order_id', optional(string())],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport {\n  LoyaltyEventAccumulatePoints,\n  loyaltyEventAccumulatePointsSchema,\n} from './loyaltyEventAccumulatePoints';\n\n/** A request to accumulate points for a purchase. */\nexport interface AccumulateLoyaltyPointsRequest {\n  /** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */\n  accumulatePoints: LoyaltyEventAccumulatePoints;\n  /**\n   * A unique string that identifies the `AccumulateLoyaltyPoints` request.\n   * Keys can be any valid string but must be unique for every request.\n   */\n  idempotencyKey: string;\n  /** The [location]($m/Location) where the purchase was made. */\n  locationId: string;\n}\n\nexport const accumulateLoyaltyPointsRequestSchema: Schema<AccumulateLoyaltyPointsRequest> = object(\n  {\n    accumulatePoints: [\n      'accumulate_points',\n      lazy(() => loyaltyEventAccumulatePointsSchema),\n    ],\n    idempotencyKey: ['idempotency_key', string()],\n    locationId: ['location_id', string()],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `ADJUST_POINTS`. */\nexport interface LoyaltyEventAdjustPoints {\n  /** The Square-assigned ID of the [loyalty program]($m/LoyaltyProgram). */\n  loyaltyProgramId?: string;\n  /** The number of points added or removed. */\n  points: number;\n  /** The reason for the adjustment of points. */\n  reason?: string;\n}\n\nexport const loyaltyEventAdjustPointsSchema: Schema<LoyaltyEventAdjustPoints> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', optional(string())],\n    points: ['points', number()],\n    reason: ['reason', optional(string())],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `CREATE_REWARD`. */\nexport interface LoyaltyEventCreateReward {\n  /** The ID of the [loyalty program]($m/LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /**\n   * The Square-assigned ID of the created [loyalty reward]($m/LoyaltyReward).\n   * This field is returned only if the event source is `LOYALTY_API`.\n   */\n  rewardId?: string;\n  /** The loyalty points used to create the reward. */\n  points: number;\n}\n\nexport const loyaltyEventCreateRewardSchema: Schema<LoyaltyEventCreateReward> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', string()],\n    rewardId: ['reward_id', optional(string())],\n    points: ['points', number()],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `DELETE_REWARD`. */\nexport interface LoyaltyEventDeleteReward {\n  /** The ID of the [loyalty program]($m/LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /**\n   * The ID of the deleted [loyalty reward]($m/LoyaltyReward).\n   * This field is returned only if the event source is `LOYALTY_API`.\n   */\n  rewardId?: string;\n  /** The number of points returned to the loyalty account. */\n  points: number;\n}\n\nexport const loyaltyEventDeleteRewardSchema: Schema<LoyaltyEventDeleteReward> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', string()],\n    rewardId: ['reward_id', optional(string())],\n    points: ['points', number()],\n  }\n);\n","import { number, object, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `EXPIRE_POINTS`. */\nexport interface LoyaltyEventExpirePoints {\n  /** The Square-assigned ID of the [loyalty program]($m/LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /** The number of points expired. */\n  points: number;\n}\n\nexport const loyaltyEventExpirePointsSchema: Schema<LoyaltyEventExpirePoints> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', string()],\n    points: ['points', number()],\n  }\n);\n","import { number, object, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `OTHER`. */\nexport interface LoyaltyEventOther {\n  /** The Square-assigned ID of the [loyalty program]($m/LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /** The number of points added or removed. */\n  points: number;\n}\n\nexport const loyaltyEventOtherSchema: Schema<LoyaltyEventOther> = object({\n  loyaltyProgramId: ['loyalty_program_id', string()],\n  points: ['points', number()],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `REDEEM_REWARD`. */\nexport interface LoyaltyEventRedeemReward {\n  /** The ID of the [loyalty program]($m/LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /**\n   * The ID of the redeemed [loyalty reward]($m/LoyaltyReward).\n   * This field is returned only if the event source is `LOYALTY_API`.\n   */\n  rewardId?: string;\n  /**\n   * The ID of the [order]($m/Order) that redeemed the reward.\n   * This field is returned only if the Orders API is used to process orders.\n   */\n  orderId?: string;\n}\n\nexport const loyaltyEventRedeemRewardSchema: Schema<LoyaltyEventRedeemReward> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', string()],\n    rewardId: ['reward_id', optional(string())],\n    orderId: ['order_id', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyEventAccumulatePoints,\n  loyaltyEventAccumulatePointsSchema,\n} from './loyaltyEventAccumulatePoints';\nimport {\n  LoyaltyEventAdjustPoints,\n  loyaltyEventAdjustPointsSchema,\n} from './loyaltyEventAdjustPoints';\nimport {\n  LoyaltyEventCreateReward,\n  loyaltyEventCreateRewardSchema,\n} from './loyaltyEventCreateReward';\nimport {\n  LoyaltyEventDeleteReward,\n  loyaltyEventDeleteRewardSchema,\n} from './loyaltyEventDeleteReward';\nimport {\n  LoyaltyEventExpirePoints,\n  loyaltyEventExpirePointsSchema,\n} from './loyaltyEventExpirePoints';\nimport {\n  LoyaltyEventOther,\n  loyaltyEventOtherSchema,\n} from './loyaltyEventOther';\nimport {\n  LoyaltyEventRedeemReward,\n  loyaltyEventRedeemRewardSchema,\n} from './loyaltyEventRedeemReward';\n\n/**\n * Provides information about a loyalty event.\n * For more information, see [Search for Balance-Changing Loyalty Events](https://developer.squareup.com/docs/loyalty-api/loyalty-events).\n */\nexport interface LoyaltyEvent {\n  /** The Square-assigned ID of the loyalty event. */\n  id: string;\n  /** The type of the loyalty event. */\n  type: string;\n  /** The timestamp when the event was created, in RFC 3339 format. */\n  createdAt: string;\n  /** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */\n  accumulatePoints?: LoyaltyEventAccumulatePoints;\n  /** Provides metadata when the event `type` is `CREATE_REWARD`. */\n  createReward?: LoyaltyEventCreateReward;\n  /** Provides metadata when the event `type` is `REDEEM_REWARD`. */\n  redeemReward?: LoyaltyEventRedeemReward;\n  /** Provides metadata when the event `type` is `DELETE_REWARD`. */\n  deleteReward?: LoyaltyEventDeleteReward;\n  /** Provides metadata when the event `type` is `ADJUST_POINTS`. */\n  adjustPoints?: LoyaltyEventAdjustPoints;\n  /** The ID of the [loyalty account]($m/LoyaltyAccount) in which the event occurred. */\n  loyaltyAccountId: string;\n  /** The ID of the [location]($m/Location) where the event occurred. */\n  locationId?: string;\n  /** Defines whether the event was generated by the Square Point of Sale. */\n  source: string;\n  /** Provides metadata when the event `type` is `EXPIRE_POINTS`. */\n  expirePoints?: LoyaltyEventExpirePoints;\n  /** Provides metadata when the event `type` is `OTHER`. */\n  otherEvent?: LoyaltyEventOther;\n}\n\nexport const loyaltyEventSchema: Schema<LoyaltyEvent> = object({\n  id: ['id', string()],\n  type: ['type', string()],\n  createdAt: ['created_at', string()],\n  accumulatePoints: [\n    'accumulate_points',\n    optional(lazy(() => loyaltyEventAccumulatePointsSchema)),\n  ],\n  createReward: [\n    'create_reward',\n    optional(lazy(() => loyaltyEventCreateRewardSchema)),\n  ],\n  redeemReward: [\n    'redeem_reward',\n    optional(lazy(() => loyaltyEventRedeemRewardSchema)),\n  ],\n  deleteReward: [\n    'delete_reward',\n    optional(lazy(() => loyaltyEventDeleteRewardSchema)),\n  ],\n  adjustPoints: [\n    'adjust_points',\n    optional(lazy(() => loyaltyEventAdjustPointsSchema)),\n  ],\n  loyaltyAccountId: ['loyalty_account_id', string()],\n  locationId: ['location_id', optional(string())],\n  source: ['source', string()],\n  expirePoints: [\n    'expire_points',\n    optional(lazy(() => loyaltyEventExpirePointsSchema)),\n  ],\n  otherEvent: ['other_event', optional(lazy(() => loyaltyEventOtherSchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyEvent, loyaltyEventSchema } from './loyaltyEvent';\n\n/** A response containing the resulting loyalty event. */\nexport interface AccumulateLoyaltyPointsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Provides information about a loyalty event.\n   * For more information, see [Search for Balance-Changing Loyalty Events](https://developer.squareup.com/docs/loyalty-api/loyalty-events).\n   */\n  event?: LoyaltyEvent;\n}\n\nexport const accumulateLoyaltyPointsResponseSchema: Schema<AccumulateLoyaltyPointsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    event: ['event', optional(lazy(() => loyaltyEventSchema))],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport {\n  LoyaltyEventAdjustPoints,\n  loyaltyEventAdjustPointsSchema,\n} from './loyaltyEventAdjustPoints';\n\n/** A request to adjust (add or subtract) points manually. */\nexport interface AdjustLoyaltyPointsRequest {\n  /**\n   * A unique string that identifies this `AdjustLoyaltyPoints` request.\n   * Keys can be any valid string, but must be unique for every request.\n   */\n  idempotencyKey: string;\n  /** Provides metadata when the event `type` is `ADJUST_POINTS`. */\n  adjustPoints: LoyaltyEventAdjustPoints;\n}\n\nexport const adjustLoyaltyPointsRequestSchema: Schema<AdjustLoyaltyPointsRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    adjustPoints: ['adjust_points', lazy(() => loyaltyEventAdjustPointsSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyEvent, loyaltyEventSchema } from './loyaltyEvent';\n\n/**\n * A response that includes the loyalty event that\n * resulted from the successful API call.\n */\nexport interface AdjustLoyaltyPointsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Provides information about a loyalty event.\n   * For more information, see [Search for Balance-Changing Loyalty Events](https://developer.squareup.com/docs/loyalty-api/loyalty-events).\n   */\n  event?: LoyaltyEvent;\n}\n\nexport const adjustLoyaltyPointsResponseSchema: Schema<AdjustLoyaltyPointsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    event: ['event', optional(lazy(() => loyaltyEventSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * A request to calculate the points that a buyer can earn from\n * a specified purchase.\n */\nexport interface CalculateLoyaltyPointsRequest {\n  /**\n   * The [order]($m/Order) ID for which to calculate the points.\n   * Specify this field if your application uses the Orders API to process orders.\n   * Otherwise, specify the `transaction_amount_money`.\n   */\n  orderId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  transactionAmountMoney?: Money;\n}\n\nexport const calculateLoyaltyPointsRequestSchema: Schema<CalculateLoyaltyPointsRequest> = object(\n  {\n    orderId: ['order_id', optional(string())],\n    transactionAmountMoney: [\n      'transaction_amount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n  }\n);\n","import { array, lazy, number, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * A response that includes the points that the buyer can earn from\n * a specified purchase.\n */\nexport interface CalculateLoyaltyPointsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The points that the buyer can earn from a specified purchase. */\n  points?: number;\n}\n\nexport const calculateLoyaltyPointsResponseSchema: Schema<CalculateLoyaltyPointsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    points: ['points', optional(number())],\n  }\n);\n","import { number, object, Schema, string } from '../schema';\n\n/** Represents a set of points for a loyalty account that are scheduled to expire on a specific date. */\nexport interface LoyaltyAccountExpiringPointDeadline {\n  /** The number of points scheduled to expire at the `expires_at` timestamp. */\n  points: number;\n  /** The timestamp of when the points are scheduled to expire, in RFC 3339 format. */\n  expiresAt: string;\n}\n\nexport const loyaltyAccountExpiringPointDeadlineSchema: Schema<LoyaltyAccountExpiringPointDeadline> = object(\n  { points: ['points', number()], expiresAt: ['expires_at', string()] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents the mapping that associates a loyalty account with a buyer.\n * Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see\n * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).\n */\nexport interface LoyaltyAccountMapping {\n  /** The Square-assigned ID of the mapping. */\n  id?: string;\n  /** The timestamp when the mapping was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The phone number of the buyer, in E.164 format. For example, \"+14155551111\". */\n  phoneNumber?: string;\n}\n\nexport const loyaltyAccountMappingSchema: Schema<LoyaltyAccountMapping> = object(\n  {\n    id: ['id', optional(string())],\n    createdAt: ['created_at', optional(string())],\n    phoneNumber: ['phone_number', optional(string())],\n  }\n);\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  LoyaltyAccountExpiringPointDeadline,\n  loyaltyAccountExpiringPointDeadlineSchema,\n} from './loyaltyAccountExpiringPointDeadline';\nimport {\n  LoyaltyAccountMapping,\n  loyaltyAccountMappingSchema,\n} from './loyaltyAccountMapping';\n\n/**\n * Describes a loyalty account in a [loyalty program]($m/LoyaltyProgram). For more information, see\n * [Create and Retrieve Loyalty Accounts](https://developer.squareup.com/docs/loyalty-api/loyalty-accounts).\n */\nexport interface LoyaltyAccount {\n  /** The Square-assigned ID of the loyalty account. */\n  id?: string;\n  /** The Square-assigned ID of the [loyalty program]($m/LoyaltyProgram) to which the account belongs. */\n  programId: string;\n  /**\n   * The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.\n   * Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.\n   */\n  balance?: number;\n  /** The total points accrued during the lifetime of the account. */\n  lifetimePoints?: number;\n  /** The Square-assigned ID of the [customer]($m/Customer) that is associated with the account. */\n  customerId?: string;\n  /**\n   * The timestamp when the buyer joined the loyalty program, in RFC 3339 format. This field is used to display the **Enrolled On** or **Member Since** date in first-party Square products.\n   * If this field is not set in a `CreateLoyaltyAccount` request, Square populates it after the buyer's first action on their account\n   * (when `AccumulateLoyaltyPoints` or `CreateLoyaltyReward` is called). In first-party flows, Square populates the field when the buyer agrees to the terms of service in Square Point of Sale.\n   * This field is typically specified in a `CreateLoyaltyAccount` request when creating a loyalty account for a buyer who already interacted with their account.\n   * For example, you would set this field when migrating accounts from an external system. The timestamp in the request can represent a current or previous date and time, but it cannot be set for the future.\n   */\n  enrolledAt?: string;\n  /** The timestamp when the loyalty account was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the loyalty account was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /**\n   * Represents the mapping that associates a loyalty account with a buyer.\n   * Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see\n   * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).\n   */\n  mapping?: LoyaltyAccountMapping;\n  /**\n   * The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.\n   * The total number of points in this field equals the number of points in the `balance` field.\n   */\n  expiringPointDeadlines?: LoyaltyAccountExpiringPointDeadline[];\n}\n\nexport const loyaltyAccountSchema: Schema<LoyaltyAccount> = object({\n  id: ['id', optional(string())],\n  programId: ['program_id', string()],\n  balance: ['balance', optional(number())],\n  lifetimePoints: ['lifetime_points', optional(number())],\n  customerId: ['customer_id', optional(string())],\n  enrolledAt: ['enrolled_at', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  mapping: ['mapping', optional(lazy(() => loyaltyAccountMappingSchema))],\n  expiringPointDeadlines: [\n    'expiring_point_deadlines',\n    optional(array(lazy(() => loyaltyAccountExpiringPointDeadlineSchema))),\n  ],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { LoyaltyAccount, loyaltyAccountSchema } from './loyaltyAccount';\n\n/** A request to create a new loyalty account. */\nexport interface CreateLoyaltyAccountRequest {\n  /**\n   * Describes a loyalty account in a [loyalty program]($m/LoyaltyProgram). For more information, see\n   * [Create and Retrieve Loyalty Accounts](https://developer.squareup.com/docs/loyalty-api/loyalty-accounts).\n   */\n  loyaltyAccount: LoyaltyAccount;\n  /**\n   * A unique string that identifies this `CreateLoyaltyAccount` request.\n   * Keys can be any valid string, but must be unique for every request.\n   */\n  idempotencyKey: string;\n}\n\nexport const createLoyaltyAccountRequestSchema: Schema<CreateLoyaltyAccountRequest> = object(\n  {\n    loyaltyAccount: ['loyalty_account', lazy(() => loyaltyAccountSchema)],\n    idempotencyKey: ['idempotency_key', string()],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyAccount, loyaltyAccountSchema } from './loyaltyAccount';\n\n/** A response that includes loyalty account created. */\nexport interface CreateLoyaltyAccountResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Describes a loyalty account in a [loyalty program]($m/LoyaltyProgram). For more information, see\n   * [Create and Retrieve Loyalty Accounts](https://developer.squareup.com/docs/loyalty-api/loyalty-accounts).\n   */\n  loyaltyAccount?: LoyaltyAccount;\n}\n\nexport const createLoyaltyAccountResponseSchema: Schema<CreateLoyaltyAccountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    loyaltyAccount: [\n      'loyalty_account',\n      optional(lazy(() => loyaltyAccountSchema)),\n    ],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a contract to redeem loyalty points for a [reward tier]($m/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state.\n * For more information, see [Manage loyalty rewards](https://developer.squareup.com/docs/loyalty-api/loyalty-rewards).\n */\nexport interface LoyaltyReward {\n  /** The Square-assigned ID of the loyalty reward. */\n  id?: string;\n  /** The status of the loyalty reward. */\n  status?: string;\n  /** The Square-assigned ID of the [loyalty account]($m/LoyaltyAccount) to which the reward belongs. */\n  loyaltyAccountId: string;\n  /** The Square-assigned ID of the [reward tier]($m/LoyaltyProgramRewardTier) used to create the reward. */\n  rewardTierId: string;\n  /** The number of loyalty points used for the reward. */\n  points?: number;\n  /** The Square-assigned ID of the [order]($m/Order) to which the reward is attached. */\n  orderId?: string;\n  /** The timestamp when the reward was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the reward was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /** The timestamp when the reward was redeemed, in RFC 3339 format. */\n  redeemedAt?: string;\n}\n\nexport const loyaltyRewardSchema: Schema<LoyaltyReward> = object({\n  id: ['id', optional(string())],\n  status: ['status', optional(string())],\n  loyaltyAccountId: ['loyalty_account_id', string()],\n  rewardTierId: ['reward_tier_id', string()],\n  points: ['points', optional(number())],\n  orderId: ['order_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  redeemedAt: ['redeemed_at', optional(string())],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { LoyaltyReward, loyaltyRewardSchema } from './loyaltyReward';\n\n/** A request to create a loyalty reward. */\nexport interface CreateLoyaltyRewardRequest {\n  /**\n   * Represents a contract to redeem loyalty points for a [reward tier]($m/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state.\n   * For more information, see [Manage loyalty rewards](https://developer.squareup.com/docs/loyalty-api/loyalty-rewards).\n   */\n  reward: LoyaltyReward;\n  /**\n   * A unique string that identifies this `CreateLoyaltyReward` request.\n   * Keys can be any valid string, but must be unique for every request.\n   */\n  idempotencyKey: string;\n}\n\nexport const createLoyaltyRewardRequestSchema: Schema<CreateLoyaltyRewardRequest> = object(\n  {\n    reward: ['reward', lazy(() => loyaltyRewardSchema)],\n    idempotencyKey: ['idempotency_key', string()],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyReward, loyaltyRewardSchema } from './loyaltyReward';\n\n/** A response that includes the loyalty reward created. */\nexport interface CreateLoyaltyRewardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a contract to redeem loyalty points for a [reward tier]($m/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state.\n   * For more information, see [Manage loyalty rewards](https://developer.squareup.com/docs/loyalty-api/loyalty-rewards).\n   */\n  reward?: LoyaltyReward;\n}\n\nexport const createLoyaltyRewardResponseSchema: Schema<CreateLoyaltyRewardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    reward: ['reward', optional(lazy(() => loyaltyRewardSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/** A response returned by the API call. */\nexport interface DeleteLoyaltyRewardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteLoyaltyRewardResponseSchema: Schema<DeleteLoyaltyRewardResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Represents additional data for rules with the `CATEGORY` accrual type. */\nexport interface LoyaltyProgramAccrualRuleCategoryData {\n  /**\n   * The ID of the `CATEGORY` [catalog object]($m/CatalogObject) that buyers can purchase to earn\n   * points.\n   */\n  categoryId: string;\n}\n\nexport const loyaltyProgramAccrualRuleCategoryDataSchema: Schema<LoyaltyProgramAccrualRuleCategoryData> = object(\n  { categoryId: ['category_id', string()] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Represents additional data for rules with the `ITEM_VARIATION` accrual type. */\nexport interface LoyaltyProgramAccrualRuleItemVariationData {\n  /**\n   * The ID of the `ITEM_VARIATION` [catalog object]($m/CatalogObject) that buyers can purchase to earn\n   * points.\n   */\n  itemVariationId: string;\n}\n\nexport const loyaltyProgramAccrualRuleItemVariationDataSchema: Schema<LoyaltyProgramAccrualRuleItemVariationData> = object(\n  { itemVariationId: ['item_variation_id', string()] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents additional data for rules with the `SPEND` accrual type. */\nexport interface LoyaltyProgramAccrualRuleSpendData {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * The IDs of any `CATEGORY` catalog objects that are excluded from points accrual.\n   * You can use the [BatchRetrieveCatalogObjects]($e/Catalog/BatchRetrieveCatalogObjects)\n   * endpoint to retrieve information about the excluded categories.\n   */\n  excludedCategoryIds?: string[];\n  /**\n   * The IDs of any `ITEM_VARIATION` catalog objects that are excluded from points accrual.\n   * You can use the [BatchRetrieveCatalogObjects]($e/Catalog/BatchRetrieveCatalogObjects)\n   * endpoint to retrieve information about the excluded item variations.\n   */\n  excludedItemVariationIds?: string[];\n  /**\n   * Indicates how taxes should be treated when calculating the purchase amount used for loyalty points accrual.\n   * This setting applies only to `SPEND` accrual rules or `VISIT` accrual rules that have a minimum spend requirement.\n   */\n  taxMode: string;\n}\n\nexport const loyaltyProgramAccrualRuleSpendDataSchema: Schema<LoyaltyProgramAccrualRuleSpendData> = object(\n  {\n    amountMoney: ['amount_money', lazy(() => moneySchema)],\n    excludedCategoryIds: ['excluded_category_ids', optional(array(string()))],\n    excludedItemVariationIds: [\n      'excluded_item_variation_ids',\n      optional(array(string())),\n    ],\n    taxMode: ['tax_mode', string()],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents additional data for rules with the `VISIT` accrual type. */\nexport interface LoyaltyProgramAccrualRuleVisitData {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  minimumAmountMoney?: Money;\n  /**\n   * Indicates how taxes should be treated when calculating the purchase amount used for loyalty points accrual.\n   * This setting applies only to `SPEND` accrual rules or `VISIT` accrual rules that have a minimum spend requirement.\n   */\n  taxMode: string;\n}\n\nexport const loyaltyProgramAccrualRuleVisitDataSchema: Schema<LoyaltyProgramAccrualRuleVisitData> = object(\n  {\n    minimumAmountMoney: [\n      'minimum_amount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    taxMode: ['tax_mode', string()],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyProgramAccrualRuleCategoryData,\n  loyaltyProgramAccrualRuleCategoryDataSchema,\n} from './loyaltyProgramAccrualRuleCategoryData';\nimport {\n  LoyaltyProgramAccrualRuleItemVariationData,\n  loyaltyProgramAccrualRuleItemVariationDataSchema,\n} from './loyaltyProgramAccrualRuleItemVariationData';\nimport {\n  LoyaltyProgramAccrualRuleSpendData,\n  loyaltyProgramAccrualRuleSpendDataSchema,\n} from './loyaltyProgramAccrualRuleSpendData';\nimport {\n  LoyaltyProgramAccrualRuleVisitData,\n  loyaltyProgramAccrualRuleVisitDataSchema,\n} from './loyaltyProgramAccrualRuleVisitData';\n\n/** Defines an accrual rule, which is how buyers can earn points. */\nexport interface LoyaltyProgramAccrualRule {\n  /** The type of the accrual rule that defines how buyers can earn points. */\n  accrualType: string;\n  /**\n   * The number of points that\n   * buyers earn based on the `accrual_type`.\n   */\n  points?: number;\n  /** Represents additional data for rules with the `VISIT` accrual type. */\n  visitData?: LoyaltyProgramAccrualRuleVisitData;\n  /** Represents additional data for rules with the `SPEND` accrual type. */\n  spendData?: LoyaltyProgramAccrualRuleSpendData;\n  /** Represents additional data for rules with the `ITEM_VARIATION` accrual type. */\n  itemVariationData?: LoyaltyProgramAccrualRuleItemVariationData;\n  /** Represents additional data for rules with the `CATEGORY` accrual type. */\n  categoryData?: LoyaltyProgramAccrualRuleCategoryData;\n}\n\nexport const loyaltyProgramAccrualRuleSchema: Schema<LoyaltyProgramAccrualRule> = object(\n  {\n    accrualType: ['accrual_type', string()],\n    points: ['points', optional(number())],\n    visitData: [\n      'visit_data',\n      optional(lazy(() => loyaltyProgramAccrualRuleVisitDataSchema)),\n    ],\n    spendData: [\n      'spend_data',\n      optional(lazy(() => loyaltyProgramAccrualRuleSpendDataSchema)),\n    ],\n    itemVariationData: [\n      'item_variation_data',\n      optional(lazy(() => loyaltyProgramAccrualRuleItemVariationDataSchema)),\n    ],\n    categoryData: [\n      'category_data',\n      optional(lazy(() => loyaltyProgramAccrualRuleCategoryDataSchema)),\n    ],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Describes when the loyalty program expires. */\nexport interface LoyaltyProgramExpirationPolicy {\n  /**\n   * The number of months before points expire, in `P[n]M` RFC 3339 duration format. For example, a value of `P12M` represents a duration of 12 months.\n   * Points are valid through the last day of the month in which they are scheduled to expire. For example, with a  `P12M` duration, points earned on July 6, 2020 expire on August 1, 2021.\n   */\n  expirationDuration: string;\n}\n\nexport const loyaltyProgramExpirationPolicySchema: Schema<LoyaltyProgramExpirationPolicy> = object(\n  { expirationDuration: ['expiration_duration', string()] }\n);\n","import { bigint, object, optional, Schema, string } from '../schema';\n\n/**\n * A reference to a Catalog object at a specific version. In general this is\n * used as an entry point into a graph of catalog objects, where the objects exist\n * at a specific version.\n */\nexport interface CatalogObjectReference {\n  /** The ID of the referenced object. */\n  objectId?: string;\n  /** The version of the object. */\n  catalogVersion?: bigint;\n}\n\nexport const catalogObjectReferenceSchema: Schema<CatalogObjectReference> = object(\n  {\n    objectId: ['object_id', optional(string())],\n    catalogVersion: ['catalog_version', optional(bigint())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details\n * are now defined using a catalog pricing rule and other catalog objects. For more information, see\n * [Getting discount details for a reward tier](https://developer.squareup.com/docs/loyalty-api/loyalty-rewards#get-discount-details).\n */\nexport interface LoyaltyProgramRewardDefinition {\n  /**\n   * Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. Discount details\n   * are now defined using a catalog pricing rule and other catalog objects. For more information, see\n   * [Getting discount details for a reward tier](https://developer.squareup.com/docs/loyalty-api/loyalty-rewards#get-discount-details).\n   */\n  scope: string;\n  /**\n   * The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. Discount details\n   * are now defined using a catalog pricing rule and other catalog objects. For more information, see\n   * [Getting discount details for a reward tier](https://developer.squareup.com/docs/loyalty-api/loyalty-rewards#get-discount-details).\n   */\n  discountType: string;\n  /**\n   * The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`.\n   * For example, a 7.25% off discount will be represented as \"7.25\". DEPRECATED at version 2020-12-16. You can find this\n   * information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.\n   */\n  percentageDiscount?: string;\n  /**\n   * The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field.\n   * DEPRECATED at version 2020-12-16. You can find this information in the `product_set_data.product_ids_any` field\n   * of the `PRODUCT_SET` catalog object referenced by the pricing rule.\n   */\n  catalogObjectIds?: string[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  fixedDiscountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  maxDiscountMoney?: Money;\n}\n\nexport const loyaltyProgramRewardDefinitionSchema: Schema<LoyaltyProgramRewardDefinition> = object(\n  {\n    scope: ['scope', string()],\n    discountType: ['discount_type', string()],\n    percentageDiscount: ['percentage_discount', optional(string())],\n    catalogObjectIds: ['catalog_object_ids', optional(array(string()))],\n    fixedDiscountMoney: [\n      'fixed_discount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    maxDiscountMoney: ['max_discount_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  CatalogObjectReference,\n  catalogObjectReferenceSchema,\n} from './catalogObjectReference';\nimport {\n  LoyaltyProgramRewardDefinition,\n  loyaltyProgramRewardDefinitionSchema,\n} from './loyaltyProgramRewardDefinition';\n\n/** Represents a reward tier in a loyalty program. A reward tier defines how buyers can redeem points for a reward, such as the number of points required and the value and scope of the discount. A loyalty program can offer multiple reward tiers. */\nexport interface LoyaltyProgramRewardTier {\n  /** The Square-assigned ID of the reward tier. */\n  id: string;\n  /** The points exchanged for the reward tier. */\n  points: number;\n  /** The name of the reward tier. */\n  name: string;\n  /**\n   * Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details\n   * are now defined using a catalog pricing rule and other catalog objects. For more information, see\n   * [Getting discount details for a reward tier](https://developer.squareup.com/docs/loyalty-api/loyalty-rewards#get-discount-details).\n   */\n  definition: LoyaltyProgramRewardDefinition;\n  /** The timestamp when the reward tier was created, in RFC 3339 format. */\n  createdAt: string;\n  /**\n   * A reference to a Catalog object at a specific version. In general this is\n   * used as an entry point into a graph of catalog objects, where the objects exist\n   * at a specific version.\n   */\n  pricingRuleReference?: CatalogObjectReference;\n}\n\nexport const loyaltyProgramRewardTierSchema: Schema<LoyaltyProgramRewardTier> = object(\n  {\n    id: ['id', string()],\n    points: ['points', number()],\n    name: ['name', string()],\n    definition: [\n      'definition',\n      lazy(() => loyaltyProgramRewardDefinitionSchema),\n    ],\n    createdAt: ['created_at', string()],\n    pricingRuleReference: [\n      'pricing_rule_reference',\n      optional(lazy(() => catalogObjectReferenceSchema)),\n    ],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Represents the naming used for loyalty points. */\nexport interface LoyaltyProgramTerminology {\n  /** A singular unit for a point (for example, 1 point is called 1 star). */\n  one: string;\n  /** A plural unit for point (for example, 10 points is called 10 stars). */\n  other: string;\n}\n\nexport const loyaltyProgramTerminologySchema: Schema<LoyaltyProgramTerminology> = object(\n  { one: ['one', string()], other: ['other', string()] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyProgramAccrualRule,\n  loyaltyProgramAccrualRuleSchema,\n} from './loyaltyProgramAccrualRule';\nimport {\n  LoyaltyProgramExpirationPolicy,\n  loyaltyProgramExpirationPolicySchema,\n} from './loyaltyProgramExpirationPolicy';\nimport {\n  LoyaltyProgramRewardTier,\n  loyaltyProgramRewardTierSchema,\n} from './loyaltyProgramRewardTier';\nimport {\n  LoyaltyProgramTerminology,\n  loyaltyProgramTerminologySchema,\n} from './loyaltyProgramTerminology';\n\n/**\n * Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards.\n * Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard.\n * For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).\n */\nexport interface LoyaltyProgram {\n  /**\n   * The Square-assigned ID of the loyalty program. Updates to\n   * the loyalty program do not modify the identifier.\n   */\n  id: string;\n  /** Indicates whether the program is currently active. */\n  status: string;\n  /** The list of rewards for buyers, sorted by ascending points. */\n  rewardTiers: LoyaltyProgramRewardTier[];\n  /** Describes when the loyalty program expires. */\n  expirationPolicy?: LoyaltyProgramExpirationPolicy;\n  /** Represents the naming used for loyalty points. */\n  terminology: LoyaltyProgramTerminology;\n  /** The [locations]($m/Location) at which the program is active. */\n  locationIds: string[];\n  /** The timestamp when the program was created, in RFC 3339 format. */\n  createdAt: string;\n  /** The timestamp when the reward was last updated, in RFC 3339 format. */\n  updatedAt: string;\n  /** Defines how buyers can earn loyalty points. */\n  accrualRules: LoyaltyProgramAccrualRule[];\n}\n\nexport const loyaltyProgramSchema: Schema<LoyaltyProgram> = object({\n  id: ['id', string()],\n  status: ['status', string()],\n  rewardTiers: [\n    'reward_tiers',\n    array(lazy(() => loyaltyProgramRewardTierSchema)),\n  ],\n  expirationPolicy: [\n    'expiration_policy',\n    optional(lazy(() => loyaltyProgramExpirationPolicySchema)),\n  ],\n  terminology: ['terminology', lazy(() => loyaltyProgramTerminologySchema)],\n  locationIds: ['location_ids', array(string())],\n  createdAt: ['created_at', string()],\n  updatedAt: ['updated_at', string()],\n  accrualRules: [\n    'accrual_rules',\n    array(lazy(() => loyaltyProgramAccrualRuleSchema)),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyProgram, loyaltyProgramSchema } from './loyaltyProgram';\n\n/** A response that contains all loyalty programs. */\nexport interface ListLoyaltyProgramsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** A list of `LoyaltyProgram` for the merchant. */\n  programs?: LoyaltyProgram[];\n}\n\nexport const listLoyaltyProgramsResponseSchema: Schema<ListLoyaltyProgramsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    programs: ['programs', optional(array(lazy(() => loyaltyProgramSchema)))],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** A request to redeem a loyalty reward. */\nexport interface RedeemLoyaltyRewardRequest {\n  /**\n   * A unique string that identifies this `RedeemLoyaltyReward` request.\n   * Keys can be any valid string, but must be unique for every request.\n   */\n  idempotencyKey: string;\n  /** The ID of the [location]($m/Location) where the reward is redeemed. */\n  locationId: string;\n}\n\nexport const redeemLoyaltyRewardRequestSchema: Schema<RedeemLoyaltyRewardRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    locationId: ['location_id', string()],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyEvent, loyaltyEventSchema } from './loyaltyEvent';\n\n/** A response that includes the `LoyaltyEvent` published for redeeming the reward. */\nexport interface RedeemLoyaltyRewardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Provides information about a loyalty event.\n   * For more information, see [Search for Balance-Changing Loyalty Events](https://developer.squareup.com/docs/loyalty-api/loyalty-events).\n   */\n  event?: LoyaltyEvent;\n}\n\nexport const redeemLoyaltyRewardResponseSchema: Schema<RedeemLoyaltyRewardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    event: ['event', optional(lazy(() => loyaltyEventSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyAccount, loyaltyAccountSchema } from './loyaltyAccount';\n\n/** A response that includes the loyalty account. */\nexport interface RetrieveLoyaltyAccountResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Describes a loyalty account in a [loyalty program]($m/LoyaltyProgram). For more information, see\n   * [Create and Retrieve Loyalty Accounts](https://developer.squareup.com/docs/loyalty-api/loyalty-accounts).\n   */\n  loyaltyAccount?: LoyaltyAccount;\n}\n\nexport const retrieveLoyaltyAccountResponseSchema: Schema<RetrieveLoyaltyAccountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    loyaltyAccount: [\n      'loyalty_account',\n      optional(lazy(() => loyaltyAccountSchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyProgram, loyaltyProgramSchema } from './loyaltyProgram';\n\n/** A response that contains the loyalty program. */\nexport interface RetrieveLoyaltyProgramResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards.\n   * Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard.\n   * For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).\n   */\n  program?: LoyaltyProgram;\n}\n\nexport const retrieveLoyaltyProgramResponseSchema: Schema<RetrieveLoyaltyProgramResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    program: ['program', optional(lazy(() => loyaltyProgramSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyReward, loyaltyRewardSchema } from './loyaltyReward';\n\n/** A response that includes the loyalty reward. */\nexport interface RetrieveLoyaltyRewardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a contract to redeem loyalty points for a [reward tier]($m/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state.\n   * For more information, see [Manage loyalty rewards](https://developer.squareup.com/docs/loyalty-api/loyalty-rewards).\n   */\n  reward?: LoyaltyReward;\n}\n\nexport const retrieveLoyaltyRewardResponseSchema: Schema<RetrieveLoyaltyRewardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    reward: ['reward', optional(lazy(() => loyaltyRewardSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyAccountMapping,\n  loyaltyAccountMappingSchema,\n} from './loyaltyAccountMapping';\n\n/** The search criteria for the loyalty accounts. */\nexport interface SearchLoyaltyAccountsRequestLoyaltyAccountQuery {\n  /**\n   * The set of mappings to use in the loyalty account search.\n   * This cannot be combined with `customer_ids`.\n   * Max: 30 mappings\n   */\n  mappings?: LoyaltyAccountMapping[];\n  /**\n   * The set of customer IDs to use in the loyalty account search.\n   * This cannot be combined with `mappings`.\n   * Max: 30 customer IDs\n   */\n  customerIds?: string[];\n}\n\nexport const searchLoyaltyAccountsRequestLoyaltyAccountQuerySchema: Schema<SearchLoyaltyAccountsRequestLoyaltyAccountQuery> = object(\n  {\n    mappings: [\n      'mappings',\n      optional(array(lazy(() => loyaltyAccountMappingSchema))),\n    ],\n    customerIds: ['customer_ids', optional(array(string()))],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  SearchLoyaltyAccountsRequestLoyaltyAccountQuery,\n  searchLoyaltyAccountsRequestLoyaltyAccountQuerySchema,\n} from './searchLoyaltyAccountsRequestLoyaltyAccountQuery';\n\n/** A request to search for loyalty accounts. */\nexport interface SearchLoyaltyAccountsRequest {\n  /** The search criteria for the loyalty accounts. */\n  query?: SearchLoyaltyAccountsRequestLoyaltyAccountQuery;\n  /** The maximum number of results to include in the response. The default value is 30. */\n  limit?: number;\n  /**\n   * A pagination cursor returned by a previous call to\n   * this endpoint. Provide this to retrieve the next set of\n   * results for the original query.\n   * For more information,\n   * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyAccountsRequestSchema: Schema<SearchLoyaltyAccountsRequest> = object(\n  {\n    query: [\n      'query',\n      optional(\n        lazy(() => searchLoyaltyAccountsRequestLoyaltyAccountQuerySchema)\n      ),\n    ],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyAccount, loyaltyAccountSchema } from './loyaltyAccount';\n\n/** A response that includes loyalty accounts that satisfy the search criteria. */\nexport interface SearchLoyaltyAccountsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The loyalty accounts that met the search criteria,\n   * in order of creation date.\n   */\n  loyaltyAccounts?: LoyaltyAccount[];\n  /**\n   * The pagination cursor to use in a subsequent\n   * request. If empty, this is the final response.\n   * For more information,\n   * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyAccountsResponseSchema: Schema<SearchLoyaltyAccountsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    loyaltyAccounts: [\n      'loyalty_accounts',\n      optional(array(lazy(() => loyaltyAccountSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/** Filter events by date time range. */\nexport interface LoyaltyEventDateTimeFilter {\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt: TimeRange;\n}\n\nexport const loyaltyEventDateTimeFilterSchema: Schema<LoyaltyEventDateTimeFilter> = object(\n  { createdAt: ['created_at', lazy(() => timeRangeSchema)] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** Filter events by location. */\nexport interface LoyaltyEventLocationFilter {\n  /**\n   * The [location]($m/Location) IDs for loyalty events to query.\n   * If multiple values are specified, the endpoint uses\n   * a logical OR to combine them.\n   */\n  locationIds: string[];\n}\n\nexport const loyaltyEventLocationFilterSchema: Schema<LoyaltyEventLocationFilter> = object(\n  { locationIds: ['location_ids', array(string())] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Filter events by loyalty account. */\nexport interface LoyaltyEventLoyaltyAccountFilter {\n  /** The ID of the [loyalty account]($m/LoyaltyAccount) associated with loyalty events. */\n  loyaltyAccountId: string;\n}\n\nexport const loyaltyEventLoyaltyAccountFilterSchema: Schema<LoyaltyEventLoyaltyAccountFilter> = object(\n  { loyaltyAccountId: ['loyalty_account_id', string()] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Filter events by the order associated with the event. */\nexport interface LoyaltyEventOrderFilter {\n  /** The ID of the [order]($m/Order) associated with the event. */\n  orderId: string;\n}\n\nexport const loyaltyEventOrderFilterSchema: Schema<LoyaltyEventOrderFilter> = object(\n  { orderId: ['order_id', string()] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** Filter events by event type. */\nexport interface LoyaltyEventTypeFilter {\n  /**\n   * The loyalty event types used to filter the result.\n   * If multiple values are specified, the endpoint uses a\n   * logical OR to combine them.\n   * See [LoyaltyEventType](#type-loyaltyeventtype) for possible values\n   */\n  types: string[];\n}\n\nexport const loyaltyEventTypeFilterSchema: Schema<LoyaltyEventTypeFilter> = object(\n  { types: ['types', array(string())] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  LoyaltyEventDateTimeFilter,\n  loyaltyEventDateTimeFilterSchema,\n} from './loyaltyEventDateTimeFilter';\nimport {\n  LoyaltyEventLocationFilter,\n  loyaltyEventLocationFilterSchema,\n} from './loyaltyEventLocationFilter';\nimport {\n  LoyaltyEventLoyaltyAccountFilter,\n  loyaltyEventLoyaltyAccountFilterSchema,\n} from './loyaltyEventLoyaltyAccountFilter';\nimport {\n  LoyaltyEventOrderFilter,\n  loyaltyEventOrderFilterSchema,\n} from './loyaltyEventOrderFilter';\nimport {\n  LoyaltyEventTypeFilter,\n  loyaltyEventTypeFilterSchema,\n} from './loyaltyEventTypeFilter';\n\n/**\n * The filtering criteria. If the request specifies multiple filters,\n * the endpoint uses a logical AND to evaluate them.\n */\nexport interface LoyaltyEventFilter {\n  /** Filter events by loyalty account. */\n  loyaltyAccountFilter?: LoyaltyEventLoyaltyAccountFilter;\n  /** Filter events by event type. */\n  typeFilter?: LoyaltyEventTypeFilter;\n  /** Filter events by date time range. */\n  dateTimeFilter?: LoyaltyEventDateTimeFilter;\n  /** Filter events by location. */\n  locationFilter?: LoyaltyEventLocationFilter;\n  /** Filter events by the order associated with the event. */\n  orderFilter?: LoyaltyEventOrderFilter;\n}\n\nexport const loyaltyEventFilterSchema: Schema<LoyaltyEventFilter> = object({\n  loyaltyAccountFilter: [\n    'loyalty_account_filter',\n    optional(lazy(() => loyaltyEventLoyaltyAccountFilterSchema)),\n  ],\n  typeFilter: [\n    'type_filter',\n    optional(lazy(() => loyaltyEventTypeFilterSchema)),\n  ],\n  dateTimeFilter: [\n    'date_time_filter',\n    optional(lazy(() => loyaltyEventDateTimeFilterSchema)),\n  ],\n  locationFilter: [\n    'location_filter',\n    optional(lazy(() => loyaltyEventLocationFilterSchema)),\n  ],\n  orderFilter: [\n    'order_filter',\n    optional(lazy(() => loyaltyEventOrderFilterSchema)),\n  ],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  LoyaltyEventFilter,\n  loyaltyEventFilterSchema,\n} from './loyaltyEventFilter';\n\n/** Represents a query used to search for loyalty events. */\nexport interface LoyaltyEventQuery {\n  /**\n   * The filtering criteria. If the request specifies multiple filters,\n   * the endpoint uses a logical AND to evaluate them.\n   */\n  filter?: LoyaltyEventFilter;\n}\n\nexport const loyaltyEventQuerySchema: Schema<LoyaltyEventQuery> = object({\n  filter: ['filter', optional(lazy(() => loyaltyEventFilterSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyEventQuery,\n  loyaltyEventQuerySchema,\n} from './loyaltyEventQuery';\n\n/** A request to search for loyalty events. */\nexport interface SearchLoyaltyEventsRequest {\n  /** Represents a query used to search for loyalty events. */\n  query?: LoyaltyEventQuery;\n  /**\n   * The maximum number of results to include in the response.\n   * The last page might contain fewer events.\n   * The default is 30 events.\n   */\n  limit?: number;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for your original query.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyEventsRequestSchema: Schema<SearchLoyaltyEventsRequest> = object(\n  {\n    query: ['query', optional(lazy(() => loyaltyEventQuerySchema))],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyEvent, loyaltyEventSchema } from './loyaltyEvent';\n\n/**\n * A response that contains loyalty events that satisfy the search\n * criteria, in order by the `created_at` date.\n */\nexport interface SearchLoyaltyEventsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The loyalty events that satisfy the search criteria. */\n  events?: LoyaltyEvent[];\n  /**\n   * The pagination cursor to be used in a subsequent\n   * request. If empty, this is the final response.\n   * For more information,\n   * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyEventsResponseSchema: Schema<SearchLoyaltyEventsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    events: ['events', optional(array(lazy(() => loyaltyEventSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** The set of search requirements. */\nexport interface SearchLoyaltyRewardsRequestLoyaltyRewardQuery {\n  /** The ID of the [loyalty account]($m/LoyaltyAccount) to which the loyalty reward belongs. */\n  loyaltyAccountId: string;\n  /** The status of the loyalty reward. */\n  status?: string;\n}\n\nexport const searchLoyaltyRewardsRequestLoyaltyRewardQuerySchema: Schema<SearchLoyaltyRewardsRequestLoyaltyRewardQuery> = object(\n  {\n    loyaltyAccountId: ['loyalty_account_id', string()],\n    status: ['status', optional(string())],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  SearchLoyaltyRewardsRequestLoyaltyRewardQuery,\n  searchLoyaltyRewardsRequestLoyaltyRewardQuerySchema,\n} from './searchLoyaltyRewardsRequestLoyaltyRewardQuery';\n\n/** A request to search for loyalty rewards. */\nexport interface SearchLoyaltyRewardsRequest {\n  /** The set of search requirements. */\n  query?: SearchLoyaltyRewardsRequestLoyaltyRewardQuery;\n  /** The maximum number of results to return in the response. The default value is 30. */\n  limit?: number;\n  /**\n   * A pagination cursor returned by a previous call to\n   * this endpoint. Provide this to retrieve the next set of\n   * results for the original query.\n   * For more information,\n   * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyRewardsRequestSchema: Schema<SearchLoyaltyRewardsRequest> = object(\n  {\n    query: [\n      'query',\n      optional(lazy(() => searchLoyaltyRewardsRequestLoyaltyRewardQuerySchema)),\n    ],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyReward, loyaltyRewardSchema } from './loyaltyReward';\n\n/** A response that includes the loyalty rewards satisfying the search criteria. */\nexport interface SearchLoyaltyRewardsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The loyalty rewards that satisfy the search criteria.\n   * These are returned in descending order by `updated_at`.\n   */\n  rewards?: LoyaltyReward[];\n  /**\n   * The pagination cursor to be used in a subsequent\n   * request. If empty, this is the final response.\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyRewardsResponseSchema: Schema<SearchLoyaltyRewardsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    rewards: ['rewards', optional(array(lazy(() => loyaltyRewardSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  AccumulateLoyaltyPointsRequest,\n  accumulateLoyaltyPointsRequestSchema,\n} from '../models/accumulateLoyaltyPointsRequest';\nimport {\n  AccumulateLoyaltyPointsResponse,\n  accumulateLoyaltyPointsResponseSchema,\n} from '../models/accumulateLoyaltyPointsResponse';\nimport {\n  AdjustLoyaltyPointsRequest,\n  adjustLoyaltyPointsRequestSchema,\n} from '../models/adjustLoyaltyPointsRequest';\nimport {\n  AdjustLoyaltyPointsResponse,\n  adjustLoyaltyPointsResponseSchema,\n} from '../models/adjustLoyaltyPointsResponse';\nimport {\n  CalculateLoyaltyPointsRequest,\n  calculateLoyaltyPointsRequestSchema,\n} from '../models/calculateLoyaltyPointsRequest';\nimport {\n  CalculateLoyaltyPointsResponse,\n  calculateLoyaltyPointsResponseSchema,\n} from '../models/calculateLoyaltyPointsResponse';\nimport {\n  CreateLoyaltyAccountRequest,\n  createLoyaltyAccountRequestSchema,\n} from '../models/createLoyaltyAccountRequest';\nimport {\n  CreateLoyaltyAccountResponse,\n  createLoyaltyAccountResponseSchema,\n} from '../models/createLoyaltyAccountResponse';\nimport {\n  CreateLoyaltyRewardRequest,\n  createLoyaltyRewardRequestSchema,\n} from '../models/createLoyaltyRewardRequest';\nimport {\n  CreateLoyaltyRewardResponse,\n  createLoyaltyRewardResponseSchema,\n} from '../models/createLoyaltyRewardResponse';\nimport {\n  DeleteLoyaltyRewardResponse,\n  deleteLoyaltyRewardResponseSchema,\n} from '../models/deleteLoyaltyRewardResponse';\nimport {\n  ListLoyaltyProgramsResponse,\n  listLoyaltyProgramsResponseSchema,\n} from '../models/listLoyaltyProgramsResponse';\nimport {\n  RedeemLoyaltyRewardRequest,\n  redeemLoyaltyRewardRequestSchema,\n} from '../models/redeemLoyaltyRewardRequest';\nimport {\n  RedeemLoyaltyRewardResponse,\n  redeemLoyaltyRewardResponseSchema,\n} from '../models/redeemLoyaltyRewardResponse';\nimport {\n  RetrieveLoyaltyAccountResponse,\n  retrieveLoyaltyAccountResponseSchema,\n} from '../models/retrieveLoyaltyAccountResponse';\nimport {\n  RetrieveLoyaltyProgramResponse,\n  retrieveLoyaltyProgramResponseSchema,\n} from '../models/retrieveLoyaltyProgramResponse';\nimport {\n  RetrieveLoyaltyRewardResponse,\n  retrieveLoyaltyRewardResponseSchema,\n} from '../models/retrieveLoyaltyRewardResponse';\nimport {\n  SearchLoyaltyAccountsRequest,\n  searchLoyaltyAccountsRequestSchema,\n} from '../models/searchLoyaltyAccountsRequest';\nimport {\n  SearchLoyaltyAccountsResponse,\n  searchLoyaltyAccountsResponseSchema,\n} from '../models/searchLoyaltyAccountsResponse';\nimport {\n  SearchLoyaltyEventsRequest,\n  searchLoyaltyEventsRequestSchema,\n} from '../models/searchLoyaltyEventsRequest';\nimport {\n  SearchLoyaltyEventsResponse,\n  searchLoyaltyEventsResponseSchema,\n} from '../models/searchLoyaltyEventsResponse';\nimport {\n  SearchLoyaltyRewardsRequest,\n  searchLoyaltyRewardsRequestSchema,\n} from '../models/searchLoyaltyRewardsRequest';\nimport {\n  SearchLoyaltyRewardsResponse,\n  searchLoyaltyRewardsResponseSchema,\n} from '../models/searchLoyaltyRewardsResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class LoyaltyApi extends BaseApi {\n  /**\n   * Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a\n   * `mapping` with the `phone_number` of the buyer.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async createLoyaltyAccount(\n    body: CreateLoyaltyAccountRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateLoyaltyAccountResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/accounts');\n    const mapped = req.prepareArgs({\n      body: [body, createLoyaltyAccountRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createLoyaltyAccountResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for loyalty accounts in a loyalty program.\n   *\n   * You can search for a loyalty account using the phone number or customer ID associated with the\n   * account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.\n   *\n   * Search results are sorted by `created_at` in ascending order.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async searchLoyaltyAccounts(\n    body: SearchLoyaltyAccountsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchLoyaltyAccountsResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/accounts/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchLoyaltyAccountsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchLoyaltyAccountsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a loyalty account.\n   *\n   * @param accountId  The ID of the [loyalty account]($m/LoyaltyAccount) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveLoyaltyAccount(\n    accountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveLoyaltyAccountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ accountId: [accountId, string()] });\n    req.appendTemplatePath`/v2/loyalty/accounts/${mapped.accountId}`;\n    return req.callAsJson(retrieveLoyaltyAccountResponseSchema, requestOptions);\n  }\n\n  /**\n   * Adds points to a loyalty account.\n   *\n   * - If you are using the Orders API to manage orders, you only provide the `order_id`.\n   * The endpoint reads the order to compute points to add to the buyer's account.\n   * - If you are not using the Orders API to manage orders,\n   * you first perform a client-side computation to compute the points.\n   * For spend-based and visit-based programs, you can first call\n   * [CalculateLoyaltyPoints]($e/Loyalty/CalculateLoyaltyPoints) to compute the points\n   * that you provide to this endpoint.\n   *\n   * @param accountId    The [loyalty account]($m/LoyaltyAccount) ID to which\n   *                                                              to add the points.\n   * @param body         An object containing the fields to POST for the\n   *                                                              request.  See the corresponding object definition for\n   *                                                              field details.\n   * @return Response from the API call\n   */\n  async accumulateLoyaltyPoints(\n    accountId: string,\n    body: AccumulateLoyaltyPointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<AccumulateLoyaltyPointsResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      body: [body, accumulateLoyaltyPointsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/loyalty/accounts/${mapped.accountId}/accumulate`;\n    return req.callAsJson(\n      accumulateLoyaltyPointsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Adds points to or subtracts points from a buyer's account.\n   *\n   * Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow,\n   * you call\n   * [AccumulateLoyaltyPoints]($e/Loyalty/AccumulateLoyaltyPoints)\n   * to add points when a buyer pays for the purchase.\n   *\n   * @param accountId    The ID of the [loyalty account]($m/LoyaltyAccount) in\n   *                                                          which to adjust the points.\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async adjustLoyaltyPoints(\n    accountId: string,\n    body: AdjustLoyaltyPointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<AdjustLoyaltyPointsResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      body: [body, adjustLoyaltyPointsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/loyalty/accounts/${mapped.accountId}/adjust`;\n    return req.callAsJson(adjustLoyaltyPointsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for loyalty events.\n   *\n   * A Square loyalty program maintains a ledger of events that occur during the lifetime of a\n   * buyer's loyalty account. Each change in the point balance\n   * (for example, points earned, points redeemed, and points expired) is\n   * recorded in the ledger. Using this endpoint, you can search the ledger for events.\n   *\n   * Search results are sorted by `created_at` in descending order.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async searchLoyaltyEvents(\n    body: SearchLoyaltyEventsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchLoyaltyEventsResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/events/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchLoyaltyEventsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchLoyaltyEventsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a list of loyalty programs in the seller's account.\n   * Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can\n   * have only one loyalty program, which is created and managed from the Seller Dashboard. For more\n   * information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).\n   *\n   *\n   * Replaced with [RetrieveLoyaltyProgram]($e/Loyalty/RetrieveLoyaltyProgram) when used with the keyword\n   * `main`.\n   *\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listLoyaltyPrograms(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListLoyaltyProgramsResponse>> {\n    const req = this.createRequest('GET', '/v2/loyalty/programs');\n    req.deprecated('LoyaltyApi.listLoyaltyPrograms');\n    return req.callAsJson(listLoyaltyProgramsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword\n   * `main`.\n   *\n   * Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can\n   * have only one loyalty program, which is created and managed from the Seller Dashboard. For more\n   * information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).\n   *\n   * @param programId  The ID of the loyalty program or the keyword `main`. Either value can be used to\n   *                             retrieve the single loyalty program that belongs to the seller.\n   * @return Response from the API call\n   */\n  async retrieveLoyaltyProgram(\n    programId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveLoyaltyProgramResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ programId: [programId, string()] });\n    req.appendTemplatePath`/v2/loyalty/programs/${mapped.programId}`;\n    return req.callAsJson(retrieveLoyaltyProgramResponseSchema, requestOptions);\n  }\n\n  /**\n   * Calculates the points a purchase earns.\n   *\n   * - If you are using the Orders API to manage orders, you provide the `order_id` in the request. The\n   * endpoint calculates the points by reading the order.\n   * - If you are not using the Orders API to manage orders, you provide the purchase amount in\n   * the request for the endpoint to calculate the points.\n   *\n   * An application might call this endpoint to show the points that a buyer can earn with the\n   * specific purchase.\n   *\n   * For spend-based and visit-based programs, the `tax_mode` setting of the accrual rule indicates how\n   * taxes should be treated for loyalty points accrual.\n   *\n   * @param programId    The [loyalty program]($m/LoyaltyProgram) ID, which\n   *                                                             defines the rules for accruing points.\n   * @param body         An object containing the fields to POST for the\n   *                                                             request.  See the corresponding object definition for\n   *                                                             field details.\n   * @return Response from the API call\n   */\n  async calculateLoyaltyPoints(\n    programId: string,\n    body: CalculateLoyaltyPointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CalculateLoyaltyPointsResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      programId: [programId, string()],\n      body: [body, calculateLoyaltyPointsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/loyalty/programs/${mapped.programId}/calculate`;\n    return req.callAsJson(calculateLoyaltyPointsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a loyalty reward. In the process, the endpoint does following:\n   *\n   * - Uses the `reward_tier_id` in the request to determine the number of points\n   * to lock for this reward.\n   * - If the request includes `order_id`, it adds the reward and related discount to the order.\n   *\n   * After a reward is created, the points are locked and\n   * not available for the buyer to redeem another reward.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async createLoyaltyReward(\n    body: CreateLoyaltyRewardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateLoyaltyRewardResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/rewards');\n    const mapped = req.prepareArgs({\n      body: [body, createLoyaltyRewardRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createLoyaltyRewardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns\n   * results for all loyalty accounts.\n   * If you include a `query` object, `loyalty_account_id` is required and `status` is  optional.\n   *\n   * If you know a reward ID, use the\n   * [RetrieveLoyaltyReward]($e/Loyalty/RetrieveLoyaltyReward) endpoint.\n   *\n   * Search results are sorted by `updated_at` in descending order.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async searchLoyaltyRewards(\n    body: SearchLoyaltyRewardsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchLoyaltyRewardsResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/rewards/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchLoyaltyRewardsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchLoyaltyRewardsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a loyalty reward by doing the following:\n   *\n   * - Returns the loyalty points back to the loyalty account.\n   * - If an order ID was specified when the reward was created\n   * (see [CreateLoyaltyReward]($e/Loyalty/CreateLoyaltyReward)),\n   * it updates the order by removing the reward and related\n   * discounts.\n   *\n   * You cannot delete a reward that has reached the terminal state (REDEEMED).\n   *\n   * @param rewardId  The ID of the [loyalty reward]($m/LoyaltyReward) to delete.\n   * @return Response from the API call\n   */\n  async deleteLoyaltyReward(\n    rewardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteLoyaltyRewardResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ rewardId: [rewardId, string()] });\n    req.appendTemplatePath`/v2/loyalty/rewards/${mapped.rewardId}`;\n    return req.callAsJson(deleteLoyaltyRewardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a loyalty reward.\n   *\n   * @param rewardId  The ID of the [loyalty reward]($m/LoyaltyReward) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveLoyaltyReward(\n    rewardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveLoyaltyRewardResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ rewardId: [rewardId, string()] });\n    req.appendTemplatePath`/v2/loyalty/rewards/${mapped.rewardId}`;\n    return req.callAsJson(retrieveLoyaltyRewardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Redeems a loyalty reward.\n   *\n   * The endpoint sets the reward to the `REDEEMED` terminal state.\n   *\n   * If you are using your own order processing system (not using the\n   * Orders API), you call this endpoint after the buyer paid for the\n   * purchase.\n   *\n   * After the reward reaches the terminal state, it cannot be deleted.\n   * In other words, points used for the reward cannot be returned\n   * to the account.\n   *\n   * @param rewardId     The ID of the [loyalty reward]($m/LoyaltyReward) to\n   *                                                          redeem.\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async redeemLoyaltyReward(\n    rewardId: string,\n    body: RedeemLoyaltyRewardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RedeemLoyaltyRewardResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      rewardId: [rewardId, string()],\n      body: [body, redeemLoyaltyRewardRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/loyalty/rewards/${mapped.rewardId}/redeem`;\n    return req.callAsJson(redeemLoyaltyRewardResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents a business that sells with Square. */\nexport interface Merchant {\n  /** The Square-issued ID of the merchant. */\n  id?: string;\n  /** The name of the merchant's overall business. */\n  businessName?: string;\n  /**\n   * Indicates the country associated with another entity, such as a business.\n   * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).\n   */\n  country: string;\n  /** The code indicating the [language preferences](https://developer.squareup.com/docs/build-basics/general-considerations/language-preferences) of the merchant, in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A). For example, `en-US` or `fr-CA`. */\n  languageCode?: string;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currency?: string;\n  status?: string;\n  /** The ID of the [main `Location`](https://developer.squareup.com/docs/locations-api#about-the-main-location) for this merchant. */\n  mainLocationId?: string;\n  /**\n   * The time when the merchant was created, in RFC 3339 format.\n   *    For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).\n   */\n  createdAt?: string;\n}\n\nexport const merchantSchema: Schema<Merchant> = object({\n  id: ['id', optional(string())],\n  businessName: ['business_name', optional(string())],\n  country: ['country', string()],\n  languageCode: ['language_code', optional(string())],\n  currency: ['currency', optional(string())],\n  status: ['status', optional(string())],\n  mainLocationId: ['main_location_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n});\n","import { array, lazy, number, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Merchant, merchantSchema } from './merchant';\n\n/** The response object returned by the [ListMerchant]($e/Merchants/ListMerchants) endpoint. */\nexport interface ListMerchantsResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** The requested `Merchant` entities. */\n  merchant?: Merchant[];\n  /** If the  response is truncated, the cursor to use in next  request to fetch next set of objects. */\n  cursor?: number;\n}\n\nexport const listMerchantsResponseSchema: Schema<ListMerchantsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    merchant: ['merchant', optional(array(lazy(() => merchantSchema)))],\n    cursor: ['cursor', optional(number())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Merchant, merchantSchema } from './merchant';\n\n/** The response object returned by the [RetrieveMerchant]($e/Merchants/RetrieveMerchant) endpoint. */\nexport interface RetrieveMerchantResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a business that sells with Square. */\n  merchant?: Merchant;\n}\n\nexport const retrieveMerchantResponseSchema: Schema<RetrieveMerchantResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    merchant: ['merchant', optional(lazy(() => merchantSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  ListMerchantsResponse,\n  listMerchantsResponseSchema,\n} from '../models/listMerchantsResponse';\nimport {\n  RetrieveMerchantResponse,\n  retrieveMerchantResponseSchema,\n} from '../models/retrieveMerchantResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class MerchantsApi extends BaseApi {\n  /**\n   * Provides details about the merchant associated with a given access token.\n   *\n   * The access token used to connect your application to a Square seller is associated\n   * with a single merchant. That means that `ListMerchants` returns a list\n   * with a single `Merchant` object. You can specify your personal access token\n   * to get your own merchant information or specify an OAuth token to get the\n   * information for the merchant that granted your application access.\n   *\n   * If you know the merchant ID, you can also use the [RetrieveMerchant]($e/Merchants/RetrieveMerchant)\n   * endpoint to retrieve the merchant information.\n   *\n   * @param cursor The cursor generated by the previous response.\n   * @return Response from the API call\n   */\n  async listMerchants(\n    cursor?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListMerchantsResponse>> {\n    const req = this.createRequest('GET', '/v2/merchants');\n    const mapped = req.prepareArgs({ cursor: [cursor, optional(number())] });\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listMerchantsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves the `Merchant` object for the given `merchant_id`.\n   *\n   * @param merchantId  The ID of the merchant to retrieve. If the string \"me\" is supplied as the ID, then\n   *                              retrieve the merchant that is currently accessible to this call.\n   * @return Response from the API call\n   */\n  async retrieveMerchant(\n    merchantId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveMerchantResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ merchantId: [merchantId, string()] });\n    req.appendTemplatePath`/v2/merchants/${mapped.merchantId}`;\n    return req.callAsJson(retrieveMerchantResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Defines the body parameters that can be provided in a request to the\n * `CreateMobileAuthorizationCode` endpoint.\n */\nexport interface CreateMobileAuthorizationCodeRequest {\n  /** The Square location ID that the authorization code should be tied to. */\n  locationId?: string;\n}\n\nexport const createMobileAuthorizationCodeRequestSchema: Schema<CreateMobileAuthorizationCodeRequest> = object(\n  { locationId: ['location_id', optional(string())] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `CreateMobileAuthorizationCode` endpoint.\n */\nexport interface CreateMobileAuthorizationCodeResponse {\n  /**\n   * The generated authorization code that connects a mobile application instance\n   * to a Square account.\n   */\n  authorizationCode?: string;\n  /**\n   * The timestamp when `authorization_code` expires, in\n   * [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example, \"2016-09-04T23:59:33.123Z\").\n   */\n  expiresAt?: string;\n  /**\n   * Represents an error encountered during a request to the Connect API.\n   * See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.\n   */\n  error?: Error;\n}\n\nexport const createMobileAuthorizationCodeResponseSchema: Schema<CreateMobileAuthorizationCodeResponse> = object(\n  {\n    authorizationCode: ['authorization_code', optional(string())],\n    expiresAt: ['expires_at', optional(string())],\n    error: ['error', optional(lazy(() => errorSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CreateMobileAuthorizationCodeRequest,\n  createMobileAuthorizationCodeRequestSchema,\n} from '../models/createMobileAuthorizationCodeRequest';\nimport {\n  CreateMobileAuthorizationCodeResponse,\n  createMobileAuthorizationCodeResponseSchema,\n} from '../models/createMobileAuthorizationCodeResponse';\nimport { BaseApi } from './baseApi';\n\nexport class MobileAuthorizationApi extends BaseApi {\n  /**\n   * Generates code to authorize a mobile application to connect to a Square card reader.\n   *\n   * Authorization codes are one-time-use codes and expire 60 minutes after being issued.\n   *\n   * __Important:__ The `Authorization` header you provide to this endpoint must have the following\n   * format:\n   *\n   * ```\n   * Authorization: Bearer ACCESS_TOKEN\n   * ```\n   *\n   * Replace `ACCESS_TOKEN` with a\n   * [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-\n   * tokens).\n   *\n   * @param body         An object containing the fields to POST for\n   *                                                                    the request.  See the corresponding object\n   *                                                                    definition for field details.\n   * @return Response from the API call\n   */\n  async createMobileAuthorizationCode(\n    body: CreateMobileAuthorizationCodeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateMobileAuthorizationCodeResponse>> {\n    const req = this.createRequest('POST', '/mobile/authorization-code');\n    const mapped = req.prepareArgs({\n      body: [body, createMobileAuthorizationCodeRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      createMobileAuthorizationCodeResponseSchema,\n      requestOptions\n    );\n  }\n}\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\nexport interface ObtainTokenRequest {\n  /**\n   * The Square-issued ID of your application, which is available in the OAuth page in the\n   * [Developer Dashboard](https://developer.squareup.com/apps).\n   */\n  clientId: string;\n  /**\n   * The Square-issued application secret for your application, which is available in the OAuth page\n   * in the [Developer Dashboard](https://developer.squareup.com/apps).\n   */\n  clientSecret: string;\n  /**\n   * The authorization code to exchange.\n   * This code is required if `grant_type` is set to `authorization_code` to indicate that\n   * the application wants to exchange an authorization code for an OAuth access token.\n   */\n  code?: string;\n  /** The redirect URL assigned in the OAuth page for your application in the [Developer Dashboard](https://developer.squareup.com/apps). */\n  redirectUri?: string;\n  /**\n   * Specifies the method to request an OAuth access token.\n   * Valid values are `authorization_code`, `refresh_token`, and `migration_token`.\n   */\n  grantType: string;\n  /**\n   * A valid refresh token for generating a new OAuth access token.\n   * A valid refresh token is required if `grant_type` is set to `refresh_token`\n   * to indicate that the application wants a replacement for an expired OAuth access token.\n   */\n  refreshToken?: string;\n  /**\n   * A legacy OAuth access token obtained using a Connect API version prior\n   * to 2019-03-13. This parameter is required if `grant_type` is set to\n   * `migration_token` to indicate that the application wants to get a replacement\n   * OAuth access token. The response also returns a refresh token.\n   * For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).\n   */\n  migrationToken?: string;\n  /**\n   * A JSON list of strings representing the permissions that the application is requesting.\n   * For example, \"`[\"MERCHANT_PROFILE_READ\",\"PAYMENTS_READ\",\"BANK_ACCOUNTS_READ\"]`\".\n   * The access token returned in the response is granted the permissions\n   * that comprise the intersection between the requested list of permissions and those\n   * that belong to the provided refresh token.\n   */\n  scopes?: string[];\n  /**\n   * A Boolean indicating a request for a short-lived access token.\n   * The short-lived access token returned in the response expires in 24 hours.\n   */\n  shortLived?: boolean;\n}\n\nexport const obtainTokenRequestSchema: Schema<ObtainTokenRequest> = object({\n  clientId: ['client_id', string()],\n  clientSecret: ['client_secret', string()],\n  code: ['code', optional(string())],\n  redirectUri: ['redirect_uri', optional(string())],\n  grantType: ['grant_type', string()],\n  refreshToken: ['refresh_token', optional(string())],\n  migrationToken: ['migration_token', optional(string())],\n  scopes: ['scopes', optional(array(string()))],\n  shortLived: ['short_lived', optional(boolean())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface ObtainTokenResponse {\n  /**\n   * A valid OAuth access token. OAuth access tokens are 64 bytes long.\n   * Provide the access token in a header with every request to Connect API\n   * endpoints. For more information, see [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough).\n   */\n  accessToken?: string;\n  /** This value is always _bearer_. */\n  tokenType?: string;\n  /** The date when the `access_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format. */\n  expiresAt?: string;\n  /** The ID of the authorizing merchant's business. */\n  merchantId?: string;\n  /**\n   * __LEGACY FIELD__. The ID of a subscription plan the merchant signed up\n   * for. The ID is only present if the merchant signed up for a subscription plan during authorization.\n   */\n  subscriptionId?: string;\n  /**\n   * __LEGACY FIELD__. The ID of the subscription plan the merchant signed\n   * up for. The ID is only present if the merchant signed up for a subscription plan during\n   * authorization.\n   */\n  planId?: string;\n  /**\n   * The OpenID token belonging to this person. This token is only present if the\n   * OPENID scope is included in the authorization request.\n   */\n  idToken?: string;\n  /**\n   * A refresh token. OAuth refresh tokens are 64 bytes long.\n   * For more information, see [Refresh, Revoke, and Limit the Scope of OAuth Tokens](https://developer.squareup.com/docs/oauth-api/refresh-revoke-limit-scope).\n   */\n  refreshToken?: string;\n  /**\n   * A Boolean indicating that the access token is a short-lived access token.\n   * The short-lived access token returned in the response expires in 24 hours.\n   */\n  shortLived?: boolean;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const obtainTokenResponseSchema: Schema<ObtainTokenResponse> = object({\n  accessToken: ['access_token', optional(string())],\n  tokenType: ['token_type', optional(string())],\n  expiresAt: ['expires_at', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  subscriptionId: ['subscription_id', optional(string())],\n  planId: ['plan_id', optional(string())],\n  idToken: ['id_token', optional(string())],\n  refreshToken: ['refresh_token', optional(string())],\n  shortLived: ['short_lived', optional(boolean())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface RenewTokenRequest {\n  /** The token you want to renew. */\n  accessToken?: string;\n}\n\nexport const renewTokenRequestSchema: Schema<RenewTokenRequest> = object({\n  accessToken: ['access_token', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface RenewTokenResponse {\n  /**\n   * The renewed access token.\n   * This value might be different from the `access_token` you provided in your request.\n   * You provide this token in a header with every request to Connect API endpoints.\n   * See [Request and response headers](https://developer.squareup.com/docs/api/connect/v2/#requestandresponseheaders) for the format of this header.\n   */\n  accessToken?: string;\n  /** This value is always _bearer_. */\n  tokenType?: string;\n  /** The date when the `access_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format. */\n  expiresAt?: string;\n  /** The ID of the authorizing merchant's business. */\n  merchantId?: string;\n  /**\n   * __LEGACY FIELD__. The ID of the merchant subscription associated with\n   * the authorization. The ID is only present if the merchant signed up for a subscription\n   * during authorization.\n   */\n  subscriptionId?: string;\n  /**\n   * __LEGACY FIELD__. The ID of the subscription plan the merchant signed\n   * up for. The ID is only present if the merchant signed up for a subscription plan during\n   * authorization.\n   */\n  planId?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const renewTokenResponseSchema: Schema<RenewTokenResponse> = object({\n  accessToken: ['access_token', optional(string())],\n  tokenType: ['token_type', optional(string())],\n  expiresAt: ['expires_at', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  subscriptionId: ['subscription_id', optional(string())],\n  planId: ['plan_id', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { boolean, object, optional, Schema, string } from '../schema';\n\nexport interface RevokeTokenRequest {\n  /**\n   * The Square-issued ID for your application, which is available in the OAuth page in the\n   * [Developer Dashboard](https://developer.squareup.com/apps).\n   */\n  clientId?: string;\n  /**\n   * The access token of the merchant whose token you want to revoke.\n   * Do not provide a value for `merchant_id` if you provide this parameter.\n   */\n  accessToken?: string;\n  /**\n   * The ID of the merchant whose token you want to revoke.\n   * Do not provide a value for `access_token` if you provide this parameter.\n   */\n  merchantId?: string;\n  /**\n   * If `true`, terminate the given single access token, but do not\n   * terminate the entire authorization.\n   * Default: `false`\n   */\n  revokeOnlyAccessToken?: boolean;\n}\n\nexport const revokeTokenRequestSchema: Schema<RevokeTokenRequest> = object({\n  clientId: ['client_id', optional(string())],\n  accessToken: ['access_token', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  revokeOnlyAccessToken: ['revoke_only_access_token', optional(boolean())],\n});\n","import { array, boolean, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface RevokeTokenResponse {\n  /** If the request is successful, this is `true`. */\n  success?: boolean;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const revokeTokenResponseSchema: Schema<RevokeTokenResponse> = object({\n  success: ['success', optional(boolean())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  ObtainTokenRequest,\n  obtainTokenRequestSchema,\n} from '../models/obtainTokenRequest';\nimport {\n  ObtainTokenResponse,\n  obtainTokenResponseSchema,\n} from '../models/obtainTokenResponse';\nimport {\n  RenewTokenRequest,\n  renewTokenRequestSchema,\n} from '../models/renewTokenRequest';\nimport {\n  RenewTokenResponse,\n  renewTokenResponseSchema,\n} from '../models/renewTokenResponse';\nimport {\n  RevokeTokenRequest,\n  revokeTokenRequestSchema,\n} from '../models/revokeTokenRequest';\nimport {\n  RevokeTokenResponse,\n  revokeTokenResponseSchema,\n} from '../models/revokeTokenResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class OAuthApi extends BaseApi {\n  /**\n   * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see\n   * [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-\n   * to-refresh-tokens).\n   *\n   * Renews an OAuth access token before it expires.\n   *\n   * OAuth access tokens besides your application's personal access token expire after 30 days.\n   * You can also renew expired tokens within 15 days of their expiration.\n   * You cannot renew an access token that has been expired for more than 15 days.\n   * Instead, the associated user must recomplete the OAuth flow from the beginning.\n   *\n   * __Important:__ The `Authorization` header for this endpoint must have the\n   * following format:\n   *\n   * ```\n   * Authorization: Client APPLICATION_SECRET\n   * ```\n   *\n   * Replace `APPLICATION_SECRET` with the application secret on the Credentials\n   * page in the [Developer Dashboard](https://developer.squareup.com/apps).\n   *\n   * @param clientId      Your application ID, which is available in the OAuth page in the\n   *                                                  [Developer Dashboard](https://developer.squareup.com/apps).\n   * @param body          An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @param authorization Client APPLICATION_SECRET\n   * @return Response from the API call\n   * @deprecated\n   */\n  async renewToken(\n    clientId: string,\n    body: RenewTokenRequest,\n    authorization: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RenewTokenResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      clientId: [clientId, string()],\n      body: [body, renewTokenRequestSchema],\n      authorization: [authorization, string()],\n    });\n    req.header('Content-Type', 'application/json');\n    req.header('Authorization', mapped.authorization);\n    req.json(mapped.body);\n    req.appendTemplatePath`/oauth2/clients/${mapped.clientId}/access-token/renew`;\n    req.deprecated('OAuthApi.renewToken');\n    req.authenticate(false);\n    return req.callAsJson(renewTokenResponseSchema, requestOptions);\n  }\n\n  /**\n   * Revokes an access token generated with the OAuth flow.\n   *\n   * If an account has more than one OAuth access token for your application, this\n   * endpoint revokes all of them, regardless of which token you specify. When an\n   * OAuth access token is revoked, all of the active subscriptions associated\n   * with that OAuth token are canceled immediately.\n   *\n   * __Important:__ The `Authorization` header for this endpoint must have the\n   * following format:\n   *\n   * ```\n   * Authorization: Client APPLICATION_SECRET\n   * ```\n   *\n   * Replace `APPLICATION_SECRET` with the application secret on the OAuth\n   * page for your application on the Developer Dashboard.\n   *\n   * @param body          An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @param authorization Client APPLICATION_SECRET\n   * @return Response from the API call\n   */\n  async revokeToken(\n    body: RevokeTokenRequest,\n    authorization: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RevokeTokenResponse>> {\n    const req = this.createRequest('POST', '/oauth2/revoke');\n    const mapped = req.prepareArgs({\n      body: [body, revokeTokenRequestSchema],\n      authorization: [authorization, string()],\n    });\n    req.header('Content-Type', 'application/json');\n    req.header('Authorization', mapped.authorization);\n    req.json(mapped.body);\n    req.authenticate(false);\n    return req.callAsJson(revokeTokenResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns an OAuth access token and a refresh token unless the\n   * `short_lived` parameter is set to `true`, in which case the endpoint\n   * returns only an access token.\n   *\n   * The `grant_type` parameter specifies the type of OAuth request. If\n   * `grant_type` is `authorization_code`, you must include the authorization\n   * code you received when a seller granted you authorization. If `grant_type`\n   * is `refresh_token`, you must provide a valid refresh token. If you are using\n   * an old version of the Square APIs (prior to March 13, 2019), `grant_type`\n   * can be `migration_token` and you must provide a valid migration token.\n   *\n   * You can use the `scopes` parameter to limit the set of permissions granted\n   * to the access token and refresh token. You can use the `short_lived` parameter\n   * to create an access token that expires in 24 hours.\n   *\n   * __Note:__ OAuth tokens should be encrypted and stored on a secure server.\n   * Application clients should never interact directly with OAuth tokens.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async obtainToken(\n    body: ObtainTokenRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ObtainTokenResponse>> {\n    const req = this.createRequest('POST', '/oauth2/token');\n    const mapped = req.prepareArgs({ body: [body, obtainTokenRequestSchema] });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.authenticate(false);\n    return req.callAsJson(obtainTokenResponseSchema, requestOptions);\n  }\n}\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * Defines the fields that are included in requests to the\n * `BatchRetrieveOrders` endpoint.\n */\nexport interface BatchRetrieveOrdersRequest {\n  /**\n   * The ID of the location for these orders. This field is optional: omit it to retrieve\n   * orders within the scope of the current authorization's merchant ID.\n   */\n  locationId?: string;\n  /** The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request. */\n  orderIds: string[];\n}\n\nexport const batchRetrieveOrdersRequestSchema: Schema<BatchRetrieveOrdersRequest> = object(\n  {\n    locationId: ['location_id', optional(string())],\n    orderIds: ['order_ids', array(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `BatchRetrieveOrders` endpoint.\n */\nexport interface BatchRetrieveOrdersResponse {\n  /** The requested orders. This will omit any requested orders that do not exist. */\n  orders?: Order[];\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const batchRetrieveOrdersResponseSchema: Schema<BatchRetrieveOrdersResponse> = object(\n  {\n    orders: ['orders', optional(array(lazy(() => orderSchema)))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Order, orderSchema } from './order';\nimport { OrderReward, orderRewardSchema } from './orderReward';\n\nexport interface CalculateOrderRequest {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order: Order;\n  /**\n   * Identifies one or more loyalty reward tiers to apply during the order calculation.\n   * The discounts defined by the reward tiers are added to the order only to preview the\n   * effect of applying the specified rewards. The rewards do not correspond to actual\n   * redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are\n   * random strings used only to reference the reward tier.\n   */\n  proposedRewards?: OrderReward[];\n}\n\nexport const calculateOrderRequestSchema: Schema<CalculateOrderRequest> = object(\n  {\n    order: ['order', lazy(() => orderSchema)],\n    proposedRewards: [\n      'proposed_rewards',\n      optional(array(lazy(() => orderRewardSchema))),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\nexport interface CalculateOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const calculateOrderResponseSchema: Schema<CalculateOrderResponse> = object(\n  {\n    order: ['order', optional(lazy(() => orderSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * Defines the fields that are included in requests to the\n * [CloneOrder]($e/Orders/CloneOrder) endpoint.\n */\nexport interface CloneOrderRequest {\n  /** The ID of the order to clone. */\n  orderId: string;\n  /**\n   * An optional order version for concurrency protection.\n   * If a version is provided, it must match the latest stored version of the order to clone.\n   * If a version is not provided, the API clones the latest version.\n   */\n  version?: number;\n  /**\n   * A value you specify that uniquely identifies this clone request.\n   * If you are unsure whether a particular order was cloned successfully,\n   * you can reattempt the call with the same idempotency key without\n   * worrying about creating duplicate cloned orders.\n   * The originally cloned order is returned.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).\n   */\n  idempotencyKey?: string;\n}\n\nexport const cloneOrderRequestSchema: Schema<CloneOrderRequest> = object({\n  orderId: ['order_id', string()],\n  version: ['version', optional(number())],\n  idempotencyKey: ['idempotency_key', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [CloneOrder]($e/Orders/CloneOrder) endpoint.\n */\nexport interface CloneOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const cloneOrderResponseSchema: Schema<CloneOrderResponse> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the `CreateOrder` endpoint.\n * Either `errors` or `order` is present in a given response, but never both.\n */\nexport interface CreateOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createOrderResponseSchema: Schema<CreateOrderResponse> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, number, object, optional, Schema, string } from '../schema';\n\n/**\n * Defines the fields that are included in requests to the\n * [PayOrder]($e/Orders/PayOrder) endpoint.\n */\nexport interface PayOrderRequest {\n  /**\n   * A value you specify that uniquely identifies this request among requests you have sent. If\n   * you are unsure whether a particular payment request was completed successfully, you can reattempt\n   * it with the same idempotency key without worrying about duplicate payments.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  /** The version of the order being paid. If not supplied, the latest version will be paid. */\n  orderVersion?: number;\n  /**\n   * The IDs of the [payments]($m/Payment) to collect.\n   * The payment total must match the order total.\n   */\n  paymentIds?: string[];\n}\n\nexport const payOrderRequestSchema: Schema<PayOrderRequest> = object({\n  idempotencyKey: ['idempotency_key', string()],\n  orderVersion: ['order_version', optional(number())],\n  paymentIds: ['payment_ids', optional(array(string()))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of a request to the\n * [PayOrder]($e/Orders/PayOrder) endpoint.\n */\nexport interface PayOrderResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n}\n\nexport const payOrderResponseSchema: Schema<PayOrderResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  order: ['order', optional(lazy(() => orderSchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\nexport interface RetrieveOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveOrderResponseSchema: Schema<RetrieveOrderResponse> = object(\n  {\n    order: ['order', optional(lazy(() => orderSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * A filter based on the order `customer_id` and any tender `customer_id`\n * associated with the order. It does not filter based on the\n * [FulfillmentRecipient]($m/OrderFulfillmentRecipient) `customer_id`.\n */\nexport interface SearchOrdersCustomerFilter {\n  /**\n   * A list of customer IDs to filter by.\n   * Max: 10 customer IDs.\n   */\n  customerIds?: string[];\n}\n\nexport const searchOrdersCustomerFilterSchema: Schema<SearchOrdersCustomerFilter> = object(\n  { customerIds: ['customer_ids', optional(array(string()))] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/**\n * Filter for `Order` objects based on whether their `CREATED_AT`,\n * `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.\n * You can specify the time range and which timestamp to filter for. You can filter\n * for only one time range at a time.\n * For each time range, the start time and end time are inclusive. If the end time\n * is absent, it defaults to the time of the first request for the cursor.\n * __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,\n * you must set the `sort_field` in [OrdersSort]($m/SearchOrdersSort)\n * to the same field you filter for. For example, if you set the `CLOSED_AT` field\n * in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to\n * `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.\n * [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)\n */\nexport interface SearchOrdersDateTimeFilter {\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt?: TimeRange;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  updatedAt?: TimeRange;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  closedAt?: TimeRange;\n}\n\nexport const searchOrdersDateTimeFilterSchema: Schema<SearchOrdersDateTimeFilter> = object(\n  {\n    createdAt: ['created_at', optional(lazy(() => timeRangeSchema))],\n    updatedAt: ['updated_at', optional(lazy(() => timeRangeSchema))],\n    closedAt: ['closed_at', optional(lazy(() => timeRangeSchema))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Filter based on [order fulfillment]($m/OrderFulfillment) information. */\nexport interface SearchOrdersFulfillmentFilter {\n  /**\n   * A list of [fulfillment types]($m/OrderFulfillmentType) to filter\n   * for. The list returns orders if any of its fulfillments match any of the fulfillment types\n   * listed in this field.\n   * See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values\n   */\n  fulfillmentTypes?: string[];\n  /**\n   * A list of [fulfillment states]($m/OrderFulfillmentState) to filter\n   * for. The list returns orders if any of its fulfillments match any of the\n   * fulfillment states listed in this field.\n   * See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values\n   */\n  fulfillmentStates?: string[];\n}\n\nexport const searchOrdersFulfillmentFilterSchema: Schema<SearchOrdersFulfillmentFilter> = object(\n  {\n    fulfillmentTypes: ['fulfillment_types', optional(array(string()))],\n    fulfillmentStates: ['fulfillment_states', optional(array(string()))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** A filter based on order `source` information. */\nexport interface SearchOrdersSourceFilter {\n  /**\n   * Filters by the [Source]($m/OrderSource) `name`. The filter returns any orders\n   * with a `source.name` that matches any of the listed source names.\n   * Max: 10 source names.\n   */\n  sourceNames?: string[];\n}\n\nexport const searchOrdersSourceFilterSchema: Schema<SearchOrdersSourceFilter> = object(\n  { sourceNames: ['source_names', optional(array(string()))] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** Filter by the current order `state`. */\nexport interface SearchOrdersStateFilter {\n  /**\n   * States to filter for.\n   * See [OrderState](#type-orderstate) for possible values\n   */\n  states: string[];\n}\n\nexport const searchOrdersStateFilterSchema: Schema<SearchOrdersStateFilter> = object(\n  { states: ['states', array(string())] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  SearchOrdersCustomerFilter,\n  searchOrdersCustomerFilterSchema,\n} from './searchOrdersCustomerFilter';\nimport {\n  SearchOrdersDateTimeFilter,\n  searchOrdersDateTimeFilterSchema,\n} from './searchOrdersDateTimeFilter';\nimport {\n  SearchOrdersFulfillmentFilter,\n  searchOrdersFulfillmentFilterSchema,\n} from './searchOrdersFulfillmentFilter';\nimport {\n  SearchOrdersSourceFilter,\n  searchOrdersSourceFilterSchema,\n} from './searchOrdersSourceFilter';\nimport {\n  SearchOrdersStateFilter,\n  searchOrdersStateFilterSchema,\n} from './searchOrdersStateFilter';\n\n/**\n * Filtering criteria to use for a `SearchOrders` request. Multiple filters\n * are ANDed together.\n */\nexport interface SearchOrdersFilter {\n  /** Filter by the current order `state`. */\n  stateFilter?: SearchOrdersStateFilter;\n  /**\n   * Filter for `Order` objects based on whether their `CREATED_AT`,\n   * `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.\n   * You can specify the time range and which timestamp to filter for. You can filter\n   * for only one time range at a time.\n   * For each time range, the start time and end time are inclusive. If the end time\n   * is absent, it defaults to the time of the first request for the cursor.\n   * __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,\n   * you must set the `sort_field` in [OrdersSort]($m/SearchOrdersSort)\n   * to the same field you filter for. For example, if you set the `CLOSED_AT` field\n   * in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to\n   * `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.\n   * [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)\n   */\n  dateTimeFilter?: SearchOrdersDateTimeFilter;\n  /** Filter based on [order fulfillment]($m/OrderFulfillment) information. */\n  fulfillmentFilter?: SearchOrdersFulfillmentFilter;\n  /** A filter based on order `source` information. */\n  sourceFilter?: SearchOrdersSourceFilter;\n  /**\n   * A filter based on the order `customer_id` and any tender `customer_id`\n   * associated with the order. It does not filter based on the\n   * [FulfillmentRecipient]($m/OrderFulfillmentRecipient) `customer_id`.\n   */\n  customerFilter?: SearchOrdersCustomerFilter;\n}\n\nexport const searchOrdersFilterSchema: Schema<SearchOrdersFilter> = object({\n  stateFilter: [\n    'state_filter',\n    optional(lazy(() => searchOrdersStateFilterSchema)),\n  ],\n  dateTimeFilter: [\n    'date_time_filter',\n    optional(lazy(() => searchOrdersDateTimeFilterSchema)),\n  ],\n  fulfillmentFilter: [\n    'fulfillment_filter',\n    optional(lazy(() => searchOrdersFulfillmentFilterSchema)),\n  ],\n  sourceFilter: [\n    'source_filter',\n    optional(lazy(() => searchOrdersSourceFilterSchema)),\n  ],\n  customerFilter: [\n    'customer_filter',\n    optional(lazy(() => searchOrdersCustomerFilterSchema)),\n  ],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Sorting criteria for a `SearchOrders` request. Results can only be sorted\n * by a timestamp field.\n */\nexport interface SearchOrdersSort {\n  /** Specifies which timestamp to use to sort `SearchOrder` results. */\n  sortField: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  sortOrder?: string;\n}\n\nexport const searchOrdersSortSchema: Schema<SearchOrdersSort> = object({\n  sortField: ['sort_field', string()],\n  sortOrder: ['sort_order', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  SearchOrdersFilter,\n  searchOrdersFilterSchema,\n} from './searchOrdersFilter';\nimport { SearchOrdersSort, searchOrdersSortSchema } from './searchOrdersSort';\n\n/** Contains query criteria for the search. */\nexport interface SearchOrdersQuery {\n  /**\n   * Filtering criteria to use for a `SearchOrders` request. Multiple filters\n   * are ANDed together.\n   */\n  filter?: SearchOrdersFilter;\n  /**\n   * Sorting criteria for a `SearchOrders` request. Results can only be sorted\n   * by a timestamp field.\n   */\n  sort?: SearchOrdersSort;\n}\n\nexport const searchOrdersQuerySchema: Schema<SearchOrdersQuery> = object({\n  filter: ['filter', optional(lazy(() => searchOrdersFilterSchema))],\n  sort: ['sort', optional(lazy(() => searchOrdersSortSchema))],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  SearchOrdersQuery,\n  searchOrdersQuerySchema,\n} from './searchOrdersQuery';\n\n/**\n * The request does not have any required fields. When given no query criteria,\n * `SearchOrders` returns all results for all of the seller's locations. When retrieving additional\n * pages using a `cursor`, the `query` must be equal to the `query` used to retrieve the first page of\n * results.\n */\nexport interface SearchOrdersRequest {\n  /**\n   * The location IDs for the orders to query. All locations must belong to\n   * the same merchant.\n   * Min: 1 location ID.\n   * Max: 10 location IDs.\n   */\n  locationIds?: string[];\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this cursor to retrieve the next set of results for your original query.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n  /** Contains query criteria for the search. */\n  query?: SearchOrdersQuery;\n  /**\n   * The maximum number of results to be returned in a single page. It is\n   * possible to receive fewer results than the specified limit on a given page.\n   * Default: `500`\n   */\n  limit?: number;\n  /**\n   * A Boolean that controls the format of the search results. If `true`,\n   * `SearchOrders` returns [OrderEntry]($m/OrderEntry) objects. If `false`, `SearchOrders`\n   * returns complete order objects.\n   * Default: `false`.\n   */\n  returnEntries?: boolean;\n}\n\nexport const searchOrdersRequestSchema: Schema<SearchOrdersRequest> = object({\n  locationIds: ['location_ids', optional(array(string()))],\n  cursor: ['cursor', optional(string())],\n  query: ['query', optional(lazy(() => searchOrdersQuerySchema))],\n  limit: ['limit', optional(number())],\n  returnEntries: ['return_entries', optional(boolean())],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * A lightweight description of an [order]($m/Order) that is returned when\n * `returned_entries` is `true` on a [SearchOrdersRequest]($e/Orders/SearchOrders).\n */\nexport interface OrderEntry {\n  /** The ID of the order. */\n  orderId?: string;\n  /**\n   * The version number, which is incremented each time an update is committed to the order.\n   * Orders that were not created through the API do not include a version number and\n   * therefore cannot be updated.\n   * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)\n   */\n  version?: number;\n  /** The location ID the order belongs to. */\n  locationId?: string;\n}\n\nexport const orderEntrySchema: Schema<OrderEntry> = object({\n  orderId: ['order_id', optional(string())],\n  version: ['version', optional(number())],\n  locationId: ['location_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\nimport { OrderEntry, orderEntrySchema } from './orderEntry';\n\n/**\n * Either the `order_entries` or `orders` field is set, depending on whether\n * `return_entries` is set on the [SearchOrdersRequest]($e/Orders/SearchOrders).\n */\nexport interface SearchOrdersResponse {\n  /**\n   * A list of [OrderEntries]($m/OrderEntry) that fit the query\n   * conditions. The list is populated only if `return_entries` is set to `true` in the request.\n   */\n  orderEntries?: OrderEntry[];\n  /**\n   * A list of\n   * [Order]($m/Order) objects that match the query conditions. The list is populated only if\n   * `return_entries` is set to `false` in the request.\n   */\n  orders?: Order[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n  /** [Errors]($m/Error) encountered during the search. */\n  errors?: Error[];\n}\n\nexport const searchOrdersResponseSchema: Schema<SearchOrdersResponse> = object({\n  orderEntries: [\n    'order_entries',\n    optional(array(lazy(() => orderEntrySchema))),\n  ],\n  orders: ['orders', optional(array(lazy(() => orderSchema)))],\n  cursor: ['cursor', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in requests to the\n * [UpdateOrder]($e/Orders/UpdateOrder) endpoint.\n */\nexport interface UpdateOrderRequest {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /**\n   * The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)\n   * fields to clear. For example, `line_items[uid].note`.\n   * For more information, see [Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).\n   */\n  fieldsToClear?: string[];\n  /**\n   * A value you specify that uniquely identifies this update request.\n   * If you are unsure whether a particular update was applied to an order successfully,\n   * you can reattempt it with the same idempotency key without\n   * worrying about creating duplicate updates to the order.\n   * The latest order version is returned.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).\n   */\n  idempotencyKey?: string;\n}\n\nexport const updateOrderRequestSchema: Schema<UpdateOrderRequest> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  fieldsToClear: ['fields_to_clear', optional(array(string()))],\n  idempotencyKey: ['idempotency_key', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [UpdateOrder]($e/Orders/UpdateOrder) endpoint.\n */\nexport interface UpdateOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. `Order` objects also\n   * include information about any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateOrderResponseSchema: Schema<UpdateOrderResponse> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  BatchRetrieveOrdersRequest,\n  batchRetrieveOrdersRequestSchema,\n} from '../models/batchRetrieveOrdersRequest';\nimport {\n  BatchRetrieveOrdersResponse,\n  batchRetrieveOrdersResponseSchema,\n} from '../models/batchRetrieveOrdersResponse';\nimport {\n  CalculateOrderRequest,\n  calculateOrderRequestSchema,\n} from '../models/calculateOrderRequest';\nimport {\n  CalculateOrderResponse,\n  calculateOrderResponseSchema,\n} from '../models/calculateOrderResponse';\nimport {\n  CloneOrderRequest,\n  cloneOrderRequestSchema,\n} from '../models/cloneOrderRequest';\nimport {\n  CloneOrderResponse,\n  cloneOrderResponseSchema,\n} from '../models/cloneOrderResponse';\nimport {\n  CreateOrderRequest,\n  createOrderRequestSchema,\n} from '../models/createOrderRequest';\nimport {\n  CreateOrderResponse,\n  createOrderResponseSchema,\n} from '../models/createOrderResponse';\nimport {\n  PayOrderRequest,\n  payOrderRequestSchema,\n} from '../models/payOrderRequest';\nimport {\n  PayOrderResponse,\n  payOrderResponseSchema,\n} from '../models/payOrderResponse';\nimport {\n  RetrieveOrderResponse,\n  retrieveOrderResponseSchema,\n} from '../models/retrieveOrderResponse';\nimport {\n  SearchOrdersRequest,\n  searchOrdersRequestSchema,\n} from '../models/searchOrdersRequest';\nimport {\n  SearchOrdersResponse,\n  searchOrdersResponseSchema,\n} from '../models/searchOrdersResponse';\nimport {\n  UpdateOrderRequest,\n  updateOrderRequestSchema,\n} from '../models/updateOrderRequest';\nimport {\n  UpdateOrderResponse,\n  updateOrderResponseSchema,\n} from '../models/updateOrderResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class OrdersApi extends BaseApi {\n  /**\n   * Creates a new [order]($m/Order) that can include information about products for\n   * purchase and settings to apply to the purchase.\n   *\n   * To pay for a created order, see\n   * [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).\n   *\n   * You can modify open orders using the [UpdateOrder]($e/Orders/UpdateOrder) endpoint.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createOrder(\n    body: CreateOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateOrderResponse>> {\n    const req = this.createRequest('POST', '/v2/orders');\n    const mapped = req.prepareArgs({ body: [body, createOrderRequestSchema] });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a set of [orders]($m/Order) by their IDs.\n   *\n   * If a given order ID does not exist, the ID is ignored instead of generating an error.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async batchRetrieveOrders(\n    body: BatchRetrieveOrdersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveOrdersResponse>> {\n    const req = this.createRequest('POST', '/v2/orders/batch-retrieve');\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveOrdersRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(batchRetrieveOrdersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Enables applications to preview order pricing without creating an order.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async calculateOrder(\n    body: CalculateOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CalculateOrderResponse>> {\n    const req = this.createRequest('POST', '/v2/orders/calculate');\n    const mapped = req.prepareArgs({\n      body: [body, calculateOrderRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(calculateOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new order, in the `DRAFT` state, by duplicating an existing order. The newly created order\n   * has\n   * only the core fields (such as line items, taxes, and discounts) copied from the original order.\n   *\n   * @param body         An object containing the fields to POST for the request.  See the\n   *                                                 corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async cloneOrder(\n    body: CloneOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CloneOrderResponse>> {\n    const req = this.createRequest('POST', '/v2/orders/clone');\n    const mapped = req.prepareArgs({ body: [body, cloneOrderRequestSchema] });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(cloneOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Search all orders for one or more locations. Orders include all sales,\n   * returns, and exchanges regardless of how or when they entered the Square\n   * ecosystem (such as Point of Sale, Invoices, and Connect APIs).\n   *\n   * `SearchOrders` requests need to specify which locations to search and define a\n   * [SearchOrdersQuery]($m/SearchOrdersQuery) object that controls\n   * how to sort or filter the results. Your `SearchOrdersQuery` can:\n   *\n   * Set filter criteria.\n   * Set the sort order.\n   * Determine whether to return results as complete `Order` objects or as\n   * [OrderEntry]($m/OrderEntry) objects.\n   *\n   * Note that details for orders processed with Square Point of Sale while in\n   * offline mode might not be transmitted to Square for up to 72 hours. Offline\n   * orders have a `created_at` value that reflects the time the order was created,\n   * not the time it was subsequently transmitted to Square.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchOrders(\n    body: SearchOrdersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchOrdersResponse>> {\n    const req = this.createRequest('POST', '/v2/orders/search');\n    const mapped = req.prepareArgs({ body: [body, searchOrdersRequestSchema] });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchOrdersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves an [Order]($m/Order) by ID.\n   *\n   * @param orderId  The ID of the order to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveOrder(\n    orderId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveOrderResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ orderId: [orderId, string()] });\n    req.appendTemplatePath`/v2/orders/${mapped.orderId}`;\n    return req.callAsJson(retrieveOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an open [order]($m/Order) by adding, replacing, or deleting\n   * fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.\n   *\n   * An `UpdateOrder` request requires the following:\n   *\n   * - The `order_id` in the endpoint path, identifying the order to update.\n   * - The latest `version` of the order to update.\n   * - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-\n   * objects)\n   * containing only the fields to update and the version to which the update is\n   * being applied.\n   * - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-\n   * orders#on-dot-notation)\n   * identifying the fields to clear.\n   *\n   * To pay for an order, see\n   * [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).\n   *\n   * @param orderId      The ID of the order to update.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateOrder(\n    orderId: string,\n    body: UpdateOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateOrderResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      orderId: [orderId, string()],\n      body: [body, updateOrderRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/orders/${mapped.orderId}`;\n    return req.callAsJson(updateOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Pay for an [order]($m/Order) using one or more approved [payments]($m/Payment)\n   * or settle an order with a total of `0`.\n   *\n   * The total of the `payment_ids` listed in the request must be equal to the order\n   * total. Orders with a total amount of `0` can be marked as paid by specifying an empty\n   * array of `payment_ids` in the request.\n   *\n   * To be used with `PayOrder`, a payment must:\n   *\n   * - Reference the order by specifying the `order_id` when [creating the\n   * payment]($e/Payments/CreatePayment).\n   * Any approved payments that reference the same `order_id` not specified in the\n   * `payment_ids` is canceled.\n   * - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-\n   * payments/card-payments/delayed-capture).\n   * Using a delayed capture payment with `PayOrder` completes the approved payment.\n   *\n   * @param orderId      The ID of the order being paid.\n   * @param body         An object containing the fields to POST for the request.  See the\n   *                                               corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async payOrder(\n    orderId: string,\n    body: PayOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<PayOrderResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      orderId: [orderId, string()],\n      body: [body, payOrderRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/orders/${mapped.orderId}/pay`;\n    return req.callAsJson(payOrderResponseSchema, requestOptions);\n  }\n}\n","import { object, Schema, string } from '../schema';\n\n/**\n * Describes a request to cancel a payment using\n * [CancelPaymentByIdempotencyKey]($e/Payments/CancelPaymentByIdempotencyKey).\n */\nexport interface CancelPaymentByIdempotencyKeyRequest {\n  /** The `idempotency_key` identifying the payment to be canceled. */\n  idempotencyKey: string;\n}\n\nexport const cancelPaymentByIdempotencyKeyRequestSchema: Schema<CancelPaymentByIdempotencyKeyRequest> = object(\n  { idempotencyKey: ['idempotency_key', string()] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the response returned by\n * [CancelPaymentByIdempotencyKey]($e/Payments/CancelPaymentByIdempotencyKey).\n * On success, `errors` is empty.\n */\nexport interface CancelPaymentByIdempotencyKeyResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const cancelPaymentByIdempotencyKeyResponseSchema: Schema<CancelPaymentByIdempotencyKeyResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Details about the application that took the payment. */\nexport interface ApplicationDetails {\n  /** A list of products to return to external callers. */\n  squareProduct?: string;\n  /**\n   * The Square ID assigned to the application used to take the payment.\n   * Application developers can use this information to identify payments that\n   * their application processed.\n   * For example, if a developer uses a custom application to process payments,\n   * this field contains the application ID from the Developer Dashboard.\n   * If a seller uses a [Square App Marketplace](https://developer.squareup.com/docs/app-marketplace)\n   * application to process payments, the field contains the corresponding application ID.\n   */\n  applicationId?: string;\n}\n\nexport const applicationDetailsSchema: Schema<ApplicationDetails> = object({\n  squareProduct: ['square_product', optional(string())],\n  applicationId: ['application_id', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`. */\nexport interface ACHDetails {\n  /** The routing number for the bank account. */\n  routingNumber?: string;\n  /** The last few digits of the bank account number. */\n  accountNumberSuffix?: string;\n  /**\n   * The type of the bank account performing the transfer. The account type can be `CHECKING`,\n   * `SAVINGS`, or `UNKNOWN`.\n   */\n  accountType?: string;\n}\n\nexport const aCHDetailsSchema: Schema<ACHDetails> = object({\n  routingNumber: ['routing_number', optional(string())],\n  accountNumberSuffix: ['account_number_suffix', optional(string())],\n  accountType: ['account_type', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { ACHDetails, aCHDetailsSchema } from './aCHDetails';\nimport { Error, errorSchema } from './error';\n\n/** Additional details about BANK_ACCOUNT type payments. */\nexport interface BankAccountPaymentDetails {\n  /** The name of the bank associated with the bank account. */\n  bankName?: string;\n  /** The type of the bank transfer. The type can be `ACH` or `UNKNOWN`. */\n  transferType?: string;\n  /**\n   * The ownership type of the bank account performing the transfer.\n   * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.\n   */\n  accountOwnershipType?: string;\n  /**\n   * Uniquely identifies the bank account for this seller and can be used\n   * to determine if payments are from the same bank account.\n   */\n  fingerprint?: string;\n  /** The two-letter ISO code representing the country the bank account is located in. */\n  country?: string;\n  /** The statement description as sent to the bank. */\n  statementDescription?: string;\n  /** ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`. */\n  achDetails?: ACHDetails;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const bankAccountPaymentDetailsSchema: Schema<BankAccountPaymentDetails> = object(\n  {\n    bankName: ['bank_name', optional(string())],\n    transferType: ['transfer_type', optional(string())],\n    accountOwnershipType: ['account_ownership_type', optional(string())],\n    fingerprint: ['fingerprint', optional(string())],\n    country: ['country', optional(string())],\n    statementDescription: ['statement_description', optional(string())],\n    achDetails: ['ach_details', optional(lazy(() => aCHDetailsSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Additional details about Afterpay payments. */\nexport interface AfterpayDetails {\n  /** Email address on the buyer's Afterpay account. */\n  emailAddress?: string;\n}\n\nexport const afterpayDetailsSchema: Schema<AfterpayDetails> = object({\n  emailAddress: ['email_address', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { AfterpayDetails, afterpayDetailsSchema } from './afterpayDetails';\n\n/** Additional details about a Buy Now Pay Later payment type. */\nexport interface BuyNowPayLaterDetails {\n  /**\n   * The brand used for the Buy Now Pay Later payment.\n   * The brand can be `AFTERPAY` or `UNKNOWN`.\n   */\n  brand?: string;\n  /** Additional details about Afterpay payments. */\n  afterpayDetails?: AfterpayDetails;\n}\n\nexport const buyNowPayLaterDetailsSchema: Schema<BuyNowPayLaterDetails> = object(\n  {\n    brand: ['brand', optional(string())],\n    afterpayDetails: [\n      'afterpay_details',\n      optional(lazy(() => afterpayDetailsSchema)),\n    ],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** The timeline for card payments. */\nexport interface CardPaymentTimeline {\n  /** The timestamp when the payment was authorized, in RFC 3339 format. */\n  authorizedAt?: string;\n  /** The timestamp when the payment was captured, in RFC 3339 format. */\n  capturedAt?: string;\n  /** The timestamp when the payment was voided, in RFC 3339 format. */\n  voidedAt?: string;\n}\n\nexport const cardPaymentTimelineSchema: Schema<CardPaymentTimeline> = object({\n  authorizedAt: ['authorized_at', optional(string())],\n  capturedAt: ['captured_at', optional(string())],\n  voidedAt: ['voided_at', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Details about the device that took the payment. */\nexport interface DeviceDetails {\n  /** The Square-issued ID of the device. */\n  deviceId?: string;\n  /** The Square-issued installation ID for the device. */\n  deviceInstallationId?: string;\n  /** The name of the device set by the seller. */\n  deviceName?: string;\n}\n\nexport const deviceDetailsSchema: Schema<DeviceDetails> = object({\n  deviceId: ['device_id', optional(string())],\n  deviceInstallationId: ['device_installation_id', optional(string())],\n  deviceName: ['device_name', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Card, cardSchema } from './card';\nimport {\n  CardPaymentTimeline,\n  cardPaymentTimelineSchema,\n} from './cardPaymentTimeline';\nimport { DeviceDetails, deviceDetailsSchema } from './deviceDetails';\nimport { Error, errorSchema } from './error';\n\n/** Reflects the current status of a card payment. Contains only non-confidential information. */\nexport interface CardPaymentDetails {\n  /**\n   * The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or\n   * FAILED.\n   */\n  status?: string;\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the payment token generated by Web Payments SDK.\n   */\n  card?: Card;\n  /**\n   * The method used to enter the card's details for the payment. The method can be\n   * `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.\n   */\n  entryMethod?: string;\n  /**\n   * The status code returned from the Card Verification Value (CVV) check. The code can be\n   * `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.\n   */\n  cvvStatus?: string;\n  /**\n   * The status code returned from the Address Verification System (AVS) check. The code can be\n   * `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.\n   */\n  avsStatus?: string;\n  /**\n   * The status code returned by the card issuer that describes the payment's\n   * authorization status.\n   */\n  authResultCode?: string;\n  /** For EMV payments, the application ID identifies the EMV application used for the payment. */\n  applicationIdentifier?: string;\n  /** For EMV payments, the human-readable name of the EMV application used for the payment. */\n  applicationName?: string;\n  /** For EMV payments, the cryptogram generated for the payment. */\n  applicationCryptogram?: string;\n  /**\n   * For EMV payments, the method used to verify the cardholder's identity. The method can be\n   * `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.\n   */\n  verificationMethod?: string;\n  /**\n   * For EMV payments, the results of the cardholder verification. The result can be\n   * `SUCCESS`, `FAILURE`, or `UNKNOWN`.\n   */\n  verificationResults?: string;\n  /**\n   * The statement description sent to the card networks.\n   * Note: The actual statement description varies and is likely to be truncated and appended with\n   * additional information on a per issuer basis.\n   */\n  statementDescription?: string;\n  /** Details about the device that took the payment. */\n  deviceDetails?: DeviceDetails;\n  /** The timeline for card payments. */\n  cardPaymentTimeline?: CardPaymentTimeline;\n  /**\n   * Whether the card must be physically present for the payment to\n   * be refunded.  If set to `true`, the card must be present.\n   */\n  refundRequiresCardPresence?: boolean;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const cardPaymentDetailsSchema: Schema<CardPaymentDetails> = object({\n  status: ['status', optional(string())],\n  card: ['card', optional(lazy(() => cardSchema))],\n  entryMethod: ['entry_method', optional(string())],\n  cvvStatus: ['cvv_status', optional(string())],\n  avsStatus: ['avs_status', optional(string())],\n  authResultCode: ['auth_result_code', optional(string())],\n  applicationIdentifier: ['application_identifier', optional(string())],\n  applicationName: ['application_name', optional(string())],\n  applicationCryptogram: ['application_cryptogram', optional(string())],\n  verificationMethod: ['verification_method', optional(string())],\n  verificationResults: ['verification_results', optional(string())],\n  statementDescription: ['statement_description', optional(string())],\n  deviceDetails: ['device_details', optional(lazy(() => deviceDetailsSchema))],\n  cardPaymentTimeline: [\n    'card_payment_timeline',\n    optional(lazy(() => cardPaymentTimelineSchema)),\n  ],\n  refundRequiresCardPresence: [\n    'refund_requires_card_presence',\n    optional(boolean()),\n  ],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Stores details about a cash payment. Contains only non-confidential information. For more information, see\n * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).\n */\nexport interface CashPaymentDetails {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  buyerSuppliedMoney: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  changeBackMoney?: Money;\n}\n\nexport const cashPaymentDetailsSchema: Schema<CashPaymentDetails> = object({\n  buyerSuppliedMoney: ['buyer_supplied_money', lazy(() => moneySchema)],\n  changeBackMoney: ['change_back_money', optional(lazy(() => moneySchema))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Additional details about `WALLET` type payments. Contains only non-confidential information. */\nexport interface DigitalWalletDetails {\n  /**\n   * The status of the `WALLET` payment. The status can be `AUTHORIZED`, `CAPTURED`, `VOIDED`, or\n   * `FAILED`.\n   */\n  status?: string;\n}\n\nexport const digitalWalletDetailsSchema: Schema<DigitalWalletDetails> = object({\n  status: ['status', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Stores details about an external payment. Contains only non-confidential information.\n * For more information, see\n * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).\n */\nexport interface ExternalPaymentDetails {\n  /**\n   * The type of external payment the seller received. It can be one of the following:\n   * - CHECK - Paid using a physical check.\n   * - BANK_TRANSFER - Paid using external bank transfer.\n   * - OTHER\\_GIFT\\_CARD - Paid using a non-Square gift card.\n   * - CRYPTO - Paid using a crypto currency.\n   * - SQUARE_CASH - Paid using Square Cash App.\n   * - SOCIAL - Paid using peer-to-peer payment applications.\n   * - EXTERNAL - A third-party application gathered this payment outside of Square.\n   * - EMONEY - Paid using an E-money provider.\n   * - CARD - A credit or debit card that Square does not support.\n   * - STORED_BALANCE - Use for house accounts, store credit, and so forth.\n   * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals\n   * - OTHER - A type not listed here.\n   */\n  type: string;\n  /**\n   * A description of the external payment source. For example,\n   * \"Food Delivery Service\".\n   */\n  source: string;\n  /** An ID to associate the payment to its originating source. */\n  sourceId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  sourceFeeMoney?: Money;\n}\n\nexport const externalPaymentDetailsSchema: Schema<ExternalPaymentDetails> = object(\n  {\n    type: ['type', string()],\n    source: ['source', string()],\n    sourceId: ['source_id', optional(string())],\n    sourceFeeMoney: ['source_fee_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents the Square processing fee. */\nexport interface ProcessingFee {\n  /** The timestamp of when the fee takes effect, in RFC 3339 format. */\n  effectiveAt?: string;\n  /** The type of fee assessed or adjusted. The fee type can be `INITIAL` or `ADJUSTMENT`. */\n  type?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n}\n\nexport const processingFeeSchema: Schema<ProcessingFee> = object({\n  effectiveAt: ['effective_at', optional(string())],\n  type: ['type', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents fraud risk information for the associated payment.\n * When you take a payment through Square's Payments API (using the `CreatePayment`\n * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers\n * can use this information to determine the course of action (for example,\n * provide the goods/services or refund the payment).\n */\nexport interface RiskEvaluation {\n  /** The timestamp when payment risk was evaluated, in RFC 3339 format. */\n  createdAt?: string;\n  riskLevel?: string;\n}\n\nexport const riskEvaluationSchema: Schema<RiskEvaluation> = object({\n  createdAt: ['created_at', optional(string())],\n  riskLevel: ['risk_level', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport {\n  ApplicationDetails,\n  applicationDetailsSchema,\n} from './applicationDetails';\nimport {\n  BankAccountPaymentDetails,\n  bankAccountPaymentDetailsSchema,\n} from './bankAccountPaymentDetails';\nimport {\n  BuyNowPayLaterDetails,\n  buyNowPayLaterDetailsSchema,\n} from './buyNowPayLaterDetails';\nimport {\n  CardPaymentDetails,\n  cardPaymentDetailsSchema,\n} from './cardPaymentDetails';\nimport {\n  CashPaymentDetails,\n  cashPaymentDetailsSchema,\n} from './cashPaymentDetails';\nimport { DeviceDetails, deviceDetailsSchema } from './deviceDetails';\nimport {\n  DigitalWalletDetails,\n  digitalWalletDetailsSchema,\n} from './digitalWalletDetails';\nimport {\n  ExternalPaymentDetails,\n  externalPaymentDetailsSchema,\n} from './externalPaymentDetails';\nimport { Money, moneySchema } from './money';\nimport { ProcessingFee, processingFeeSchema } from './processingFee';\nimport { RiskEvaluation, riskEvaluationSchema } from './riskEvaluation';\n\n/** Represents a payment processed by the Square API. */\nexport interface Payment {\n  /** A unique ID for the payment. */\n  id?: string;\n  /** The timestamp of when the payment was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp of when the payment was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  tipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appFeeMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  approvedMoney?: Money;\n  /** The processing fees and fee adjustments assessed by Square for this payment. */\n  processingFee?: ProcessingFee[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  refundedMoney?: Money;\n  /** Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED. */\n  status?: string;\n  /**\n   * The duration of time after the payment's creation when Square automatically applies the\n   * `delay_action` to the payment. This automatic `delay_action` applies only to payments that\n   * do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`\n   * time period.\n   * This field is specified as a time duration, in RFC 3339 format.\n   * Notes:\n   * This feature is only supported for card payments.\n   * Default:\n   * - Card-present payments: \"PT36H\" (36 hours) from the creation time.\n   * - Card-not-present payments: \"P7D\" (7 days) from the creation time.\n   */\n  delayDuration?: string;\n  /**\n   * The action to be applied to the payment when the `delay_duration` has elapsed. This field\n   * is read-only.\n   * Current values include `CANCEL`.\n   */\n  delayAction?: string;\n  /**\n   * The read-only timestamp of when the `delay_action` is automatically applied,\n   * in RFC 3339 format.\n   * Note that this field is calculated by summing the payment's `delay_duration` and `created_at`\n   * fields. The `created_at` field is generated by Square and might not exactly match the\n   * time on your local machine.\n   */\n  delayedUntil?: string;\n  /**\n   * The source type for this payment.\n   * Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `BUY_NOW_PAY_LATER`, `CASH`, or\n   * `EXTERNAL`. For information about these payment source types,\n   * see [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).\n   */\n  sourceType?: string;\n  /** Reflects the current status of a card payment. Contains only non-confidential information. */\n  cardDetails?: CardPaymentDetails;\n  /**\n   * Stores details about a cash payment. Contains only non-confidential information. For more information, see\n   * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).\n   */\n  cashDetails?: CashPaymentDetails;\n  /** Additional details about BANK_ACCOUNT type payments. */\n  bankAccountDetails?: BankAccountPaymentDetails;\n  /**\n   * Stores details about an external payment. Contains only non-confidential information.\n   * For more information, see\n   * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).\n   */\n  externalDetails?: ExternalPaymentDetails;\n  /** Additional details about `WALLET` type payments. Contains only non-confidential information. */\n  walletDetails?: DigitalWalletDetails;\n  /** Additional details about a Buy Now Pay Later payment type. */\n  buyNowPayLaterDetails?: BuyNowPayLaterDetails;\n  /** The ID of the location associated with the payment. */\n  locationId?: string;\n  /** The ID of the order associated with the payment. */\n  orderId?: string;\n  /**\n   * An optional ID that associates the payment with an entity in\n   * another system.\n   */\n  referenceId?: string;\n  /** The [Customer]($m/Customer) ID of the customer associated with the payment. */\n  customerId?: string;\n  /**\n   * __Deprecated__: Use `Payment.team_member_id` instead.\n   * An optional ID of the employee associated with taking the payment.\n   */\n  employeeId?: string;\n  /** An optional ID of the [TeamMember]($m/TeamMember) associated with taking the payment. */\n  teamMemberId?: string;\n  /** A list of `refund_id`s identifying refunds for the payment. */\n  refundIds?: string[];\n  /**\n   * Represents fraud risk information for the associated payment.\n   * When you take a payment through Square's Payments API (using the `CreatePayment`\n   * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers\n   * can use this information to determine the course of action (for example,\n   * provide the goods/services or refund the payment).\n   */\n  riskEvaluation?: RiskEvaluation;\n  /** The buyer's email address. */\n  buyerEmailAddress?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  billingAddress?: Address;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  shippingAddress?: Address;\n  /** An optional note to include when creating a payment. */\n  note?: string;\n  /**\n   * Additional payment information that gets added to the customer's card statement\n   * as part of the statement description.\n   * Note that the `statement_description_identifier` might get truncated on the statement description\n   * to fit the required information including the Square identifier (SQ *) and the name of the\n   * seller taking the payment.\n   */\n  statementDescriptionIdentifier?: string;\n  /**\n   * Actions that can be performed on this payment:\n   * - `EDIT_AMOUNT_UP` - The payment amount can be edited up.\n   * - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.\n   * - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.\n   * - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.\n   */\n  capabilities?: string[];\n  /**\n   * The payment's receipt number.\n   * The field is missing if a payment is canceled.\n   */\n  receiptNumber?: string;\n  /**\n   * The URL for the payment's receipt.\n   * The field is only populated for COMPLETED payments.\n   */\n  receiptUrl?: string;\n  /** Details about the device that took the payment. */\n  deviceDetails?: DeviceDetails;\n  /** Details about the application that took the payment. */\n  applicationDetails?: ApplicationDetails;\n  /**\n   * Used for optimistic concurrency. This opaque token identifies a specific version of the\n   * `Payment` object.\n   */\n  versionToken?: string;\n}\n\nexport const paymentSchema: Schema<Payment> = object({\n  id: ['id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],\n  approvedMoney: ['approved_money', optional(lazy(() => moneySchema))],\n  processingFee: [\n    'processing_fee',\n    optional(array(lazy(() => processingFeeSchema))),\n  ],\n  refundedMoney: ['refunded_money', optional(lazy(() => moneySchema))],\n  status: ['status', optional(string())],\n  delayDuration: ['delay_duration', optional(string())],\n  delayAction: ['delay_action', optional(string())],\n  delayedUntil: ['delayed_until', optional(string())],\n  sourceType: ['source_type', optional(string())],\n  cardDetails: ['card_details', optional(lazy(() => cardPaymentDetailsSchema))],\n  cashDetails: ['cash_details', optional(lazy(() => cashPaymentDetailsSchema))],\n  bankAccountDetails: [\n    'bank_account_details',\n    optional(lazy(() => bankAccountPaymentDetailsSchema)),\n  ],\n  externalDetails: [\n    'external_details',\n    optional(lazy(() => externalPaymentDetailsSchema)),\n  ],\n  walletDetails: [\n    'wallet_details',\n    optional(lazy(() => digitalWalletDetailsSchema)),\n  ],\n  buyNowPayLaterDetails: [\n    'buy_now_pay_later_details',\n    optional(lazy(() => buyNowPayLaterDetailsSchema)),\n  ],\n  locationId: ['location_id', optional(string())],\n  orderId: ['order_id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n  refundIds: ['refund_ids', optional(array(string()))],\n  riskEvaluation: [\n    'risk_evaluation',\n    optional(lazy(() => riskEvaluationSchema)),\n  ],\n  buyerEmailAddress: ['buyer_email_address', optional(string())],\n  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  note: ['note', optional(string())],\n  statementDescriptionIdentifier: [\n    'statement_description_identifier',\n    optional(string()),\n  ],\n  capabilities: ['capabilities', optional(array(string()))],\n  receiptNumber: ['receipt_number', optional(string())],\n  receiptUrl: ['receipt_url', optional(string())],\n  deviceDetails: ['device_details', optional(lazy(() => deviceDetailsSchema))],\n  applicationDetails: [\n    'application_details',\n    optional(lazy(() => applicationDetailsSchema)),\n  ],\n  versionToken: ['version_token', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/** Defines the response returned by [CancelPayment]($e/Payments/CancelPayment). */\nexport interface CancelPaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const cancelPaymentResponseSchema: Schema<CancelPaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    payment: ['payment', optional(lazy(() => paymentSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Describes a request to complete (capture) a payment using\n * [CompletePayment]($e/Payments/CompletePayment).\n * By default, payments are set to `autocomplete` immediately after they are created.\n * To complete payments manually, set `autocomplete` to `false`.\n */\nexport interface CompletePaymentRequest {\n  /**\n   * Used for optimistic concurrency. This opaque token identifies the current `Payment`\n   * version that the caller expects. If the server has a different version of the Payment,\n   * the update fails and a response with a VERSION_MISMATCH error is returned.\n   */\n  versionToken?: string;\n}\n\nexport const completePaymentRequestSchema: Schema<CompletePaymentRequest> = object(\n  { versionToken: ['version_token', optional(string())] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/** Defines the response returned by[CompletePayment]($e/Payments/CompletePayment). */\nexport interface CompletePaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const completePaymentResponseSchema: Schema<CompletePaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    payment: ['payment', optional(lazy(() => paymentSchema))],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport {\n  CashPaymentDetails,\n  cashPaymentDetailsSchema,\n} from './cashPaymentDetails';\nimport {\n  ExternalPaymentDetails,\n  externalPaymentDetailsSchema,\n} from './externalPaymentDetails';\nimport { Money, moneySchema } from './money';\n\n/**\n * Describes a request to create a payment using\n * [CreatePayment]($e/Payments/CreatePayment).\n */\nexport interface CreatePaymentRequest {\n  /**\n   * The ID for the source of funds for this payment. This can be a payment token\n   * (card nonce) generated by the Square payment form or a card on file made with the\n   * Customers API. If recording a payment that the seller\n   * received outside of Square, specify either \"CASH\" or \"EXTERNAL\".\n   * For more information, see\n   * [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).\n   */\n  sourceId: string;\n  /**\n   * A unique string that identifies this `CreatePayment` request. Keys can be any valid string\n   * but must be unique for every `CreatePayment` request.\n   * Note: The number of allowed characters might be less than the stated maximum, if multi-byte\n   * characters are used.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  tipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appFeeMoney?: Money;\n  /**\n   * The duration of time after the payment's creation when Square automatically cancels the\n   * payment. This automatic cancellation applies only to payments that do not reach a terminal state\n   * (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.\n   * This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value\n   * of 1 minute.\n   * Note: This feature is only supported for card payments. This parameter can only be set for a delayed\n   * capture payment (`autocomplete=false`).\n   * Default:\n   * - Card-present payments: \"PT36H\" (36 hours) from the creation time.\n   * - Card-not-present payments: \"P7D\" (7 days) from the creation time.\n   */\n  delayDuration?: string;\n  /**\n   * If set to `true`, this payment will be completed when possible. If\n   * set to `false`, this payment is held in an approved state until either\n   * explicitly completed (captured) or canceled (voided). For more information, see\n   * [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).\n   * Default: true\n   */\n  autocomplete?: boolean;\n  /** Associates a previously created order with this payment. */\n  orderId?: string;\n  /**\n   * The [Customer]($m/Customer) ID of the customer associated with the payment.\n   * This is required if the `source_id` refers to a card on file created using the Customers API.\n   */\n  customerId?: string;\n  /**\n   * The location ID to associate with the payment. If not specified, the default location is\n   * used.\n   */\n  locationId?: string;\n  /**\n   * An optional [TeamMember]($m/TeamMember) ID to associate with\n   * this payment.\n   */\n  teamMemberId?: string;\n  /**\n   * A user-defined ID to associate with the payment.\n   * You can use this field to associate the payment to an entity in an external system\n   * (for example, you might specify an order ID that is generated by a third-party shopping cart).\n   */\n  referenceId?: string;\n  /**\n   * An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).\n   * Verification tokens encapsulate customer device information and 3-D Secure\n   * challenge results to indicate that Square has verified the buyer identity.\n   * For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).\n   */\n  verificationToken?: string;\n  /**\n   * If set to `true` and charging a Square Gift Card, a payment might be returned with\n   * `amount_money` equal to less than what was requested. For example, a request for $20 when charging\n   * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose\n   * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card\n   * payment. This field cannot be `true` when `autocomplete = true`.\n   * For more information, see\n   * [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).\n   * Default: false\n   */\n  acceptPartialAuthorization?: boolean;\n  /** The buyer's email address. */\n  buyerEmailAddress?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  billingAddress?: Address;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  shippingAddress?: Address;\n  /** An optional note to be entered by the developer when creating a payment. */\n  note?: string;\n  /**\n   * Optional additional payment information to include on the customer's card statement\n   * as part of the statement description. This can be, for example, an invoice number, ticket number,\n   * or short description that uniquely identifies the purchase.\n   * Note that the `statement_description_identifier` might get truncated on the statement description\n   * to fit the required information including the Square identifier (SQ *) and name of the\n   * seller taking the payment.\n   */\n  statementDescriptionIdentifier?: string;\n  /**\n   * Stores details about a cash payment. Contains only non-confidential information. For more information, see\n   * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).\n   */\n  cashDetails?: CashPaymentDetails;\n  /**\n   * Stores details about an external payment. Contains only non-confidential information.\n   * For more information, see\n   * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).\n   */\n  externalDetails?: ExternalPaymentDetails;\n}\n\nexport const createPaymentRequestSchema: Schema<CreatePaymentRequest> = object({\n  sourceId: ['source_id', string()],\n  idempotencyKey: ['idempotency_key', string()],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],\n  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],\n  delayDuration: ['delay_duration', optional(string())],\n  autocomplete: ['autocomplete', optional(boolean())],\n  orderId: ['order_id', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  verificationToken: ['verification_token', optional(string())],\n  acceptPartialAuthorization: [\n    'accept_partial_authorization',\n    optional(boolean()),\n  ],\n  buyerEmailAddress: ['buyer_email_address', optional(string())],\n  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  note: ['note', optional(string())],\n  statementDescriptionIdentifier: [\n    'statement_description_identifier',\n    optional(string()),\n  ],\n  cashDetails: ['cash_details', optional(lazy(() => cashPaymentDetailsSchema))],\n  externalDetails: [\n    'external_details',\n    optional(lazy(() => externalPaymentDetailsSchema)),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/**\n * Defines the response returned by [CreatePayment]($e/Payments/CreatePayment).\n * If there are errors processing the request, the `payment` field might not be\n * present, or it might be present with a status of `FAILED`.\n */\nexport interface CreatePaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const createPaymentResponseSchema: Schema<CreatePaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    payment: ['payment', optional(lazy(() => paymentSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/** Defines the response returned by [GetPayment]($e/Payments/GetPayment). */\nexport interface GetPaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const getPaymentResponseSchema: Schema<GetPaymentResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  payment: ['payment', optional(lazy(() => paymentSchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/** Defines the response returned by [ListPayments]($e/Payments/ListPayments). */\nexport interface ListPaymentsResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The requested list of payments. */\n  payments?: Payment[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listPaymentsResponseSchema: Schema<ListPaymentsResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  payments: ['payments', optional(array(lazy(() => paymentSchema)))],\n  cursor: ['cursor', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Payment, paymentSchema } from './payment';\n\n/**\n * Describes a request to update a payment using\n * [UpdatePayment]($e/Payments/UpdatePayment).\n */\nexport interface UpdatePaymentRequest {\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n  /**\n   * A unique string that identifies this `UpdatePayment` request. Keys can be any valid string\n   * but must be unique for every `UpdatePayment` request.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).\n   */\n  idempotencyKey: string;\n}\n\nexport const updatePaymentRequestSchema: Schema<UpdatePaymentRequest> = object({\n  payment: ['payment', optional(lazy(() => paymentSchema))],\n  idempotencyKey: ['idempotency_key', string()],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/**\n * Defines the response returned by\n * [UpdatePayment]($e/Payments/UpdatePayment).\n */\nexport interface UpdatePaymentResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const updatePaymentResponseSchema: Schema<UpdatePaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    payment: ['payment', optional(lazy(() => paymentSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CancelPaymentByIdempotencyKeyRequest,\n  cancelPaymentByIdempotencyKeyRequestSchema,\n} from '../models/cancelPaymentByIdempotencyKeyRequest';\nimport {\n  CancelPaymentByIdempotencyKeyResponse,\n  cancelPaymentByIdempotencyKeyResponseSchema,\n} from '../models/cancelPaymentByIdempotencyKeyResponse';\nimport {\n  CancelPaymentResponse,\n  cancelPaymentResponseSchema,\n} from '../models/cancelPaymentResponse';\nimport {\n  CompletePaymentRequest,\n  completePaymentRequestSchema,\n} from '../models/completePaymentRequest';\nimport {\n  CompletePaymentResponse,\n  completePaymentResponseSchema,\n} from '../models/completePaymentResponse';\nimport {\n  CreatePaymentRequest,\n  createPaymentRequestSchema,\n} from '../models/createPaymentRequest';\nimport {\n  CreatePaymentResponse,\n  createPaymentResponseSchema,\n} from '../models/createPaymentResponse';\nimport {\n  GetPaymentResponse,\n  getPaymentResponseSchema,\n} from '../models/getPaymentResponse';\nimport {\n  ListPaymentsResponse,\n  listPaymentsResponseSchema,\n} from '../models/listPaymentsResponse';\nimport {\n  UpdatePaymentRequest,\n  updatePaymentRequestSchema,\n} from '../models/updatePaymentRequest';\nimport {\n  UpdatePaymentResponse,\n  updatePaymentResponseSchema,\n} from '../models/updatePaymentResponse';\nimport { bigint, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class PaymentsApi extends BaseApi {\n  /**\n   * Retrieves a list of payments taken by the account making the request.\n   *\n   * Results are eventually consistent, and new payments or changes to payments might take several\n   * seconds to appear.\n   *\n   * The maximum results per page is 100.\n   *\n   * @param beginTime   The timestamp for the beginning of the reporting period, in RFC 3339 format.\n   *                              Inclusive. Default: The current time minus one year.\n   * @param endTime     The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The\n   *                              current time.\n   * @param sortOrder   The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest\n   *                              to oldest (default).\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                              cursor to retrieve the next set of results for the original query.  For more\n   *                              information, see [Pagination](https://developer.squareup.\n   *                              com/docs/basics/api101/pagination).\n   * @param locationId  Limit results to the location supplied. By default, results are returned for the\n   *                              default (main) location associated with the seller.\n   * @param total       The exact amount in the `total_money` for a payment.\n   * @param last4       The last four digits of a payment card.\n   * @param cardBrand   The brand of the payment card (for example, VISA).\n   * @param limit       The maximum number of results to be returned in a single page. It is possible to\n   *                              receive fewer results than the specified limit on a given page.  The default value of\n   *                              100 is also the maximum allowed value. If the provided value is  greater than 100, it\n   *                              is ignored and the default value is used instead.  Default: `100`\n   * @return Response from the API call\n   */\n  async listPayments(\n    beginTime?: string,\n    endTime?: string,\n    sortOrder?: string,\n    cursor?: string,\n    locationId?: string,\n    total?: bigint,\n    last4?: string,\n    cardBrand?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListPaymentsResponse>> {\n    const req = this.createRequest('GET', '/v2/payments');\n    const mapped = req.prepareArgs({\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n      locationId: [locationId, optional(string())],\n      total: [total, optional(bigint())],\n      last4: [last4, optional(string())],\n      cardBrand: [cardBrand, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.query('location_id', mapped.locationId);\n    req.query('total', mapped.total);\n    req.query('last_4', mapped.last4);\n    req.query('card_brand', mapped.cardBrand);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listPaymentsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a payment using the provided source. You can use this endpoint\n   * to charge a card (credit/debit card or\n   * Square gift card) or record a payment that the seller received outside of Square\n   * (cash payment from a buyer or a payment that an external entity\n   * processed on behalf of the seller).\n   *\n   * The endpoint creates a\n   * `Payment` object and returns it in the response.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createPayment(\n    body: CreatePaymentRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreatePaymentResponse>> {\n    const req = this.createRequest('POST', '/v2/payments');\n    const mapped = req.prepareArgs({\n      body: [body, createPaymentRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createPaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels (voids) a payment identified by the idempotency key that is specified in the\n   * request.\n   *\n   * Use this method when the status of a `CreatePayment` request is unknown (for example, after you send\n   * a\n   * `CreatePayment` request, a network error occurs and you do not get a response). In this case, you\n   * can\n   * direct Square to cancel the payment using this endpoint. In the request, you provide the same\n   * idempotency key that you provided in your `CreatePayment` request that you want to cancel. After\n   * canceling the payment, you can submit your `CreatePayment` request again.\n   *\n   * Note that if no payment with the specified idempotency key is found, no action is taken and the\n   * endpoint\n   * returns successfully.\n   *\n   * @param body         An object containing the fields to POST for\n   *                                                                    the request.  See the corresponding object\n   *                                                                    definition for field details.\n   * @return Response from the API call\n   */\n  async cancelPaymentByIdempotencyKey(\n    body: CancelPaymentByIdempotencyKeyRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelPaymentByIdempotencyKeyResponse>> {\n    const req = this.createRequest('POST', '/v2/payments/cancel');\n    const mapped = req.prepareArgs({\n      body: [body, cancelPaymentByIdempotencyKeyRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      cancelPaymentByIdempotencyKeyResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves details for a specific payment.\n   *\n   * @param paymentId  A unique ID for the desired payment.\n   * @return Response from the API call\n   */\n  async getPayment(\n    paymentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetPaymentResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ paymentId: [paymentId, string()] });\n    req.appendTemplatePath`/v2/payments/${mapped.paymentId}`;\n    return req.callAsJson(getPaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a payment with the APPROVED status.\n   * You can update the `amount_money` and `tip_money` using this endpoint.\n   *\n   * @param paymentId    The ID of the payment to update.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updatePayment(\n    paymentId: string,\n    body: UpdatePaymentRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdatePaymentResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      paymentId: [paymentId, string()],\n      body: [body, updatePaymentRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/payments/${mapped.paymentId}`;\n    return req.callAsJson(updatePaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels (voids) a payment. You can use this endpoint to cancel a payment with\n   * the APPROVED `status`.\n   *\n   * @param paymentId  The ID of the payment to cancel.\n   * @return Response from the API call\n   */\n  async cancelPayment(\n    paymentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelPaymentResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ paymentId: [paymentId, string()] });\n    req.appendTemplatePath`/v2/payments/${mapped.paymentId}/cancel`;\n    return req.callAsJson(cancelPaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Completes (captures) a payment.\n   * By default, payments are set to complete immediately after they are created.\n   *\n   * You can use this endpoint to complete a payment with the APPROVED `status`.\n   *\n   * @param paymentId    The unique ID identifying the payment to be completed.\n   * @param body         An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async completePayment(\n    paymentId: string,\n    body: CompletePaymentRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CompletePaymentResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      paymentId: [paymentId, string()],\n      body: [body, completePaymentRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/payments/${mapped.paymentId}/complete`;\n    return req.callAsJson(completePaymentResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** Information about the destination against which the payout was made. */\nexport interface Destination {\n  /** List of possible destinations against which a payout can be made. */\n  type?: string;\n  /** Square issued unique ID (also known as the instrument ID) associated with this destination. */\n  id?: string;\n}\n\nexport const destinationSchema: Schema<Destination> = object({\n  type: ['type', optional(string())],\n  id: ['id', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents a payout fee that can incur as part of a payout. */\nexport interface PayoutFee {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /** The timestamp of when the fee takes effect, in RFC 3339 format. */\n  effectiveAt?: string;\n  /** Represents the type of payout fee that can incur as part of a payout. */\n  type?: string;\n}\n\nexport const payoutFeeSchema: Schema<PayoutFee> = object({\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  effectiveAt: ['effective_at', optional(string())],\n  type: ['type', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Destination, destinationSchema } from './destination';\nimport { Money, moneySchema } from './money';\nimport { PayoutFee, payoutFeeSchema } from './payoutFee';\n\n/**\n * An accounting of the amount owed the seller and record of the actual transfer to their\n * external bank account or to the Square balance.\n */\nexport interface Payout {\n  /** A unique ID for the payout. */\n  id: string;\n  /** Payout status types */\n  status?: string;\n  /** The ID of the location associated with the payout. */\n  locationId: string;\n  /** The timestamp of when the payout was created and submitted for deposit to the seller's banking destination, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp of when the payout was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /** Information about the destination against which the payout was made. */\n  destination?: Destination;\n  /**\n   * The version number, which is incremented each time an update is made to this payout record.\n   * The version number helps developers receive event notifications or feeds out of order.\n   */\n  version?: number;\n  /**\n   * The type of payout: “BATCH” or “SIMPLE”.\n   * BATCH payouts include a list of payout entries that can be considered settled.\n   * SIMPLE payouts do not have any payout entries associated with them\n   * and will show up as one of the payout entries in a future BATCH payout.\n   */\n  type?: string;\n  /** A list of processing fees and any taxes on the fees assessed by Square for this payout. */\n  payoutFee?: PayoutFee[];\n  /** The calendar date, in ISO 8601 format (YYYY-MM-DD), when the payout is due to arrive in the seller’s banking destination. */\n  arrivalDate?: string;\n}\n\nexport const payoutSchema: Schema<Payout> = object({\n  id: ['id', string()],\n  status: ['status', optional(string())],\n  locationId: ['location_id', string()],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  destination: ['destination', optional(lazy(() => destinationSchema))],\n  version: ['version', optional(number())],\n  type: ['type', optional(string())],\n  payoutFee: ['payout_fee', optional(array(lazy(() => payoutFeeSchema)))],\n  arrivalDate: ['arrival_date', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payout, payoutSchema } from './payout';\n\nexport interface GetPayoutResponse {\n  /**\n   * An accounting of the amount owed the seller and record of the actual transfer to their\n   * external bank account or to the Square balance.\n   */\n  payout?: Payout;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const getPayoutResponseSchema: Schema<GetPayoutResponse> = object({\n  payout: ['payout', optional(lazy(() => payoutSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityAutomaticSavingsDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n  /** The ID of the payout associated with this activity. */\n  payoutId?: string;\n}\n\nexport const paymentBalanceActivityAutomaticSavingsDetailSchema: Schema<PaymentBalanceActivityAutomaticSavingsDetail> = object(\n  {\n    paymentId: ['payment_id', optional(string())],\n    payoutId: ['payout_id', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityAutomaticSavingsReversedDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n  /** The ID of the payout associated with this activity. */\n  payoutId?: string;\n}\n\nexport const paymentBalanceActivityAutomaticSavingsReversedDetailSchema: Schema<PaymentBalanceActivityAutomaticSavingsReversedDetail> = object(\n  {\n    paymentId: ['payment_id', optional(string())],\n    payoutId: ['payout_id', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** DESCRIPTION OF PaymentBalanceActivityChargeDetail */\nexport interface PaymentBalanceActivityChargeDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityChargeDetailSchema: Schema<PaymentBalanceActivityChargeDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityDepositFeeDetail {\n  /** The ID of the payout that triggered this deposit fee activity. */\n  payoutId?: string;\n}\n\nexport const paymentBalanceActivityDepositFeeDetailSchema: Schema<PaymentBalanceActivityDepositFeeDetail> = object(\n  { payoutId: ['payout_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityDisputeDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n  /** The ID of the dispute associated with this activity. */\n  disputeId?: string;\n}\n\nexport const paymentBalanceActivityDisputeDetailSchema: Schema<PaymentBalanceActivityDisputeDetail> = object(\n  {\n    paymentId: ['payment_id', optional(string())],\n    disputeId: ['dispute_id', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityFeeDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityFeeDetailSchema: Schema<PaymentBalanceActivityFeeDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityFreeProcessingDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityFreeProcessingDetailSchema: Schema<PaymentBalanceActivityFreeProcessingDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityHoldAdjustmentDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityHoldAdjustmentDetailSchema: Schema<PaymentBalanceActivityHoldAdjustmentDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityOpenDisputeDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n  /** The ID of the dispute associated with this activity. */\n  disputeId?: string;\n}\n\nexport const paymentBalanceActivityOpenDisputeDetailSchema: Schema<PaymentBalanceActivityOpenDisputeDetail> = object(\n  {\n    paymentId: ['payment_id', optional(string())],\n    disputeId: ['dispute_id', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityOtherAdjustmentDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityOtherAdjustmentDetailSchema: Schema<PaymentBalanceActivityOtherAdjustmentDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityOtherDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityOtherDetailSchema: Schema<PaymentBalanceActivityOtherDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityRefundDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n  /** The ID of the refund associated with this activity. */\n  refundId?: string;\n}\n\nexport const paymentBalanceActivityRefundDetailSchema: Schema<PaymentBalanceActivityRefundDetail> = object(\n  {\n    paymentId: ['payment_id', optional(string())],\n    refundId: ['refund_id', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityReleaseAdjustmentDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityReleaseAdjustmentDetailSchema: Schema<PaymentBalanceActivityReleaseAdjustmentDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityReserveHoldDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityReserveHoldDetailSchema: Schema<PaymentBalanceActivityReserveHoldDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityReserveReleaseDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityReserveReleaseDetailSchema: Schema<PaymentBalanceActivityReserveReleaseDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivitySquareCapitalPaymentDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivitySquareCapitalPaymentDetailSchema: Schema<PaymentBalanceActivitySquareCapitalPaymentDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivitySquareCapitalReversedPaymentDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivitySquareCapitalReversedPaymentDetailSchema: Schema<PaymentBalanceActivitySquareCapitalReversedPaymentDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityTaxOnFeeDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityTaxOnFeeDetailSchema: Schema<PaymentBalanceActivityTaxOnFeeDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityThirdPartyFeeDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityThirdPartyFeeDetailSchema: Schema<PaymentBalanceActivityThirdPartyFeeDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface PaymentBalanceActivityThirdPartyFeeRefundDetail {\n  /** The ID of the payment associated with this activity. */\n  paymentId?: string;\n}\n\nexport const paymentBalanceActivityThirdPartyFeeRefundDetailSchema: Schema<PaymentBalanceActivityThirdPartyFeeRefundDetail> = object(\n  { paymentId: ['payment_id', optional(string())] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  PaymentBalanceActivityAutomaticSavingsDetail,\n  paymentBalanceActivityAutomaticSavingsDetailSchema,\n} from './paymentBalanceActivityAutomaticSavingsDetail';\nimport {\n  PaymentBalanceActivityAutomaticSavingsReversedDetail,\n  paymentBalanceActivityAutomaticSavingsReversedDetailSchema,\n} from './paymentBalanceActivityAutomaticSavingsReversedDetail';\nimport {\n  PaymentBalanceActivityChargeDetail,\n  paymentBalanceActivityChargeDetailSchema,\n} from './paymentBalanceActivityChargeDetail';\nimport {\n  PaymentBalanceActivityDepositFeeDetail,\n  paymentBalanceActivityDepositFeeDetailSchema,\n} from './paymentBalanceActivityDepositFeeDetail';\nimport {\n  PaymentBalanceActivityDisputeDetail,\n  paymentBalanceActivityDisputeDetailSchema,\n} from './paymentBalanceActivityDisputeDetail';\nimport {\n  PaymentBalanceActivityFeeDetail,\n  paymentBalanceActivityFeeDetailSchema,\n} from './paymentBalanceActivityFeeDetail';\nimport {\n  PaymentBalanceActivityFreeProcessingDetail,\n  paymentBalanceActivityFreeProcessingDetailSchema,\n} from './paymentBalanceActivityFreeProcessingDetail';\nimport {\n  PaymentBalanceActivityHoldAdjustmentDetail,\n  paymentBalanceActivityHoldAdjustmentDetailSchema,\n} from './paymentBalanceActivityHoldAdjustmentDetail';\nimport {\n  PaymentBalanceActivityOpenDisputeDetail,\n  paymentBalanceActivityOpenDisputeDetailSchema,\n} from './paymentBalanceActivityOpenDisputeDetail';\nimport {\n  PaymentBalanceActivityOtherAdjustmentDetail,\n  paymentBalanceActivityOtherAdjustmentDetailSchema,\n} from './paymentBalanceActivityOtherAdjustmentDetail';\nimport {\n  PaymentBalanceActivityOtherDetail,\n  paymentBalanceActivityOtherDetailSchema,\n} from './paymentBalanceActivityOtherDetail';\nimport {\n  PaymentBalanceActivityRefundDetail,\n  paymentBalanceActivityRefundDetailSchema,\n} from './paymentBalanceActivityRefundDetail';\nimport {\n  PaymentBalanceActivityReleaseAdjustmentDetail,\n  paymentBalanceActivityReleaseAdjustmentDetailSchema,\n} from './paymentBalanceActivityReleaseAdjustmentDetail';\nimport {\n  PaymentBalanceActivityReserveHoldDetail,\n  paymentBalanceActivityReserveHoldDetailSchema,\n} from './paymentBalanceActivityReserveHoldDetail';\nimport {\n  PaymentBalanceActivityReserveReleaseDetail,\n  paymentBalanceActivityReserveReleaseDetailSchema,\n} from './paymentBalanceActivityReserveReleaseDetail';\nimport {\n  PaymentBalanceActivitySquareCapitalPaymentDetail,\n  paymentBalanceActivitySquareCapitalPaymentDetailSchema,\n} from './paymentBalanceActivitySquareCapitalPaymentDetail';\nimport {\n  PaymentBalanceActivitySquareCapitalReversedPaymentDetail,\n  paymentBalanceActivitySquareCapitalReversedPaymentDetailSchema,\n} from './paymentBalanceActivitySquareCapitalReversedPaymentDetail';\nimport {\n  PaymentBalanceActivityTaxOnFeeDetail,\n  paymentBalanceActivityTaxOnFeeDetailSchema,\n} from './paymentBalanceActivityTaxOnFeeDetail';\nimport {\n  PaymentBalanceActivityThirdPartyFeeDetail,\n  paymentBalanceActivityThirdPartyFeeDetailSchema,\n} from './paymentBalanceActivityThirdPartyFeeDetail';\nimport {\n  PaymentBalanceActivityThirdPartyFeeRefundDetail,\n  paymentBalanceActivityThirdPartyFeeRefundDetailSchema,\n} from './paymentBalanceActivityThirdPartyFeeRefundDetail';\n\n/**\n * One or more PayoutEntries that make up a Payout. Each one has a date, amount, and type of activity.\n * The total amount of the payout will equal the sum of the payout entries for a batch payout\n */\nexport interface PayoutEntry {\n  /** A unique ID for the payout entry. */\n  id: string;\n  /** The ID of the payout entries’ associated payout. */\n  payoutId: string;\n  /** The timestamp of when the payout entry affected the balance, in RFC 3339 format. */\n  effectiveAt?: string;\n  type?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  grossAmountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  feeAmountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  netAmountMoney?: Money;\n  typeAutomaticSavingsDetails?: PaymentBalanceActivityAutomaticSavingsDetail;\n  typeAutomaticSavingsReversedDetails?: PaymentBalanceActivityAutomaticSavingsReversedDetail;\n  /** DESCRIPTION OF PaymentBalanceActivityChargeDetail */\n  typeChargeDetails?: PaymentBalanceActivityChargeDetail;\n  typeDepositFeeDetails?: PaymentBalanceActivityDepositFeeDetail;\n  typeDisputeDetails?: PaymentBalanceActivityDisputeDetail;\n  typeFeeDetails?: PaymentBalanceActivityFeeDetail;\n  typeFreeProcessingDetails?: PaymentBalanceActivityFreeProcessingDetail;\n  typeHoldAdjustmentDetails?: PaymentBalanceActivityHoldAdjustmentDetail;\n  typeOpenDisputeDetails?: PaymentBalanceActivityOpenDisputeDetail;\n  typeOtherDetails?: PaymentBalanceActivityOtherDetail;\n  typeOtherAdjustmentDetails?: PaymentBalanceActivityOtherAdjustmentDetail;\n  typeRefundDetails?: PaymentBalanceActivityRefundDetail;\n  typeReleaseAdjustmentDetails?: PaymentBalanceActivityReleaseAdjustmentDetail;\n  typeReserveHoldDetails?: PaymentBalanceActivityReserveHoldDetail;\n  typeReserveReleaseDetails?: PaymentBalanceActivityReserveReleaseDetail;\n  typeSquareCapitalPaymentDetails?: PaymentBalanceActivitySquareCapitalPaymentDetail;\n  typeSquareCapitalReversedPaymentDetails?: PaymentBalanceActivitySquareCapitalReversedPaymentDetail;\n  typeTaxOnFeeDetails?: PaymentBalanceActivityTaxOnFeeDetail;\n  typeThirdPartyFeeDetails?: PaymentBalanceActivityThirdPartyFeeDetail;\n  typeThirdPartyFeeRefundDetails?: PaymentBalanceActivityThirdPartyFeeRefundDetail;\n}\n\nexport const payoutEntrySchema: Schema<PayoutEntry> = object({\n  id: ['id', string()],\n  payoutId: ['payout_id', string()],\n  effectiveAt: ['effective_at', optional(string())],\n  type: ['type', optional(string())],\n  grossAmountMoney: ['gross_amount_money', optional(lazy(() => moneySchema))],\n  feeAmountMoney: ['fee_amount_money', optional(lazy(() => moneySchema))],\n  netAmountMoney: ['net_amount_money', optional(lazy(() => moneySchema))],\n  typeAutomaticSavingsDetails: [\n    'type_automatic_savings_details',\n    optional(lazy(() => paymentBalanceActivityAutomaticSavingsDetailSchema)),\n  ],\n  typeAutomaticSavingsReversedDetails: [\n    'type_automatic_savings_reversed_details',\n    optional(\n      lazy(() => paymentBalanceActivityAutomaticSavingsReversedDetailSchema)\n    ),\n  ],\n  typeChargeDetails: [\n    'type_charge_details',\n    optional(lazy(() => paymentBalanceActivityChargeDetailSchema)),\n  ],\n  typeDepositFeeDetails: [\n    'type_deposit_fee_details',\n    optional(lazy(() => paymentBalanceActivityDepositFeeDetailSchema)),\n  ],\n  typeDisputeDetails: [\n    'type_dispute_details',\n    optional(lazy(() => paymentBalanceActivityDisputeDetailSchema)),\n  ],\n  typeFeeDetails: [\n    'type_fee_details',\n    optional(lazy(() => paymentBalanceActivityFeeDetailSchema)),\n  ],\n  typeFreeProcessingDetails: [\n    'type_free_processing_details',\n    optional(lazy(() => paymentBalanceActivityFreeProcessingDetailSchema)),\n  ],\n  typeHoldAdjustmentDetails: [\n    'type_hold_adjustment_details',\n    optional(lazy(() => paymentBalanceActivityHoldAdjustmentDetailSchema)),\n  ],\n  typeOpenDisputeDetails: [\n    'type_open_dispute_details',\n    optional(lazy(() => paymentBalanceActivityOpenDisputeDetailSchema)),\n  ],\n  typeOtherDetails: [\n    'type_other_details',\n    optional(lazy(() => paymentBalanceActivityOtherDetailSchema)),\n  ],\n  typeOtherAdjustmentDetails: [\n    'type_other_adjustment_details',\n    optional(lazy(() => paymentBalanceActivityOtherAdjustmentDetailSchema)),\n  ],\n  typeRefundDetails: [\n    'type_refund_details',\n    optional(lazy(() => paymentBalanceActivityRefundDetailSchema)),\n  ],\n  typeReleaseAdjustmentDetails: [\n    'type_release_adjustment_details',\n    optional(lazy(() => paymentBalanceActivityReleaseAdjustmentDetailSchema)),\n  ],\n  typeReserveHoldDetails: [\n    'type_reserve_hold_details',\n    optional(lazy(() => paymentBalanceActivityReserveHoldDetailSchema)),\n  ],\n  typeReserveReleaseDetails: [\n    'type_reserve_release_details',\n    optional(lazy(() => paymentBalanceActivityReserveReleaseDetailSchema)),\n  ],\n  typeSquareCapitalPaymentDetails: [\n    'type_square_capital_payment_details',\n    optional(\n      lazy(() => paymentBalanceActivitySquareCapitalPaymentDetailSchema)\n    ),\n  ],\n  typeSquareCapitalReversedPaymentDetails: [\n    'type_square_capital_reversed_payment_details',\n    optional(\n      lazy(() => paymentBalanceActivitySquareCapitalReversedPaymentDetailSchema)\n    ),\n  ],\n  typeTaxOnFeeDetails: [\n    'type_tax_on_fee_details',\n    optional(lazy(() => paymentBalanceActivityTaxOnFeeDetailSchema)),\n  ],\n  typeThirdPartyFeeDetails: [\n    'type_third_party_fee_details',\n    optional(lazy(() => paymentBalanceActivityThirdPartyFeeDetailSchema)),\n  ],\n  typeThirdPartyFeeRefundDetails: [\n    'type_third_party_fee_refund_details',\n    optional(lazy(() => paymentBalanceActivityThirdPartyFeeRefundDetailSchema)),\n  ],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { PayoutEntry, payoutEntrySchema } from './payoutEntry';\n\n/** The response to retrieve payout records entries. */\nexport interface ListPayoutEntriesResponse {\n  /** The requested list of payout entries, ordered with the given or default sort order. */\n  payoutEntries?: PayoutEntry[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty, this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const listPayoutEntriesResponseSchema: Schema<ListPayoutEntriesResponse> = object(\n  {\n    payoutEntries: [\n      'payout_entries',\n      optional(array(lazy(() => payoutEntrySchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payout, payoutSchema } from './payout';\n\n/** The response to retrieve payout records entries. */\nexport interface ListPayoutsResponse {\n  /** The requested list of payouts. */\n  payouts?: Payout[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty, this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const listPayoutsResponseSchema: Schema<ListPayoutsResponse> = object({\n  payouts: ['payouts', optional(array(lazy(() => payoutSchema)))],\n  cursor: ['cursor', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  GetPayoutResponse,\n  getPayoutResponseSchema,\n} from '../models/getPayoutResponse';\nimport {\n  ListPayoutEntriesResponse,\n  listPayoutEntriesResponseSchema,\n} from '../models/listPayoutEntriesResponse';\nimport {\n  ListPayoutsResponse,\n  listPayoutsResponseSchema,\n} from '../models/listPayoutsResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class PayoutsApi extends BaseApi {\n  /**\n   * Retrieves a list of all payouts for the default location.\n   * You can filter payouts by location ID, status, time range, and order them in ascending or descending\n   * order.\n   * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.\n   *\n   * @param locationId  The ID of the location for which to list the payouts.  By default, payouts are\n   *                              returned for the default (main) location associated with the seller.\n   * @param status      If provided, only payouts with the given status are returned.\n   * @param beginTime   The timestamp for the beginning of the payout creation time, in RFC 3339 format.\n   *                              Inclusive. Default: The current time minus one year.\n   * @param endTime     The timestamp for the end of the payout creation time, in RFC 3339 format. Default:\n   *                              The current time.\n   * @param sortOrder   The order in which payouts are listed.\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                              cursor to retrieve the next set of results for the original query. For more\n   *                              information, see [Pagination](https://developer.squareup.\n   *                              com/docs/basics/api101/pagination). If request parameters change between requests,\n   *                              subsequent results may contain duplicates or missing records.\n   * @param limit       The maximum number of results to be returned in a single page. It is possible to\n   *                              receive fewer results than the specified limit on a given page. The default value of\n   *                              100 is also the maximum allowed value. If the provided value is greater than 100, it\n   *                              is ignored and the default value is used instead. Default: `100`\n   * @return Response from the API call\n   */\n  async listPayouts(\n    locationId?: string,\n    status?: string,\n    beginTime?: string,\n    endTime?: string,\n    sortOrder?: string,\n    cursor?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListPayoutsResponse>> {\n    const req = this.createRequest('GET', '/v2/payouts');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, optional(string())],\n      status: [status, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('status', mapped.status);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listPayoutsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves details of a specific payout identified by a payout ID.\n   * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.\n   *\n   * @param payoutId  The ID of the payout to retrieve the information for.\n   * @return Response from the API call\n   */\n  async getPayout(\n    payoutId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetPayoutResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ payoutId: [payoutId, string()] });\n    req.appendTemplatePath`/v2/payouts/${mapped.payoutId}`;\n    return req.callAsJson(getPayoutResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a list of all payout entries for a specific payout.\n   * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.\n   *\n   * @param payoutId   The ID of the payout to retrieve the information for.\n   * @param sortOrder  The order in which payout entries are listed.\n   * @param cursor     A pagination cursor returned by a previous call to this endpoint. Provide this cursor\n   *                             to retrieve the next set of results for the original query. For more information, see\n   *                             [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). If request\n   *                             parameters change between requests, subsequent results may contain duplicates or\n   *                             missing records.\n   * @param limit      The maximum number of results to be returned in a single page. It is possible to\n   *                             receive fewer results than the specified limit on a given page. The default value of\n   *                             100 is also the maximum allowed value. If the provided value is greater than 100, it\n   *                             is ignored and the default value is used instead. Default: `100`\n   * @return Response from the API call\n   */\n  async listPayoutEntries(\n    payoutId: string,\n    sortOrder?: string,\n    cursor?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListPayoutEntriesResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      payoutId: [payoutId, string()],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    req.appendTemplatePath`/v2/payouts/${mapped.payoutId}/payout-entries`;\n    return req.callAsJson(listPayoutEntriesResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\nimport { ProcessingFee, processingFeeSchema } from './processingFee';\n\n/**\n * Represents a refund of a payment made using Square. Contains information about\n * the original payment and the amount of money refunded.\n */\nexport interface PaymentRefund {\n  /** The unique ID for this refund, generated by Square. */\n  id: string;\n  /**\n   * The refund's status:\n   * - `PENDING` - Awaiting approval.\n   * - `COMPLETED` - Successfully completed.\n   * - `REJECTED` - The refund was rejected.\n   * - `FAILED` - An error occurred.\n   */\n  status?: string;\n  /** The location ID associated with the payment this refund is attached to. */\n  locationId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appFeeMoney?: Money;\n  /** Processing fees and fee adjustments assessed by Square for this refund. */\n  processingFee?: ProcessingFee[];\n  /** The ID of the payment associated with this refund. */\n  paymentId?: string;\n  /** The ID of the order associated with the refund. */\n  orderId?: string;\n  /** The reason for the refund. */\n  reason?: string;\n  /** The timestamp of when the refund was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp of when the refund was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /** An optional ID of the team member associated with taking the payment. */\n  teamMemberId?: string;\n}\n\nexport const paymentRefundSchema: Schema<PaymentRefund> = object({\n  id: ['id', string()],\n  status: ['status', optional(string())],\n  locationId: ['location_id', optional(string())],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],\n  processingFee: [\n    'processing_fee',\n    optional(array(lazy(() => processingFeeSchema))),\n  ],\n  paymentId: ['payment_id', optional(string())],\n  orderId: ['order_id', optional(string())],\n  reason: ['reason', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { PaymentRefund, paymentRefundSchema } from './paymentRefund';\n\n/**\n * Defines the response returned by [GetRefund]($e/Refunds/GetPaymentRefund).\n * Note: If there are errors processing the request, the refund field might not be\n * present or it might be present in a FAILED state.\n */\nexport interface GetPaymentRefundResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a refund of a payment made using Square. Contains information about\n   * the original payment and the amount of money refunded.\n   */\n  refund?: PaymentRefund;\n}\n\nexport const getPaymentRefundResponseSchema: Schema<GetPaymentRefundResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => paymentRefundSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { PaymentRefund, paymentRefundSchema } from './paymentRefund';\n\n/**\n * Defines the response returned by [ListPaymentRefunds]($e/Refunds/ListPaymentRefunds).\n * Either `errors` or `refunds` is present in a given response (never both).\n */\nexport interface ListPaymentRefundsResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The list of requested refunds. */\n  refunds?: PaymentRefund[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listPaymentRefundsResponseSchema: Schema<ListPaymentRefundsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refunds: ['refunds', optional(array(lazy(() => paymentRefundSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Describes a request to refund a payment using [RefundPayment]($e/Refunds/RefundPayment). */\nexport interface RefundPaymentRequest {\n  /**\n   * A unique string that identifies this `RefundPayment` request. The key can be any valid string\n   * but must be unique for every `RefundPayment` request.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appFeeMoney?: Money;\n  /** The unique ID of the payment being refunded. Must be provided and non-empty. */\n  paymentId?: string;\n  /** A description of the reason for the refund. */\n  reason?: string;\n  /**\n   * Used for optimistic concurrency. This opaque token identifies the current `Payment`\n   * version that the caller expects. If the server has a different version of the Payment,\n   * the update fails and a response with a VERSION_MISMATCH error is returned.\n   * If the versions match, or the field is not provided, the refund proceeds as normal.\n   */\n  paymentVersionToken?: string;\n  /** An optional [TeamMember]($m/TeamMember) ID to associate with this refund. */\n  teamMemberId?: string;\n}\n\nexport const refundPaymentRequestSchema: Schema<RefundPaymentRequest> = object({\n  idempotencyKey: ['idempotency_key', string()],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],\n  paymentId: ['payment_id', optional(string())],\n  reason: ['reason', optional(string())],\n  paymentVersionToken: ['payment_version_token', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { PaymentRefund, paymentRefundSchema } from './paymentRefund';\n\n/**\n * Defines the response returned by\n * [RefundPayment]($e/Refunds/RefundPayment).\n * If there are errors processing the request, the `refund` field might not be\n * present, or it might be present with a status of `FAILED`.\n */\nexport interface RefundPaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a refund of a payment made using Square. Contains information about\n   * the original payment and the amount of money refunded.\n   */\n  refund?: PaymentRefund;\n}\n\nexport const refundPaymentResponseSchema: Schema<RefundPaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => paymentRefundSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  GetPaymentRefundResponse,\n  getPaymentRefundResponseSchema,\n} from '../models/getPaymentRefundResponse';\nimport {\n  ListPaymentRefundsResponse,\n  listPaymentRefundsResponseSchema,\n} from '../models/listPaymentRefundsResponse';\nimport {\n  RefundPaymentRequest,\n  refundPaymentRequestSchema,\n} from '../models/refundPaymentRequest';\nimport {\n  RefundPaymentResponse,\n  refundPaymentResponseSchema,\n} from '../models/refundPaymentResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class RefundsApi extends BaseApi {\n  /**\n   * Retrieves a list of refunds for the account making the request.\n   *\n   * Results are eventually consistent, and new refunds or changes to refunds might take several\n   * seconds to appear.\n   *\n   * The maximum results per page is 100.\n   *\n   * @param beginTime   The timestamp for the beginning of the requested reporting period, in RFC 3339\n   *                              format.  Default: The current time minus one year.\n   * @param endTime     The timestamp for the end of the requested reporting period, in RFC 3339 format.\n   *                              Default: The current time.\n   * @param sortOrder   The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest\n   *                              to oldest (default).\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                              cursor to retrieve the next set of results for the original query.  For more\n   *                              information, see [Pagination](https://developer.squareup.\n   *                              com/docs/basics/api101/pagination).\n   * @param locationId  Limit results to the location supplied. By default, results are returned for all\n   *                              locations associated with the seller.\n   * @param status      If provided, only refunds with the given status are returned. For a list of refund\n   *                              status values, see [PaymentRefund]($m/PaymentRefund).  Default: If omitted, refunds\n   *                              are returned regardless of their status.\n   * @param sourceType  If provided, only returns refunds whose payments have the indicated source type.\n   *                              Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, and `EXTERNAL`. For\n   *                              information about these payment source types, see [Take Payments](https://developer.\n   *                              squareup.com/docs/payments-api/take-payments).  Default: If omitted, refunds are\n   *                              returned regardless of the source type.\n   * @param limit       The maximum number of results to be returned in a single page.  It is possible to\n   *                              receive fewer results than the specified limit on a given page.  If the supplied\n   *                              value is greater than 100, no more than 100 results are returned.  Default: 100\n   * @return Response from the API call\n   */\n  async listPaymentRefunds(\n    beginTime?: string,\n    endTime?: string,\n    sortOrder?: string,\n    cursor?: string,\n    locationId?: string,\n    status?: string,\n    sourceType?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListPaymentRefundsResponse>> {\n    const req = this.createRequest('GET', '/v2/refunds');\n    const mapped = req.prepareArgs({\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n      locationId: [locationId, optional(string())],\n      status: [status, optional(string())],\n      sourceType: [sourceType, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.query('location_id', mapped.locationId);\n    req.query('status', mapped.status);\n    req.query('source_type', mapped.sourceType);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listPaymentRefundsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Refunds a payment. You can refund the entire payment amount or a\n   * portion of it. You can use this endpoint to refund a card payment or record a\n   * refund of a cash or external payment. For more information, see\n   * [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async refundPayment(\n    body: RefundPaymentRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RefundPaymentResponse>> {\n    const req = this.createRequest('POST', '/v2/refunds');\n    const mapped = req.prepareArgs({\n      body: [body, refundPaymentRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(refundPaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a specific refund using the `refund_id`.\n   *\n   * @param refundId  The unique ID for the desired `PaymentRefund`.\n   * @return Response from the API call\n   */\n  async getPaymentRefund(\n    refundId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetPaymentRefundResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ refundId: [refundId, string()] });\n    req.appendTemplatePath`/v2/refunds/${mapped.refundId}`;\n    return req.callAsJson(getPaymentRefundResponseSchema, requestOptions);\n  }\n}\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** Represents a Square Online site, which is an online store for a Square seller. */\nexport interface Site {\n  /** The Square-assigned ID of the site. */\n  id?: string;\n  /** The title of the site. */\n  siteTitle?: string;\n  /** The domain of the site (without the protocol). For example, `mysite1.square.site`. */\n  domain?: string;\n  /** Indicates whether the site is published. */\n  isPublished?: boolean;\n  /** The timestamp of when the site was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp of when the site was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const siteSchema: Schema<Site> = object({\n  id: ['id', optional(string())],\n  siteTitle: ['site_title', optional(string())],\n  domain: ['domain', optional(string())],\n  isPublished: ['is_published', optional(boolean())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Site, siteSchema } from './site';\n\n/** Represents a `ListSites` response. The response can include either `sites` or `errors`. */\nexport interface ListSitesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The sites that belong to the seller. */\n  sites?: Site[];\n}\n\nexport const listSitesResponseSchema: Schema<ListSitesResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  sites: ['sites', optional(array(lazy(() => siteSchema)))],\n});\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  ListSitesResponse,\n  listSitesResponseSchema,\n} from '../models/listSitesResponse';\nimport { BaseApi } from './baseApi';\n\nexport class SitesApi extends BaseApi {\n  /**\n   * Lists the Square Online sites that belong to a seller. Sites are listed in descending order by the\n   * `created_at` date.\n   *\n   *\n   * __Note:__ Square Online APIs are publicly available as part of an early access program. For more\n   * information, see [Early access program for Square Online APIs](https://developer.squareup.\n   * com/docs/online-api#early-access-program-for-square-online-apis).\n   *\n   * @return Response from the API call\n   */\n  async listSites(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListSitesResponse>> {\n    const req = this.createRequest('GET', '/v2/sites');\n    return req.callAsJson(listSitesResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/** Represents a `DeleteSnippet` response. */\nexport interface DeleteSnippetResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteSnippetResponseSchema: Schema<DeleteSnippetResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */\nexport interface Snippet {\n  /** The Square-assigned ID for the snippet. */\n  id?: string;\n  /** The ID of the site that contains the snippet. */\n  siteId?: string;\n  /** The snippet code, which can contain valid HTML, JavaScript, or both. */\n  content: string;\n  /** The timestamp of when the snippet was initially added to the site, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp of when the snippet was last updated on the site, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const snippetSchema: Schema<Snippet> = object({\n  id: ['id', optional(string())],\n  siteId: ['site_id', optional(string())],\n  content: ['content', string()],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Snippet, snippetSchema } from './snippet';\n\n/** Represents a `RetrieveSnippet` response. The response can include either `snippet` or `errors`. */\nexport interface RetrieveSnippetResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */\n  snippet?: Snippet;\n}\n\nexport const retrieveSnippetResponseSchema: Schema<RetrieveSnippetResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    snippet: ['snippet', optional(lazy(() => snippetSchema))],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { Snippet, snippetSchema } from './snippet';\n\n/** Represents an `UpsertSnippet` request. */\nexport interface UpsertSnippetRequest {\n  /** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */\n  snippet: Snippet;\n}\n\nexport const upsertSnippetRequestSchema: Schema<UpsertSnippetRequest> = object({\n  snippet: ['snippet', lazy(() => snippetSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Snippet, snippetSchema } from './snippet';\n\n/** Represents an `UpsertSnippet` response. The response can include either `snippet` or `errors`. */\nexport interface UpsertSnippetResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */\n  snippet?: Snippet;\n}\n\nexport const upsertSnippetResponseSchema: Schema<UpsertSnippetResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    snippet: ['snippet', optional(lazy(() => snippetSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  DeleteSnippetResponse,\n  deleteSnippetResponseSchema,\n} from '../models/deleteSnippetResponse';\nimport {\n  RetrieveSnippetResponse,\n  retrieveSnippetResponseSchema,\n} from '../models/retrieveSnippetResponse';\nimport {\n  UpsertSnippetRequest,\n  upsertSnippetRequestSchema,\n} from '../models/upsertSnippetRequest';\nimport {\n  UpsertSnippetResponse,\n  upsertSnippetResponseSchema,\n} from '../models/upsertSnippetResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class SnippetsApi extends BaseApi {\n  /**\n   * Removes your snippet from a Square Online site.\n   *\n   * You can call [ListSites]($e/Sites/ListSites) to get the IDs of the sites that belong to a seller.\n   *\n   *\n   * __Note:__ Square Online APIs are publicly available as part of an early access program. For more\n   * information, see [Early access program for Square Online APIs](https://developer.squareup.\n   * com/docs/online-api#early-access-program-for-square-online-apis).\n   *\n   * @param siteId  The ID of the site that contains the snippet.\n   * @return Response from the API call\n   */\n  async deleteSnippet(\n    siteId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteSnippetResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ siteId: [siteId, string()] });\n    req.appendTemplatePath`/v2/sites/${mapped.siteId}/snippet`;\n    return req.callAsJson(deleteSnippetResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves your snippet from a Square Online site. A site can contain snippets from multiple snippet\n   * applications, but you can retrieve only the snippet that was added by your application.\n   *\n   * You can call [ListSites]($e/Sites/ListSites) to get the IDs of the sites that belong to a seller.\n   *\n   *\n   * __Note:__ Square Online APIs are publicly available as part of an early access program. For more\n   * information, see [Early access program for Square Online APIs](https://developer.squareup.\n   * com/docs/online-api#early-access-program-for-square-online-apis).\n   *\n   * @param siteId  The ID of the site that contains the snippet.\n   * @return Response from the API call\n   */\n  async retrieveSnippet(\n    siteId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveSnippetResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ siteId: [siteId, string()] });\n    req.appendTemplatePath`/v2/sites/${mapped.siteId}/snippet`;\n    return req.callAsJson(retrieveSnippetResponseSchema, requestOptions);\n  }\n\n  /**\n   * Adds a snippet to a Square Online site or updates the existing snippet on the site.\n   * The snippet code is appended to the end of the `head` element on every page of the site, except\n   * checkout pages. A snippet application can add one snippet to a given site.\n   *\n   * You can call [ListSites]($e/Sites/ListSites) to get the IDs of the sites that belong to a seller.\n   *\n   *\n   * __Note:__ Square Online APIs are publicly available as part of an early access program. For more\n   * information, see [Early access program for Square Online APIs](https://developer.squareup.\n   * com/docs/online-api#early-access-program-for-square-online-apis).\n   *\n   * @param siteId       The ID of the site where you want to add or update the snippet.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async upsertSnippet(\n    siteId: string,\n    body: UpsertSnippetRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpsertSnippetResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      siteId: [siteId, string()],\n      body: [body, upsertSnippetRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/sites/${mapped.siteId}/snippet`;\n    return req.callAsJson(upsertSnippetResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents an action as a pending change to a subscription. */\nexport interface SubscriptionAction {\n  /** The ID of an action scoped to a subscription. */\n  id?: string;\n  /** Supported types of an action as a pending change to a subscription. */\n  type?: string;\n  /** The `YYYY-MM-DD`-formatted date when the action occurs on the subscription. */\n  effectiveDate?: string;\n  /** The target subscription plan a subscription switches to, for a `SWAP_PLAN` action. */\n  newPlanId?: string;\n}\n\nexport const subscriptionActionSchema: Schema<SubscriptionAction> = object({\n  id: ['id', optional(string())],\n  type: ['type', optional(string())],\n  effectiveDate: ['effective_date', optional(string())],\n  newPlanId: ['new_plan_id', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** The origination details of the subscription. */\nexport interface SubscriptionSource {\n  /**\n   * The name used to identify the place (physical or digital) that\n   * a subscription originates. If unset, the name defaults to the name\n   * of the application that created the subscription.\n   */\n  name?: string;\n}\n\nexport const subscriptionSourceSchema: Schema<SubscriptionSource> = object({\n  name: ['name', optional(string())],\n});\n","import {\n  array,\n  bigint,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  SubscriptionAction,\n  subscriptionActionSchema,\n} from './subscriptionAction';\nimport {\n  SubscriptionSource,\n  subscriptionSourceSchema,\n} from './subscriptionSource';\n\n/**\n * Represents a subscription to a subscription plan by a subscriber.\n * For an overview of the `Subscription` type, see\n * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n */\nexport interface Subscription {\n  /** The Square-assigned ID of the subscription. */\n  id?: string;\n  /** The ID of the location associated with the subscription. */\n  locationId?: string;\n  /** The ID of the subscribed-to [subscription plan]($m/CatalogSubscriptionPlan). */\n  planId?: string;\n  /** The ID of the subscribing [customer]($m/Customer) profile. */\n  customerId?: string;\n  /** The `YYYY-MM-DD`-formatted date (for example, 2013-01-15) to start the subscription. */\n  startDate?: string;\n  /**\n   * The `YYYY-MM-DD`-formatted date (for example, 2013-01-15) to cancel the subscription,\n   * when the subscription status changes to `CANCELED` and the subscription billing stops.\n   * If this field is not set, the subscription ends according its subscription plan.\n   * This field cannot be updated, other than being cleared.\n   */\n  canceledDate?: string;\n  /**\n   * The `YYYY-MM-DD`-formatted date up to when the subscriber is invoiced for the\n   * subscription.\n   * After the invoice is sent for a given billing period,\n   * this date will be the last day of the billing period.\n   * For example,\n   * suppose for the month of May a subscriber gets an invoice\n   * (or charged the card) on May 1. For the monthly billing scenario,\n   * this date is then set to May 31.\n   */\n  chargedThroughDate?: string;\n  /** Supported subscription statuses. */\n  status?: string;\n  /**\n   * The tax amount applied when billing the subscription. The\n   * percentage is expressed in decimal form, using a `'.'` as the decimal\n   * separator and without a `'%'` sign. For example, a value of `7.5`\n   * corresponds to 7.5%.\n   */\n  taxPercentage?: string;\n  /**\n   * The IDs of the [invoices]($m/Invoice) created for the\n   * subscription, listed in order when the invoices were created\n   * (newest invoices appear first).\n   */\n  invoiceIds?: string[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceOverrideMoney?: Money;\n  /**\n   * The version of the object. When updating an object, the version\n   * supplied must match the version in the database, otherwise the write will\n   * be rejected as conflicting.\n   */\n  version?: bigint;\n  /** The timestamp when the subscription was created, in RFC 3339 format. */\n  createdAt?: string;\n  /**\n   * The ID of the [subscriber's]($m/Customer) [card]($m/Card)\n   * used to charge for the subscription.\n   */\n  cardId?: string;\n  /**\n   * Timezone that will be used in date calculations for the subscription.\n   * Defaults to the timezone of the location based on `location_id`.\n   * Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).\n   */\n  timezone?: string;\n  /** The origination details of the subscription. */\n  source?: SubscriptionSource;\n  /**\n   * The list of scheduled actions on this subscription. It is set only in the response from\n   * [RetrieveSubscription]($e/Subscriptions/RetrieveSubscription) with the query parameter\n   * of `include=actions` or from\n   * [SearchSubscriptions]($e/Subscriptions/SearchSubscriptions) with the input parameter\n   * of `include:[\"actions\"]`.\n   */\n  actions?: SubscriptionAction[];\n}\n\nexport const subscriptionSchema: Schema<Subscription> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  planId: ['plan_id', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  startDate: ['start_date', optional(string())],\n  canceledDate: ['canceled_date', optional(string())],\n  chargedThroughDate: ['charged_through_date', optional(string())],\n  status: ['status', optional(string())],\n  taxPercentage: ['tax_percentage', optional(string())],\n  invoiceIds: ['invoice_ids', optional(array(string()))],\n  priceOverrideMoney: [\n    'price_override_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  version: ['version', optional(bigint())],\n  createdAt: ['created_at', optional(string())],\n  cardId: ['card_id', optional(string())],\n  timezone: ['timezone', optional(string())],\n  source: ['source', optional(lazy(() => subscriptionSourceSchema))],\n  actions: ['actions', optional(array(lazy(() => subscriptionActionSchema)))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\nimport {\n  SubscriptionAction,\n  subscriptionActionSchema,\n} from './subscriptionAction';\n\n/**\n * Defines output parameters in a response from the\n * [CancelSubscription]($e/Subscriptions/CancelSubscription) endpoint.\n */\nexport interface CancelSubscriptionResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n  /** A list of a single `CANCEL` action scheduled for the subscription. */\n  actions?: SubscriptionAction[];\n}\n\nexport const cancelSubscriptionResponseSchema: Schema<CancelSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n    actions: ['actions', optional(array(lazy(() => subscriptionActionSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  SubscriptionSource,\n  subscriptionSourceSchema,\n} from './subscriptionSource';\n\n/**\n * Defines input parameters in a request to the\n * [CreateSubscription]($e/Subscriptions/CreateSubscription) endpoint.\n */\nexport interface CreateSubscriptionRequest {\n  /**\n   * A unique string that identifies this `CreateSubscription` request.\n   * If you do not provide a unique string (or provide an empty string as the value),\n   * the endpoint treats each request as independent.\n   * For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey?: string;\n  /** The ID of the location the subscription is associated with. */\n  locationId: string;\n  /**\n   * The ID of the subscription plan created using the Catalog API.\n   * For more information, see\n   * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and\n   * [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).\n   */\n  planId: string;\n  /** The ID of the [customer]($m/Customer) subscribing to the subscription plan. */\n  customerId: string;\n  /**\n   * The `YYYY-MM-DD`-formatted date to start the subscription.\n   * If it is unspecified, the subscription starts immediately.\n   */\n  startDate?: string;\n  /**\n   * The `YYYY-MM-DD`-formatted date when the newly created subscription is scheduled for cancellation.\n   * This date overrides the cancellation date set in the plan configuration.\n   * If the cancellation date is earlier than the end date of a subscription cycle, the subscription stops\n   * at the canceled date and the subscriber is sent a prorated invoice at the beginning of the canceled cycle.\n   * When the subscription plan of the newly created subscription has a fixed number of cycles and the `canceled_date`\n   * occurs before the subscription plan expires, the specified `canceled_date` sets the date when the subscription\n   * stops through the end of the last cycle.\n   */\n  canceledDate?: string;\n  /**\n   * The tax to add when billing the subscription.\n   * The percentage is expressed in decimal form, using a `'.'` as the decimal\n   * separator and without a `'%'` sign. For example, a value of 7.5\n   * corresponds to 7.5%.\n   */\n  taxPercentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceOverrideMoney?: Money;\n  /**\n   * The ID of the [subscriber's]($m/Customer) [card]($m/Card) to charge.\n   * If it is not specified, the subscriber receives an invoice via email. For an example to\n   * create a customer profile for a subscriber and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).\n   */\n  cardId?: string;\n  /**\n   * The timezone that is used in date calculations for the subscription. If unset, defaults to\n   * the location timezone. If a timezone is not configured for the location, defaults to \"America/New_York\".\n   * Format: the IANA Timezone Database identifier for the location timezone. For\n   * a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n   */\n  timezone?: string;\n  /** The origination details of the subscription. */\n  source?: SubscriptionSource;\n}\n\nexport const createSubscriptionRequestSchema: Schema<CreateSubscriptionRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    locationId: ['location_id', string()],\n    planId: ['plan_id', string()],\n    customerId: ['customer_id', string()],\n    startDate: ['start_date', optional(string())],\n    canceledDate: ['canceled_date', optional(string())],\n    taxPercentage: ['tax_percentage', optional(string())],\n    priceOverrideMoney: [\n      'price_override_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    cardId: ['card_id', optional(string())],\n    timezone: ['timezone', optional(string())],\n    source: ['source', optional(lazy(() => subscriptionSourceSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines output parameters in a response from the\n * [CreateSubscription]($e/Subscriptions/CreateSubscription) endpoint.\n */\nexport interface CreateSubscriptionResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const createSubscriptionResponseSchema: Schema<CreateSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines output parameters in a response of the [DeleteSubscriptionAction]($e/Subscriptions/DeleteSubscriptionAction)\n * endpoint.\n */\nexport interface DeleteSubscriptionActionResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const deleteSubscriptionActionResponseSchema: Schema<DeleteSubscriptionActionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Provides information about the subscription event. */\nexport interface SubscriptionEventInfo {\n  /** A human-readable explanation for the event. */\n  detail?: string;\n  /** Supported info codes of a subscription event. */\n  code?: string;\n}\n\nexport const subscriptionEventInfoSchema: Schema<SubscriptionEventInfo> = object(\n  { detail: ['detail', optional(string())], code: ['code', optional(string())] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  SubscriptionEventInfo,\n  subscriptionEventInfoSchema,\n} from './subscriptionEventInfo';\n\n/** Describes changes to a subscription and the subscription status. */\nexport interface SubscriptionEvent {\n  /** The ID of the subscription event. */\n  id: string;\n  /** Supported types of an event occurred to a subscription. */\n  subscriptionEventType: string;\n  /** The `YYYY-MM-DD`-formatted date (for example, 2013-01-15) when the subscription event occurred. */\n  effectiveDate: string;\n  /** The ID of the subscription plan associated with the subscription. */\n  planId: string;\n  /** Provides information about the subscription event. */\n  info?: SubscriptionEventInfo;\n}\n\nexport const subscriptionEventSchema: Schema<SubscriptionEvent> = object({\n  id: ['id', string()],\n  subscriptionEventType: ['subscription_event_type', string()],\n  effectiveDate: ['effective_date', string()],\n  planId: ['plan_id', string()],\n  info: ['info', optional(lazy(() => subscriptionEventInfoSchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  SubscriptionEvent,\n  subscriptionEventSchema,\n} from './subscriptionEvent';\n\n/**\n * Defines output parameters in a response from the\n * [ListSubscriptionEvents]($e/Subscriptions/ListSubscriptionEvents).\n */\nexport interface ListSubscriptionEventsResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /** The retrieved subscription events. */\n  subscriptionEvents?: SubscriptionEvent[];\n  /**\n   * When the total number of resulting subscription events exceeds the limit of a paged response,\n   * the response includes a cursor for you to use in a subsequent request to fetch the next set of events.\n   * If the cursor is unset, the response contains the last page of the results.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listSubscriptionEventsResponseSchema: Schema<ListSubscriptionEventsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscriptionEvents: [\n      'subscription_events',\n      optional(array(lazy(() => subscriptionEventSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { bigint, object, optional, Schema, string } from '../schema';\n\n/**\n * Defines input parameters in a request to the\n * [PauseSubscription]($e/Subscriptions/PauseSubscription) endpoint.\n */\nexport interface PauseSubscriptionRequest {\n  /**\n   * The `YYYY-MM-DD`-formatted date when the scheduled `PAUSE` action takes place on the subscription.\n   * When this date is unspecified or falls within the current billing cycle, the subscription is paused\n   * on the starting date of the next billing cycle.\n   */\n  pauseEffectiveDate?: string;\n  /**\n   * The number of billing cycles the subscription will be paused before it is reactivated.\n   * When this is set, a `RESUME` action is also scheduled to take place on the subscription at\n   * the end of the specified pause cycle duration. In this case, neither `resume_effective_date`\n   * nor `resume_change_timing` may be specified.\n   */\n  pauseCycleDuration?: bigint;\n  /**\n   * The date when the subscription is reactivated by a scheduled `RESUME` action.\n   * This date must be at least one billing cycle ahead of `pause_effective_date`.\n   */\n  resumeEffectiveDate?: string;\n  /** Supported timings when a pending change, as an action, takes place to a subscription. */\n  resumeChangeTiming?: string;\n  /** The user-provided reason to pause the subscription. */\n  pauseReason?: string;\n}\n\nexport const pauseSubscriptionRequestSchema: Schema<PauseSubscriptionRequest> = object(\n  {\n    pauseEffectiveDate: ['pause_effective_date', optional(string())],\n    pauseCycleDuration: ['pause_cycle_duration', optional(bigint())],\n    resumeEffectiveDate: ['resume_effective_date', optional(string())],\n    resumeChangeTiming: ['resume_change_timing', optional(string())],\n    pauseReason: ['pause_reason', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\nimport {\n  SubscriptionAction,\n  subscriptionActionSchema,\n} from './subscriptionAction';\n\n/**\n * Defines output parameters in a response from the\n * [PauseSubscription]($e/Subscriptions/PauseSubscription) endpoint.\n */\nexport interface PauseSubscriptionResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n  /** The list of a `PAUSE` action and a possible `RESUME` action created by the request. */\n  actions?: SubscriptionAction[];\n}\n\nexport const pauseSubscriptionResponseSchema: Schema<PauseSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n    actions: ['actions', optional(array(lazy(() => subscriptionActionSchema)))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Defines input parameters in a request to the\n * [ResumeSubscription]($e/Subscriptions/ResumeSubscription) endpoint.\n */\nexport interface ResumeSubscriptionRequest {\n  /** The `YYYY-MM-DD`-formatted date when the subscription reactivated. */\n  resumeEffectiveDate?: string;\n  /** Supported timings when a pending change, as an action, takes place to a subscription. */\n  resumeChangeTiming?: string;\n}\n\nexport const resumeSubscriptionRequestSchema: Schema<ResumeSubscriptionRequest> = object(\n  {\n    resumeEffectiveDate: ['resume_effective_date', optional(string())],\n    resumeChangeTiming: ['resume_change_timing', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\nimport {\n  SubscriptionAction,\n  subscriptionActionSchema,\n} from './subscriptionAction';\n\n/**\n * Defines output parameters in a response from the\n * [ResumeSubscription]($e/Subscriptions/ResumeSubscription) endpoint.\n */\nexport interface ResumeSubscriptionResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n  /** A list of `RESUME` actions created by the request and scheduled for the subscription. */\n  actions?: SubscriptionAction[];\n}\n\nexport const resumeSubscriptionResponseSchema: Schema<ResumeSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n    actions: ['actions', optional(array(lazy(() => subscriptionActionSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines output parameters in a response from the\n * [RetrieveSubscription]($e/Subscriptions/RetrieveSubscription) endpoint.\n */\nexport interface RetrieveSubscriptionResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const retrieveSubscriptionResponseSchema: Schema<RetrieveSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a set of query expressions (filters) to narrow the scope of targeted subscriptions returned by\n * the [SearchSubscriptions]($e/Subscriptions/SearchSubscriptions) endpoint.\n */\nexport interface SearchSubscriptionsFilter {\n  /** A filter to select subscriptions based on the subscribing customer IDs. */\n  customerIds?: string[];\n  /** A filter to select subscriptions based on the location. */\n  locationIds?: string[];\n  /** A filter to select subscriptions based on the source application. */\n  sourceNames?: string[];\n}\n\nexport const searchSubscriptionsFilterSchema: Schema<SearchSubscriptionsFilter> = object(\n  {\n    customerIds: ['customer_ids', optional(array(string()))],\n    locationIds: ['location_ids', optional(array(string()))],\n    sourceNames: ['source_names', optional(array(string()))],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  SearchSubscriptionsFilter,\n  searchSubscriptionsFilterSchema,\n} from './searchSubscriptionsFilter';\n\n/** Represents a query, consisting of specified query expressions, used to search for subscriptions. */\nexport interface SearchSubscriptionsQuery {\n  /**\n   * Represents a set of query expressions (filters) to narrow the scope of targeted subscriptions returned by\n   * the [SearchSubscriptions]($e/Subscriptions/SearchSubscriptions) endpoint.\n   */\n  filter?: SearchSubscriptionsFilter;\n}\n\nexport const searchSubscriptionsQuerySchema: Schema<SearchSubscriptionsQuery> = object(\n  { filter: ['filter', optional(lazy(() => searchSubscriptionsFilterSchema))] }\n);\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  SearchSubscriptionsQuery,\n  searchSubscriptionsQuerySchema,\n} from './searchSubscriptionsQuery';\n\n/**\n * Defines input parameters in a request to the\n * [SearchSubscriptions]($e/Subscriptions/SearchSubscriptions) endpoint.\n */\nexport interface SearchSubscriptionsRequest {\n  /**\n   * When the total number of resulting subscriptions exceeds the limit of a paged response,\n   * specify the cursor returned from a preceding response here to fetch the next set of results.\n   * If the cursor is unset, the response contains the last page of the results.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n  /**\n   * The upper limit on the number of subscriptions to return\n   * in a paged response.\n   */\n  limit?: number;\n  /** Represents a query, consisting of specified query expressions, used to search for subscriptions. */\n  query?: SearchSubscriptionsQuery;\n  /**\n   * An option to include related information in the response.\n   * The supported values are:\n   * - `actions`: to include scheduled actions on the targeted subscriptions.\n   */\n  include?: string[];\n}\n\nexport const searchSubscriptionsRequestSchema: Schema<SearchSubscriptionsRequest> = object(\n  {\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n    query: ['query', optional(lazy(() => searchSubscriptionsQuerySchema))],\n    include: ['include', optional(array(string()))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines output parameters in a response from the\n * [SearchSubscriptions]($e/Subscriptions/SearchSubscriptions) endpoint.\n */\nexport interface SearchSubscriptionsResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /** The subscriptions matching the specified query expressions. */\n  subscriptions?: Subscription[];\n  /**\n   * When the total number of resulting subscription exceeds the limit of a paged response,\n   * the response includes a cursor for you to use in a subsequent request to fetch the next set of results.\n   * If the cursor is unset, the response contains the last page of the results.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchSubscriptionsResponseSchema: Schema<SearchSubscriptionsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscriptions: [\n      'subscriptions',\n      optional(array(lazy(() => subscriptionSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/**\n * Defines input parameters in a call to the\n * [SwapPlan]($e/Subscriptions/SwapPlan) endpoint.\n */\nexport interface SwapPlanRequest {\n  /** The ID of the new subscription plan. */\n  newPlanId: string;\n}\n\nexport const swapPlanRequestSchema: Schema<SwapPlanRequest> = object({\n  newPlanId: ['new_plan_id', string()],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\nimport {\n  SubscriptionAction,\n  subscriptionActionSchema,\n} from './subscriptionAction';\n\n/**\n * Defines output parameters in a response of the\n * [SwapPlan]($e/Subscriptions/SwapPlan) endpoint.\n */\nexport interface SwapPlanResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n  /** A list of a `SWAP_PLAN` action created by the request. */\n  actions?: SubscriptionAction[];\n}\n\nexport const swapPlanResponseSchema: Schema<SwapPlanResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  actions: ['actions', optional(array(lazy(() => subscriptionActionSchema)))],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines input parameters in a request to the\n * [UpdateSubscription]($e/Subscriptions/UpdateSubscription) endpoint.\n */\nexport interface UpdateSubscriptionRequest {\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const updateSubscriptionRequestSchema: Schema<UpdateSubscriptionRequest> = object(\n  { subscription: ['subscription', optional(lazy(() => subscriptionSchema))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines output parameters in a response from the\n * [UpdateSubscription]($e/Subscriptions/UpdateSubscription) endpoint.\n */\nexport interface UpdateSubscriptionResponse {\n  /** Errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a subscription to a subscription plan by a subscriber.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const updateSubscriptionResponseSchema: Schema<UpdateSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CancelSubscriptionResponse,\n  cancelSubscriptionResponseSchema,\n} from '../models/cancelSubscriptionResponse';\nimport {\n  CreateSubscriptionRequest,\n  createSubscriptionRequestSchema,\n} from '../models/createSubscriptionRequest';\nimport {\n  CreateSubscriptionResponse,\n  createSubscriptionResponseSchema,\n} from '../models/createSubscriptionResponse';\nimport {\n  DeleteSubscriptionActionResponse,\n  deleteSubscriptionActionResponseSchema,\n} from '../models/deleteSubscriptionActionResponse';\nimport {\n  ListSubscriptionEventsResponse,\n  listSubscriptionEventsResponseSchema,\n} from '../models/listSubscriptionEventsResponse';\nimport {\n  PauseSubscriptionRequest,\n  pauseSubscriptionRequestSchema,\n} from '../models/pauseSubscriptionRequest';\nimport {\n  PauseSubscriptionResponse,\n  pauseSubscriptionResponseSchema,\n} from '../models/pauseSubscriptionResponse';\nimport {\n  ResumeSubscriptionRequest,\n  resumeSubscriptionRequestSchema,\n} from '../models/resumeSubscriptionRequest';\nimport {\n  ResumeSubscriptionResponse,\n  resumeSubscriptionResponseSchema,\n} from '../models/resumeSubscriptionResponse';\nimport {\n  RetrieveSubscriptionResponse,\n  retrieveSubscriptionResponseSchema,\n} from '../models/retrieveSubscriptionResponse';\nimport {\n  SearchSubscriptionsRequest,\n  searchSubscriptionsRequestSchema,\n} from '../models/searchSubscriptionsRequest';\nimport {\n  SearchSubscriptionsResponse,\n  searchSubscriptionsResponseSchema,\n} from '../models/searchSubscriptionsResponse';\nimport {\n  SwapPlanRequest,\n  swapPlanRequestSchema,\n} from '../models/swapPlanRequest';\nimport {\n  SwapPlanResponse,\n  swapPlanResponseSchema,\n} from '../models/swapPlanResponse';\nimport {\n  UpdateSubscriptionRequest,\n  updateSubscriptionRequestSchema,\n} from '../models/updateSubscriptionRequest';\nimport {\n  UpdateSubscriptionResponse,\n  updateSubscriptionResponseSchema,\n} from '../models/updateSubscriptionResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class SubscriptionsApi extends BaseApi {\n  /**\n   * Creates a subscription to a subscription plan by a customer.\n   *\n   * If you provide a card on file in the request, Square charges the card for\n   * the subscription. Otherwise, Square bills an invoice to the customer's email\n   * address. The subscription starts immediately, unless the request includes\n   * the optional `start_date`. Each individual subscription is associated with a particular location.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                         See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createSubscription(\n    body: CreateSubscriptionRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateSubscriptionResponse>> {\n    const req = this.createRequest('POST', '/v2/subscriptions');\n    const mapped = req.prepareArgs({\n      body: [body, createSubscriptionRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for subscriptions.\n   *\n   * Results are ordered chronologically by subscription creation date. If\n   * the request specifies more than one location ID,\n   * the endpoint orders the result\n   * by location ID, and then by creation date within each location. If no locations are given\n   * in the query, all locations are searched.\n   *\n   * You can also optionally specify `customer_ids` to search by customer.\n   * If left unset, all customers\n   * associated with the specified locations are returned.\n   * If the request specifies customer IDs, the endpoint orders results\n   * first by location, within location by customer ID, and within\n   * customer by subscription creation date.\n   *\n   * For more information, see\n   * [Retrieve subscriptions](https://developer.squareup.com/docs/subscriptions-api/overview#retrieve-\n   * subscriptions).\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async searchSubscriptions(\n    body: SearchSubscriptionsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchSubscriptionsResponse>> {\n    const req = this.createRequest('POST', '/v2/subscriptions/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchSubscriptionsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchSubscriptionsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a subscription.\n   *\n   * @param subscriptionId  The ID of the subscription to retrieve.\n   * @param include         A query parameter to specify related information to be included in the response.\n   *                                  The supported query parameter values are:   - `actions`: to include scheduled\n   *                                  actions on the targeted subscription.\n   * @return Response from the API call\n   */\n  async retrieveSubscription(\n    subscriptionId: string,\n    include?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveSubscriptionResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      include: [include, optional(string())],\n    });\n    req.query('include', mapped.include);\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}`;\n    return req.callAsJson(retrieveSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a subscription. You can set, modify, and clear the\n   * `subscription` field values.\n   *\n   * @param subscriptionId  The ID of the subscription to update.\n   * @param body            An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async updateSubscription(\n    subscriptionId: string,\n    body: UpdateSubscriptionRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateSubscriptionResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      body: [body, updateSubscriptionRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}`;\n    return req.callAsJson(updateSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a scheduled action for a subscription.\n   *\n   * @param subscriptionId  The ID of the subscription the targeted action is to act upon.\n   * @param actionId        The ID of the targeted action to be deleted.\n   * @return Response from the API call\n   */\n  async deleteSubscriptionAction(\n    subscriptionId: string,\n    actionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteSubscriptionActionResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      actionId: [actionId, string()],\n    });\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}/actions/${mapped.actionId}`;\n    return req.callAsJson(\n      deleteSubscriptionActionResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Schedules a `CANCEL` action to cancel an active subscription\n   * by setting the `canceled_date` field to the end of the active billing period\n   * and changing the subscription status from ACTIVE to CANCELED after this date.\n   *\n   * @param subscriptionId  The ID of the subscription to cancel.\n   * @return Response from the API call\n   */\n  async cancelSubscription(\n    subscriptionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelSubscriptionResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n    });\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}/cancel`;\n    return req.callAsJson(cancelSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Lists all events for a specific subscription.\n   *\n   * @param subscriptionId  The ID of the subscription to retrieve the events for.\n   * @param cursor          When the total number of resulting subscription events exceeds the limit of a\n   *                                  paged response,  specify the cursor returned from a preceding response here to\n   *                                  fetch the next set of results. If the cursor is unset, the response contains the\n   *                                  last page of the results.  For more information, see [Pagination](https:\n   *                                  //developer.squareup.com/docs/working-with-apis/pagination).\n   * @param limit           The upper limit on the number of subscription events to return in a paged\n   *                                  response.\n   * @return Response from the API call\n   */\n  async listSubscriptionEvents(\n    subscriptionId: string,\n    cursor?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListSubscriptionEventsResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}/events`;\n    return req.callAsJson(listSubscriptionEventsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Schedules a `PAUSE` action to pause an active subscription.\n   *\n   * @param subscriptionId  The ID of the subscription to pause.\n   * @param body            An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async pauseSubscription(\n    subscriptionId: string,\n    body: PauseSubscriptionRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<PauseSubscriptionResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      body: [body, pauseSubscriptionRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}/pause`;\n    return req.callAsJson(pauseSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Schedules a `RESUME` action to resume a paused or a deactivated subscription.\n   *\n   * @param subscriptionId  The ID of the subscription to resume.\n   * @param body            An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async resumeSubscription(\n    subscriptionId: string,\n    body: ResumeSubscriptionRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ResumeSubscriptionResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      body: [body, resumeSubscriptionRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}/resume`;\n    return req.callAsJson(resumeSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Schedules a `SWAP_PLAN` action to swap a subscription plan in an existing subscription.\n   *\n   * @param subscriptionId  The ID of the subscription to swap the subscription plan for.\n   * @param body            An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async swapPlan(\n    subscriptionId: string,\n    body: SwapPlanRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SwapPlanResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      body: [body, swapPlanRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}/swap-plan`;\n    return req.callAsJson(swapPlanResponseSchema, requestOptions);\n  }\n}\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** An object that represents a team member's assignment to locations. */\nexport interface TeamMemberAssignedLocations {\n  /** Enumerates the possible assignment types that the team member can have. */\n  assignmentType?: string;\n  /** The locations that the team member is assigned to. */\n  locationIds?: string[];\n}\n\nexport const teamMemberAssignedLocationsSchema: Schema<TeamMemberAssignedLocations> = object(\n  {\n    assignmentType: ['assignment_type', optional(string())],\n    locationIds: ['location_ids', optional(array(string()))],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  TeamMemberAssignedLocations,\n  teamMemberAssignedLocationsSchema,\n} from './teamMemberAssignedLocations';\n\n/** A record representing an individual team member for a business. */\nexport interface TeamMember {\n  /** The unique ID for the team member. */\n  id?: string;\n  /** A second ID used to associate the team member with an entity in another system. */\n  referenceId?: string;\n  /** Whether the team member is the owner of the Square account. */\n  isOwner?: boolean;\n  /** Enumerates the possible statuses the team member can have within a business. */\n  status?: string;\n  /** The given name (that is, the first name) associated with the team member. */\n  givenName?: string;\n  /** The family name (that is, the last name) associated with the team member. */\n  familyName?: string;\n  /** The email address associated with the team member. */\n  emailAddress?: string;\n  /**\n   * The team member's phone number, in E.164 format. For example:\n   * +14155552671 - the country code is 1 for US\n   * +551155256325 - the country code is 55 for BR\n   */\n  phoneNumber?: string;\n  /**\n   * The timestamp, in RFC 3339 format, describing when the team member was created.\n   * For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".\n   */\n  createdAt?: string;\n  /**\n   * The timestamp, in RFC 3339 format, describing when the team member was last updated.\n   * For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".\n   */\n  updatedAt?: string;\n  /** An object that represents a team member's assignment to locations. */\n  assignedLocations?: TeamMemberAssignedLocations;\n}\n\nexport const teamMemberSchema: Schema<TeamMember> = object({\n  id: ['id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  isOwner: ['is_owner', optional(boolean())],\n  status: ['status', optional(string())],\n  givenName: ['given_name', optional(string())],\n  familyName: ['family_name', optional(string())],\n  emailAddress: ['email_address', optional(string())],\n  phoneNumber: ['phone_number', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  assignedLocations: [\n    'assigned_locations',\n    optional(lazy(() => teamMemberAssignedLocationsSchema)),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a create request for a `TeamMember` object. */\nexport interface CreateTeamMemberRequest {\n  /**\n   * A unique string that identifies this `CreateTeamMember` request.\n   * Keys can be any valid string, but must be unique for every request.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).\n   * The minimum length is 1 and the maximum length is 45.\n   */\n  idempotencyKey?: string;\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n}\n\nexport const createTeamMemberRequestSchema: Schema<CreateTeamMemberRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    teamMember: ['team_member', optional(lazy(() => teamMemberSchema))],\n  }\n);\n","import { dict, lazy, object, Schema } from '../schema';\nimport {\n  CreateTeamMemberRequest,\n  createTeamMemberRequestSchema,\n} from './createTeamMemberRequest';\n\n/** Represents a bulk create request for `TeamMember` objects. */\nexport interface BulkCreateTeamMembersRequest {\n  /** The data used to create the `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`. */\n  teamMembers: Record<string, CreateTeamMemberRequest>;\n}\n\nexport const bulkCreateTeamMembersRequestSchema: Schema<BulkCreateTeamMembersRequest> = object(\n  {\n    teamMembers: [\n      'team_members',\n      dict(lazy(() => createTeamMemberRequestSchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a response from a create request containing the created `TeamMember` object or error messages. */\nexport interface CreateTeamMemberResponse {\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createTeamMemberResponseSchema: Schema<CreateTeamMemberResponse> = object(\n  {\n    teamMember: ['team_member', optional(lazy(() => teamMemberSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, dict, lazy, object, optional, Schema } from '../schema';\nimport {\n  CreateTeamMemberResponse,\n  createTeamMemberResponseSchema,\n} from './createTeamMemberResponse';\nimport { Error, errorSchema } from './error';\n\n/** Represents a response from a bulk create request containing the created `TeamMember` objects or error messages. */\nexport interface BulkCreateTeamMembersResponse {\n  /** The successfully created `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`. */\n  teamMembers?: Record<string, CreateTeamMemberResponse>;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const bulkCreateTeamMembersResponseSchema: Schema<BulkCreateTeamMembersResponse> = object(\n  {\n    teamMembers: [\n      'team_members',\n      optional(dict(lazy(() => createTeamMemberResponseSchema))),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents an update request for a `TeamMember` object. */\nexport interface UpdateTeamMemberRequest {\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n}\n\nexport const updateTeamMemberRequestSchema: Schema<UpdateTeamMemberRequest> = object(\n  { teamMember: ['team_member', optional(lazy(() => teamMemberSchema))] }\n);\n","import { dict, lazy, object, Schema } from '../schema';\nimport {\n  UpdateTeamMemberRequest,\n  updateTeamMemberRequestSchema,\n} from './updateTeamMemberRequest';\n\n/** Represents a bulk update request for `TeamMember` objects. */\nexport interface BulkUpdateTeamMembersRequest {\n  /** The data used to update the `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`. */\n  teamMembers: Record<string, UpdateTeamMemberRequest>;\n}\n\nexport const bulkUpdateTeamMembersRequestSchema: Schema<BulkUpdateTeamMembersRequest> = object(\n  {\n    teamMembers: [\n      'team_members',\n      dict(lazy(() => updateTeamMemberRequestSchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a response from an update request containing the updated `TeamMember` object or error messages. */\nexport interface UpdateTeamMemberResponse {\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateTeamMemberResponseSchema: Schema<UpdateTeamMemberResponse> = object(\n  {\n    teamMember: ['team_member', optional(lazy(() => teamMemberSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, dict, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  UpdateTeamMemberResponse,\n  updateTeamMemberResponseSchema,\n} from './updateTeamMemberResponse';\n\n/** Represents a response from a bulk update request containing the updated `TeamMember` objects or error messages. */\nexport interface BulkUpdateTeamMembersResponse {\n  /** The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`. */\n  teamMembers?: Record<string, UpdateTeamMemberResponse>;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const bulkUpdateTeamMembersResponseSchema: Schema<BulkUpdateTeamMembersResponse> = object(\n  {\n    teamMembers: [\n      'team_members',\n      optional(dict(lazy(() => updateTeamMemberResponseSchema))),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a response from a retrieve request containing a `TeamMember` object or error messages. */\nexport interface RetrieveTeamMemberResponse {\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveTeamMemberResponseSchema: Schema<RetrieveTeamMemberResponse> = object(\n  {\n    teamMember: ['team_member', optional(lazy(() => teamMemberSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** An object describing a job that a team member is assigned to. */\nexport interface JobAssignment {\n  /** The title of the job. */\n  jobTitle: string;\n  /** Enumerates the possible pay types that a job can be assigned. */\n  payType: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  hourlyRate?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  annualRate?: Money;\n  /** The planned hours per week for the job. Set if the job `PayType` is `SALARY`. */\n  weeklyHours?: number;\n}\n\nexport const jobAssignmentSchema: Schema<JobAssignment> = object({\n  jobTitle: ['job_title', string()],\n  payType: ['pay_type', string()],\n  hourlyRate: ['hourly_rate', optional(lazy(() => moneySchema))],\n  annualRate: ['annual_rate', optional(lazy(() => moneySchema))],\n  weeklyHours: ['weekly_hours', optional(number())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { JobAssignment, jobAssignmentSchema } from './jobAssignment';\n\n/** An object representing a team member's wage information. */\nexport interface WageSetting {\n  /** The unique ID of the `TeamMember` whom this wage setting describes. */\n  teamMemberId?: string;\n  /**\n   * Required. The ordered list of jobs that the team member is assigned to.\n   * The first job assignment is considered the team member's primary job.\n   * The minimum length is 1 and the maximum length is 12.\n   */\n  jobAssignments?: JobAssignment[];\n  /** Whether the team member is exempt from the overtime rules of the seller's country. */\n  isOvertimeExempt?: boolean;\n  /**\n   * Used for resolving concurrency issues. The request fails if the version\n   * provided does not match the server version at the time of the request. If not provided,\n   * Square executes a blind write, potentially overwriting data from another write. For more information,\n   * see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).\n   */\n  version?: number;\n  /**\n   * The timestamp, in RFC 3339 format, describing when the wage setting object was created.\n   * For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".\n   */\n  createdAt?: string;\n  /**\n   * The timestamp, in RFC 3339 format, describing when the wage setting object was last updated.\n   * For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".\n   */\n  updatedAt?: string;\n}\n\nexport const wageSettingSchema: Schema<WageSetting> = object({\n  teamMemberId: ['team_member_id', optional(string())],\n  jobAssignments: [\n    'job_assignments',\n    optional(array(lazy(() => jobAssignmentSchema))),\n  ],\n  isOvertimeExempt: ['is_overtime_exempt', optional(boolean())],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { WageSetting, wageSettingSchema } from './wageSetting';\n\n/** Represents a response from a retrieve request containing the specified `WageSetting` object or error messages. */\nexport interface RetrieveWageSettingResponse {\n  /** An object representing a team member's wage information. */\n  wageSetting?: WageSetting;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveWageSettingResponseSchema: Schema<RetrieveWageSettingResponse> = object(\n  {\n    wageSetting: ['wage_setting', optional(lazy(() => wageSettingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied\n * between the individual fields, and `OR` logic is applied within list-based fields.\n * For example, setting this filter value:\n * ```\n * filter = (locations_ids = [\"A\", \"B\"], status = ACTIVE)\n * ```\n * returns only active team members assigned to either location \"A\" or \"B\".\n */\nexport interface SearchTeamMembersFilter {\n  /**\n   * When present, filters by team members assigned to the specified locations.\n   * When empty, includes team members assigned to any location.\n   */\n  locationIds?: string[];\n  /** Enumerates the possible statuses the team member can have within a business. */\n  status?: string;\n  /** When present and set to true, returns the team member who is the owner of the Square account. */\n  isOwner?: boolean;\n}\n\nexport const searchTeamMembersFilterSchema: Schema<SearchTeamMembersFilter> = object(\n  {\n    locationIds: ['location_ids', optional(array(string()))],\n    status: ['status', optional(string())],\n    isOwner: ['is_owner', optional(boolean())],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  SearchTeamMembersFilter,\n  searchTeamMembersFilterSchema,\n} from './searchTeamMembersFilter';\n\n/** Represents the parameters in a search for `TeamMember` objects. */\nexport interface SearchTeamMembersQuery {\n  /**\n   * Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied\n   * between the individual fields, and `OR` logic is applied within list-based fields.\n   * For example, setting this filter value:\n   * ```\n   * filter = (locations_ids = [\"A\", \"B\"], status = ACTIVE)\n   * ```\n   * returns only active team members assigned to either location \"A\" or \"B\".\n   */\n  filter?: SearchTeamMembersFilter;\n}\n\nexport const searchTeamMembersQuerySchema: Schema<SearchTeamMembersQuery> = object(\n  { filter: ['filter', optional(lazy(() => searchTeamMembersFilterSchema))] }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  SearchTeamMembersQuery,\n  searchTeamMembersQuerySchema,\n} from './searchTeamMembersQuery';\n\n/** Represents a search request for a filtered list of `TeamMember` objects. */\nexport interface SearchTeamMembersRequest {\n  /** Represents the parameters in a search for `TeamMember` objects. */\n  query?: SearchTeamMembersQuery;\n  /** The maximum number of `TeamMember` objects in a page (100 by default). */\n  limit?: number;\n  /**\n   * The opaque cursor for fetching the next page. For more information, see\n   * [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchTeamMembersRequestSchema: Schema<SearchTeamMembersRequest> = object(\n  {\n    query: ['query', optional(lazy(() => searchTeamMembersQuerySchema))],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a response from a search request containing a filtered list of `TeamMember` objects. */\nexport interface SearchTeamMembersResponse {\n  /** The filtered list of `TeamMember` objects. */\n  teamMembers?: TeamMember[];\n  /**\n   * The opaque cursor for fetching the next page. For more information, see\n   * [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const searchTeamMembersResponseSchema: Schema<SearchTeamMembersResponse> = object(\n  {\n    teamMembers: [\n      'team_members',\n      optional(array(lazy(() => teamMemberSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { WageSetting, wageSettingSchema } from './wageSetting';\n\n/** Represents an update request for the `WageSetting` object describing a `TeamMember`. */\nexport interface UpdateWageSettingRequest {\n  /** An object representing a team member's wage information. */\n  wageSetting: WageSetting;\n}\n\nexport const updateWageSettingRequestSchema: Schema<UpdateWageSettingRequest> = object(\n  { wageSetting: ['wage_setting', lazy(() => wageSettingSchema)] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { WageSetting, wageSettingSchema } from './wageSetting';\n\n/**\n * Represents a response from an update request containing the updated `WageSetting` object\n * or error messages.\n */\nexport interface UpdateWageSettingResponse {\n  /** An object representing a team member's wage information. */\n  wageSetting?: WageSetting;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateWageSettingResponseSchema: Schema<UpdateWageSettingResponse> = object(\n  {\n    wageSetting: ['wage_setting', optional(lazy(() => wageSettingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  BulkCreateTeamMembersRequest,\n  bulkCreateTeamMembersRequestSchema,\n} from '../models/bulkCreateTeamMembersRequest';\nimport {\n  BulkCreateTeamMembersResponse,\n  bulkCreateTeamMembersResponseSchema,\n} from '../models/bulkCreateTeamMembersResponse';\nimport {\n  BulkUpdateTeamMembersRequest,\n  bulkUpdateTeamMembersRequestSchema,\n} from '../models/bulkUpdateTeamMembersRequest';\nimport {\n  BulkUpdateTeamMembersResponse,\n  bulkUpdateTeamMembersResponseSchema,\n} from '../models/bulkUpdateTeamMembersResponse';\nimport {\n  CreateTeamMemberRequest,\n  createTeamMemberRequestSchema,\n} from '../models/createTeamMemberRequest';\nimport {\n  CreateTeamMemberResponse,\n  createTeamMemberResponseSchema,\n} from '../models/createTeamMemberResponse';\nimport {\n  RetrieveTeamMemberResponse,\n  retrieveTeamMemberResponseSchema,\n} from '../models/retrieveTeamMemberResponse';\nimport {\n  RetrieveWageSettingResponse,\n  retrieveWageSettingResponseSchema,\n} from '../models/retrieveWageSettingResponse';\nimport {\n  SearchTeamMembersRequest,\n  searchTeamMembersRequestSchema,\n} from '../models/searchTeamMembersRequest';\nimport {\n  SearchTeamMembersResponse,\n  searchTeamMembersResponseSchema,\n} from '../models/searchTeamMembersResponse';\nimport {\n  UpdateTeamMemberRequest,\n  updateTeamMemberRequestSchema,\n} from '../models/updateTeamMemberRequest';\nimport {\n  UpdateTeamMemberResponse,\n  updateTeamMemberResponseSchema,\n} from '../models/updateTeamMemberResponse';\nimport {\n  UpdateWageSettingRequest,\n  updateWageSettingRequestSchema,\n} from '../models/updateWageSettingRequest';\nimport {\n  UpdateWageSettingResponse,\n  updateWageSettingResponseSchema,\n} from '../models/updateWageSettingResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class TeamApi extends BaseApi {\n  /**\n   * Creates a single `TeamMember` object. The `TeamMember` object is returned on successful creates.\n   * You must provide the following values in your request to this endpoint:\n   * - `given_name`\n   * - `family_name`\n   *\n   * Learn about [Troubleshooting the Team API](https://developer.squareup.\n   * com/docs/team/troubleshooting#createteammember).\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                       See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createTeamMember(\n    body: CreateTeamMemberRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateTeamMemberResponse>> {\n    const req = this.createRequest('POST', '/v2/team-members');\n    const mapped = req.prepareArgs({\n      body: [body, createTeamMemberRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createTeamMemberResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates multiple `TeamMember` objects. The created `TeamMember` objects are returned on successful\n   * creates.\n   * This process is non-transactional and processes as much of the request as possible. If one of the\n   * creates in\n   * the request cannot be successfully processed, the request is not marked as failed, but the body of\n   * the response\n   * contains explicit error information for the failed create.\n   *\n   * Learn about [Troubleshooting the Team API](https://developer.squareup.\n   * com/docs/team/troubleshooting#bulk-create-team-members).\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async bulkCreateTeamMembers(\n    body: BulkCreateTeamMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BulkCreateTeamMembersResponse>> {\n    const req = this.createRequest('POST', '/v2/team-members/bulk-create');\n    const mapped = req.prepareArgs({\n      body: [body, bulkCreateTeamMembersRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(bulkCreateTeamMembersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates multiple `TeamMember` objects. The updated `TeamMember` objects are returned on successful\n   * updates.\n   * This process is non-transactional and processes as much of the request as possible. If one of the\n   * updates in\n   * the request cannot be successfully processed, the request is not marked as failed, but the body of\n   * the response\n   * contains explicit error information for the failed update.\n   * Learn about [Troubleshooting the Team API](https://developer.squareup.\n   * com/docs/team/troubleshooting#bulk-update-team-members).\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async bulkUpdateTeamMembers(\n    body: BulkUpdateTeamMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BulkUpdateTeamMembersResponse>> {\n    const req = this.createRequest('POST', '/v2/team-members/bulk-update');\n    const mapped = req.prepareArgs({\n      body: [body, bulkUpdateTeamMembersRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(bulkUpdateTeamMembersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a paginated list of `TeamMember` objects for a business.\n   * The list can be filtered by the following:\n   * - location IDs\n   * - `status`\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                        See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchTeamMembers(\n    body: SearchTeamMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchTeamMembersResponse>> {\n    const req = this.createRequest('POST', '/v2/team-members/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchTeamMembersRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchTeamMembersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a `TeamMember` object for the given `TeamMember.id`.\n   * Learn about [Troubleshooting the Team API](https://developer.squareup.\n   * com/docs/team/troubleshooting#retrieve-a-team-member).\n   *\n   * @param teamMemberId   The ID of the team member to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveTeamMember(\n    teamMemberId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveTeamMemberResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ teamMemberId: [teamMemberId, string()] });\n    req.appendTemplatePath`/v2/team-members/${mapped.teamMemberId}`;\n    return req.callAsJson(retrieveTeamMemberResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a single `TeamMember` object. The `TeamMember` object is returned on successful updates.\n   * Learn about [Troubleshooting the Team API](https://developer.squareup.\n   * com/docs/team/troubleshooting#update-a-team-member).\n   *\n   * @param teamMemberId   The ID of the team member to update.\n   * @param body           An object containing the fields to POST for the request.\n   *                                                         See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateTeamMember(\n    teamMemberId: string,\n    body: UpdateTeamMemberRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateTeamMemberResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      teamMemberId: [teamMemberId, string()],\n      body: [body, updateTeamMemberRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/team-members/${mapped.teamMemberId}`;\n    return req.callAsJson(updateTeamMemberResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a `WageSetting` object for a team member specified\n   * by `TeamMember.id`.\n   * Learn about [Troubleshooting the Team API](https://developer.squareup.\n   * com/docs/team/troubleshooting#retrievewagesetting).\n   *\n   * @param teamMemberId   The ID of the team member for which to retrieve the wage setting.\n   * @return Response from the API call\n   */\n  async retrieveWageSetting(\n    teamMemberId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveWageSettingResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ teamMemberId: [teamMemberId, string()] });\n    req.appendTemplatePath`/v2/team-members/${mapped.teamMemberId}/wage-setting`;\n    return req.callAsJson(retrieveWageSettingResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates or updates a `WageSetting` object. The object is created if a\n   * `WageSetting` with the specified `team_member_id` does not exist. Otherwise,\n   * it fully replaces the `WageSetting` object for the team member.\n   * The `WageSetting` is returned on a successful update.\n   * Learn about [Troubleshooting the Team API](https://developer.squareup.\n   * com/docs/team/troubleshooting#create-or-update-a-wage-setting).\n   *\n   * @param teamMemberId   The ID of the team member for which to update the\n   *                                                          `WageSetting` object.\n   * @param body           An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async updateWageSetting(\n    teamMemberId: string,\n    body: UpdateWageSettingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateWageSettingResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      teamMemberId: [teamMemberId, string()],\n      body: [body, updateWageSettingRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/team-members/${mapped.teamMemberId}/wage-setting`;\n    return req.callAsJson(updateWageSettingResponseSchema, requestOptions);\n  }\n}\n","import { array, boolean, number, object, optional, Schema } from '../schema';\n\nexport interface TipSettings {\n  /** Indicates whether tipping is enabled for this checkout. Defaults to false. */\n  allowTipping?: boolean;\n  /**\n   * Indicates whether tip options should be presented on the screen before presenting\n   * the signature screen during card payment. Defaults to false.\n   */\n  separateTipScreen?: boolean;\n  /** Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false. */\n  customTipField?: boolean;\n  /**\n   * A list of tip percentages that should be presented during the checkout flow, specified as\n   * up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.\n   */\n  tipPercentages?: number[];\n  /**\n   * Enables the \"Smart Tip Amounts\" behavior.\n   * Exact tipping options depend on the region in which the Square seller is active.\n   * For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.\n   * For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.\n   * If set to true, the `tip_percentages` settings is ignored.\n   * Defaults to false.\n   * To learn more about smart tipping, see [Accept Tips with the Square App](https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app).\n   */\n  smartTipping?: boolean;\n}\n\nexport const tipSettingsSchema: Schema<TipSettings> = object({\n  allowTipping: ['allow_tipping', optional(boolean())],\n  separateTipScreen: ['separate_tip_screen', optional(boolean())],\n  customTipField: ['custom_tip_field', optional(boolean())],\n  tipPercentages: ['tip_percentages', optional(array(number()))],\n  smartTipping: ['smart_tipping', optional(boolean())],\n});\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { TipSettings, tipSettingsSchema } from './tipSettings';\n\nexport interface DeviceCheckoutOptions {\n  /**\n   * The unique ID of the device intended for this `TerminalCheckout`.\n   * A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint.\n   * Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.\n   */\n  deviceId: string;\n  /** Instructs the device to skip the receipt screen. Defaults to false. */\n  skipReceiptScreen?: boolean;\n  /** Indicates that signature collection is desired during checkout. Defaults to false. */\n  collectSignature?: boolean;\n  tipSettings?: TipSettings;\n}\n\nexport const deviceCheckoutOptionsSchema: Schema<DeviceCheckoutOptions> = object(\n  {\n    deviceId: ['device_id', string()],\n    skipReceiptScreen: ['skip_receipt_screen', optional(boolean())],\n    collectSignature: ['collect_signature', optional(boolean())],\n    tipSettings: ['tip_settings', optional(lazy(() => tipSettingsSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  DeviceCheckoutOptions,\n  deviceCheckoutOptionsSchema,\n} from './deviceCheckoutOptions';\nimport { Money, moneySchema } from './money';\n\n/** Represents a checkout processed by the Square Terminal. */\nexport interface TerminalCheckout {\n  /** A unique ID for this `TerminalCheckout`. */\n  id?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * An optional user-defined reference ID that can be used to associate\n   * this `TerminalCheckout` to another entity in an external system. For example, an order\n   * ID generated by a third-party shopping cart. The ID is also associated with any payments\n   * used to complete the checkout.\n   */\n  referenceId?: string;\n  /**\n   * An optional note to associate with the checkout, as well as with any payments used to complete the checkout.\n   * Note: maximum 500 characters\n   */\n  note?: string;\n  deviceOptions: DeviceCheckoutOptions;\n  /**\n   * An RFC 3339 duration, after which the checkout is automatically canceled.\n   * A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason\n   * of `TIMED_OUT`.\n   * Default: 5 minutes from creation\n   * Maximum: 5 minutes\n   */\n  deadlineDuration?: string;\n  /**\n   * The status of the `TerminalCheckout`.\n   * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`\n   */\n  status?: string;\n  cancelReason?: string;\n  /** A list of IDs for payments created by this `TerminalCheckout`. */\n  paymentIds?: string[];\n  /** The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp. */\n  createdAt?: string;\n  /** The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp. */\n  updatedAt?: string;\n  /** The ID of the application that created the checkout. */\n  appId?: string;\n  /** The location of the device where the `TerminalCheckout` was directed. */\n  locationId?: string;\n  paymentType?: string;\n  /** An optional ID of the customer associated with the checkout. */\n  customerId?: string;\n}\n\nexport const terminalCheckoutSchema: Schema<TerminalCheckout> = object({\n  id: ['id', optional(string())],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  referenceId: ['reference_id', optional(string())],\n  note: ['note', optional(string())],\n  deviceOptions: ['device_options', lazy(() => deviceCheckoutOptionsSchema)],\n  deadlineDuration: ['deadline_duration', optional(string())],\n  status: ['status', optional(string())],\n  cancelReason: ['cancel_reason', optional(string())],\n  paymentIds: ['payment_ids', optional(array(string()))],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  appId: ['app_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  paymentType: ['payment_type', optional(string())],\n  customerId: ['customer_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface CancelTerminalCheckoutResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a checkout processed by the Square Terminal. */\n  checkout?: TerminalCheckout;\n}\n\nexport const cancelTerminalCheckoutResponseSchema: Schema<CancelTerminalCheckoutResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    checkout: ['checkout', optional(lazy(() => terminalCheckoutSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents a payment refund processed by the Square Terminal. Only supports Interac (Canadian debit network) payment refunds. */\nexport interface TerminalRefund {\n  /** A unique ID for this `TerminalRefund`. */\n  id?: string;\n  /** The reference to the payment refund created by completing this `TerminalRefund`. */\n  refundId?: string;\n  /** The unique ID of the payment being refunded. */\n  paymentId: string;\n  /** The reference to the Square order ID for the payment identified by the `payment_id`. */\n  orderId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /** A description of the reason for the refund. */\n  reason: string;\n  /**\n   * The unique ID of the device intended for this `TerminalRefund`.\n   * The Id can be retrieved from /v2/devices api.\n   */\n  deviceId: string;\n  /**\n   * The RFC 3339 duration, after which the refund is automatically canceled.\n   * A `TerminalRefund` that is `PENDING` is automatically `CANCELED` and has a cancellation reason\n   * of `TIMED_OUT`.\n   * Default: 5 minutes from creation.\n   * Maximum: 5 minutes\n   */\n  deadlineDuration?: string;\n  /**\n   * The status of the `TerminalRefund`.\n   * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, or `COMPLETED`.\n   */\n  status?: string;\n  cancelReason?: string;\n  /** The time when the `TerminalRefund` was created, as an RFC 3339 timestamp. */\n  createdAt?: string;\n  /** The time when the `TerminalRefund` was last updated, as an RFC 3339 timestamp. */\n  updatedAt?: string;\n  /** The ID of the application that created the refund. */\n  appId?: string;\n  /** The location of the device where the `TerminalRefund` was directed. */\n  locationId?: string;\n}\n\nexport const terminalRefundSchema: Schema<TerminalRefund> = object({\n  id: ['id', optional(string())],\n  refundId: ['refund_id', optional(string())],\n  paymentId: ['payment_id', string()],\n  orderId: ['order_id', optional(string())],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  reason: ['reason', string()],\n  deviceId: ['device_id', string()],\n  deadlineDuration: ['deadline_duration', optional(string())],\n  status: ['status', optional(string())],\n  cancelReason: ['cancel_reason', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  appId: ['app_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface CancelTerminalRefundResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment refund processed by the Square Terminal. Only supports Interac (Canadian debit network) payment refunds. */\n  refund?: TerminalRefund;\n}\n\nexport const cancelTerminalRefundResponseSchema: Schema<CancelTerminalRefundResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => terminalRefundSchema))],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface CreateTerminalCheckoutRequest {\n  /**\n   * A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but\n   * must be unique for every `CreateCheckout` request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /** Represents a checkout processed by the Square Terminal. */\n  checkout: TerminalCheckout;\n}\n\nexport const createTerminalCheckoutRequestSchema: Schema<CreateTerminalCheckoutRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    checkout: ['checkout', lazy(() => terminalCheckoutSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface CreateTerminalCheckoutResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a checkout processed by the Square Terminal. */\n  checkout?: TerminalCheckout;\n}\n\nexport const createTerminalCheckoutResponseSchema: Schema<CreateTerminalCheckoutResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    checkout: ['checkout', optional(lazy(() => terminalCheckoutSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface CreateTerminalRefundRequest {\n  /**\n   * A unique string that identifies this `CreateRefund` request. Keys can be any valid string but\n   * must be unique for every `CreateRefund` request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /** Represents a payment refund processed by the Square Terminal. Only supports Interac (Canadian debit network) payment refunds. */\n  refund?: TerminalRefund;\n}\n\nexport const createTerminalRefundRequestSchema: Schema<CreateTerminalRefundRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    refund: ['refund', optional(lazy(() => terminalRefundSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface CreateTerminalRefundResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment refund processed by the Square Terminal. Only supports Interac (Canadian debit network) payment refunds. */\n  refund?: TerminalRefund;\n}\n\nexport const createTerminalRefundResponseSchema: Schema<CreateTerminalRefundResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => terminalRefundSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface GetTerminalCheckoutResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a checkout processed by the Square Terminal. */\n  checkout?: TerminalCheckout;\n}\n\nexport const getTerminalCheckoutResponseSchema: Schema<GetTerminalCheckoutResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    checkout: ['checkout', optional(lazy(() => terminalCheckoutSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface GetTerminalRefundResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment refund processed by the Square Terminal. Only supports Interac (Canadian debit network) payment refunds. */\n  refund?: TerminalRefund;\n}\n\nexport const getTerminalRefundResponseSchema: Schema<GetTerminalRefundResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => terminalRefundSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\nexport interface TerminalCheckoutQueryFilter {\n  /**\n   * The `TerminalCheckout` objects associated with a specific device. If no device is specified, then all\n   * `TerminalCheckout` objects for the merchant are displayed.\n   */\n  deviceId?: string;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt?: TimeRange;\n  /**\n   * Filtered results with the desired status of the `TerminalCheckout`.\n   * Options: PENDING, IN_PROGRESS, CANCELED, COMPLETED\n   */\n  status?: string;\n}\n\nexport const terminalCheckoutQueryFilterSchema: Schema<TerminalCheckoutQueryFilter> = object(\n  {\n    deviceId: ['device_id', optional(string())],\n    createdAt: ['created_at', optional(lazy(() => timeRangeSchema))],\n    status: ['status', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface TerminalCheckoutQuerySort {\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  sortOrder?: string;\n}\n\nexport const terminalCheckoutQuerySortSchema: Schema<TerminalCheckoutQuerySort> = object(\n  { sortOrder: ['sort_order', optional(string())] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  TerminalCheckoutQueryFilter,\n  terminalCheckoutQueryFilterSchema,\n} from './terminalCheckoutQueryFilter';\nimport {\n  TerminalCheckoutQuerySort,\n  terminalCheckoutQuerySortSchema,\n} from './terminalCheckoutQuerySort';\n\nexport interface TerminalCheckoutQuery {\n  filter?: TerminalCheckoutQueryFilter;\n  sort?: TerminalCheckoutQuerySort;\n}\n\nexport const terminalCheckoutQuerySchema: Schema<TerminalCheckoutQuery> = object(\n  {\n    filter: ['filter', optional(lazy(() => terminalCheckoutQueryFilterSchema))],\n    sort: ['sort', optional(lazy(() => terminalCheckoutQuerySortSchema))],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  TerminalCheckoutQuery,\n  terminalCheckoutQuerySchema,\n} from './terminalCheckoutQuery';\n\nexport interface SearchTerminalCheckoutsRequest {\n  query?: TerminalCheckoutQuery;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this cursor to retrieve the next set of results for the original query.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** Limits the number of results returned for a single request. */\n  limit?: number;\n}\n\nexport const searchTerminalCheckoutsRequestSchema: Schema<SearchTerminalCheckoutsRequest> = object(\n  {\n    query: ['query', optional(lazy(() => terminalCheckoutQuerySchema))],\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface SearchTerminalCheckoutsResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The requested search result of `TerminalCheckout` objects. */\n  checkouts?: TerminalCheckout[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const searchTerminalCheckoutsResponseSchema: Schema<SearchTerminalCheckoutsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    checkouts: [\n      'checkouts',\n      optional(array(lazy(() => terminalCheckoutSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\nexport interface TerminalRefundQueryFilter {\n  /**\n   * `TerminalRefund` objects associated with a specific device. If no device is specified, then all\n   * `TerminalRefund` objects for the signed-in account are displayed.\n   */\n  deviceId?: string;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt?: TimeRange;\n  /**\n   * Filtered results with the desired status of the `TerminalRefund`.\n   * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, or `COMPLETED`.\n   */\n  status?: string;\n}\n\nexport const terminalRefundQueryFilterSchema: Schema<TerminalRefundQueryFilter> = object(\n  {\n    deviceId: ['device_id', optional(string())],\n    createdAt: ['created_at', optional(lazy(() => timeRangeSchema))],\n    status: ['status', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface TerminalRefundQuerySort {\n  /**\n   * The order in which results are listed.\n   * - `ASC` - Oldest to newest.\n   * - `DESC` - Newest to oldest (default).\n   */\n  sortOrder?: string;\n}\n\nexport const terminalRefundQuerySortSchema: Schema<TerminalRefundQuerySort> = object(\n  { sortOrder: ['sort_order', optional(string())] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  TerminalRefundQueryFilter,\n  terminalRefundQueryFilterSchema,\n} from './terminalRefundQueryFilter';\nimport {\n  TerminalRefundQuerySort,\n  terminalRefundQuerySortSchema,\n} from './terminalRefundQuerySort';\n\nexport interface TerminalRefundQuery {\n  filter?: TerminalRefundQueryFilter;\n  sort?: TerminalRefundQuerySort;\n}\n\nexport const terminalRefundQuerySchema: Schema<TerminalRefundQuery> = object({\n  filter: ['filter', optional(lazy(() => terminalRefundQueryFilterSchema))],\n  sort: ['sort', optional(lazy(() => terminalRefundQuerySortSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  TerminalRefundQuery,\n  terminalRefundQuerySchema,\n} from './terminalRefundQuery';\n\nexport interface SearchTerminalRefundsRequest {\n  query?: TerminalRefundQuery;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this cursor to retrieve the next set of results for the original query.\n   */\n  cursor?: string;\n  /** Limits the number of results returned for a single request. */\n  limit?: number;\n}\n\nexport const searchTerminalRefundsRequestSchema: Schema<SearchTerminalRefundsRequest> = object(\n  {\n    query: ['query', optional(lazy(() => terminalRefundQuerySchema))],\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface SearchTerminalRefundsResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The requested search result of `TerminalRefund` objects. */\n  refunds?: TerminalRefund[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const searchTerminalRefundsResponseSchema: Schema<SearchTerminalRefundsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refunds: ['refunds', optional(array(lazy(() => terminalRefundSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CancelTerminalCheckoutResponse,\n  cancelTerminalCheckoutResponseSchema,\n} from '../models/cancelTerminalCheckoutResponse';\nimport {\n  CancelTerminalRefundResponse,\n  cancelTerminalRefundResponseSchema,\n} from '../models/cancelTerminalRefundResponse';\nimport {\n  CreateTerminalCheckoutRequest,\n  createTerminalCheckoutRequestSchema,\n} from '../models/createTerminalCheckoutRequest';\nimport {\n  CreateTerminalCheckoutResponse,\n  createTerminalCheckoutResponseSchema,\n} from '../models/createTerminalCheckoutResponse';\nimport {\n  CreateTerminalRefundRequest,\n  createTerminalRefundRequestSchema,\n} from '../models/createTerminalRefundRequest';\nimport {\n  CreateTerminalRefundResponse,\n  createTerminalRefundResponseSchema,\n} from '../models/createTerminalRefundResponse';\nimport {\n  GetTerminalCheckoutResponse,\n  getTerminalCheckoutResponseSchema,\n} from '../models/getTerminalCheckoutResponse';\nimport {\n  GetTerminalRefundResponse,\n  getTerminalRefundResponseSchema,\n} from '../models/getTerminalRefundResponse';\nimport {\n  SearchTerminalCheckoutsRequest,\n  searchTerminalCheckoutsRequestSchema,\n} from '../models/searchTerminalCheckoutsRequest';\nimport {\n  SearchTerminalCheckoutsResponse,\n  searchTerminalCheckoutsResponseSchema,\n} from '../models/searchTerminalCheckoutsResponse';\nimport {\n  SearchTerminalRefundsRequest,\n  searchTerminalRefundsRequestSchema,\n} from '../models/searchTerminalRefundsRequest';\nimport {\n  SearchTerminalRefundsResponse,\n  searchTerminalRefundsResponseSchema,\n} from '../models/searchTerminalRefundsResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class TerminalApi extends BaseApi {\n  /**\n   * Creates a Terminal checkout request and sends it to the specified device to take a payment\n   * for the requested amount.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                             request.  See the corresponding object definition for\n   *                                                             field details.\n   * @return Response from the API call\n   */\n  async createTerminalCheckout(\n    body: CreateTerminalCheckoutRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateTerminalCheckoutResponse>> {\n    const req = this.createRequest('POST', '/v2/terminals/checkouts');\n    const mapped = req.prepareArgs({\n      body: [body, createTerminalCheckoutRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createTerminalCheckoutResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a filtered list of Terminal checkout requests created by the application making the request.\n   * Only Terminal checkout requests created for the merchant scoped to the OAuth token are returned.\n   * Terminal checkout requests are available for 30 days.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                              request.  See the corresponding object definition for\n   *                                                              field details.\n   * @return Response from the API call\n   */\n  async searchTerminalCheckouts(\n    body: SearchTerminalCheckoutsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchTerminalCheckoutsResponse>> {\n    const req = this.createRequest('POST', '/v2/terminals/checkouts/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchTerminalCheckoutsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(\n      searchTerminalCheckoutsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves a Terminal checkout request by `checkout_id`. Terminal checkout requests are available for\n   * 30 days.\n   *\n   * @param checkoutId  The unique ID for the desired `TerminalCheckout`.\n   * @return Response from the API call\n   */\n  async getTerminalCheckout(\n    checkoutId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetTerminalCheckoutResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ checkoutId: [checkoutId, string()] });\n    req.appendTemplatePath`/v2/terminals/checkouts/${mapped.checkoutId}`;\n    return req.callAsJson(getTerminalCheckoutResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels a Terminal checkout request if the status of the request permits it.\n   *\n   * @param checkoutId  The unique ID for the desired `TerminalCheckout`.\n   * @return Response from the API call\n   */\n  async cancelTerminalCheckout(\n    checkoutId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelTerminalCheckoutResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ checkoutId: [checkoutId, string()] });\n    req.appendTemplatePath`/v2/terminals/checkouts/${mapped.checkoutId}/cancel`;\n    return req.callAsJson(cancelTerminalCheckoutResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a request to refund an Interac payment completed on a Square Terminal. Refunds for Interac\n   * payments on a Square Terminal are supported only for Interac debit cards in Canada. Other refunds\n   * for Terminal payments should use the Refunds API. For more information, see [Refunds\n   * API]($e/Refunds).\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async createTerminalRefund(\n    body: CreateTerminalRefundRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateTerminalRefundResponse>> {\n    const req = this.createRequest('POST', '/v2/terminals/refunds');\n    const mapped = req.prepareArgs({\n      body: [body, createTerminalRefundRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createTerminalRefundResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the\n   * request. Terminal refund requests are available for 30 days.\n   *\n   * @param body         An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async searchTerminalRefunds(\n    body: SearchTerminalRefundsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchTerminalRefundsResponse>> {\n    const req = this.createRequest('POST', '/v2/terminals/refunds/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchTerminalRefundsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchTerminalRefundsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves an Interac Terminal refund object by ID. Terminal refund objects are available for 30 days.\n   *\n   * @param terminalRefundId   The unique ID for the desired `TerminalRefund`.\n   * @return Response from the API call\n   */\n  async getTerminalRefund(\n    terminalRefundId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetTerminalRefundResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      terminalRefundId: [terminalRefundId, string()],\n    });\n    req.appendTemplatePath`/v2/terminals/refunds/${mapped.terminalRefundId}`;\n    return req.callAsJson(getTerminalRefundResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits\n   * it.\n   *\n   * @param terminalRefundId   The unique ID for the desired `TerminalRefund`.\n   * @return Response from the API call\n   */\n  async cancelTerminalRefund(\n    terminalRefundId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelTerminalRefundResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      terminalRefundId: [terminalRefundId, string()],\n    });\n    req.appendTemplatePath`/v2/terminals/refunds/${mapped.terminalRefundId}/cancel`;\n    return req.callAsJson(cancelTerminalRefundResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [CaptureTransaction]($e/Transactions/CaptureTransaction) endpoint.\n */\nexport interface CaptureTransactionResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const captureTransactionResponseSchema: Schema<CaptureTransactionResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport { Refund, refundSchema } from './refund';\nimport { Tender, tenderSchema } from './tender';\n\n/**\n * Represents a transaction processed with Square, either with the\n * Connect API or with Square Point of Sale.\n * The `tenders` field of this object lists all methods of payment used to pay in\n * the transaction.\n */\nexport interface Transaction {\n  /** The transaction's unique ID, issued by Square payments servers. */\n  id?: string;\n  /** The ID of the transaction's associated location. */\n  locationId?: string;\n  /** The timestamp for when the transaction was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The tenders used to pay in the transaction. */\n  tenders?: Tender[];\n  /** Refunds that have been applied to any tender in the transaction. */\n  refunds?: Refund[];\n  /**\n   * If the transaction was created with the [Charge]($e/Transactions/Charge)\n   * endpoint, this value is the same as the value provided for the `reference_id`\n   * parameter in the request to that endpoint. Otherwise, it is not set.\n   */\n  referenceId?: string;\n  /** Indicates the Square product used to process a transaction. */\n  product?: string;\n  /**\n   * If the transaction was created in the Square Point of Sale app, this value\n   * is the ID generated for the transaction by Square Point of Sale.\n   * This ID has no relationship to the transaction's canonical `id`, which is\n   * generated by Square's backend servers. This value is generated for bookkeeping\n   * purposes, in case the transaction cannot immediately be completed (for example,\n   * if the transaction is processed in offline mode).\n   * It is not currently possible with the Connect API to perform a transaction\n   * lookup by this value.\n   */\n  clientId?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  shippingAddress?: Address;\n  /** The order_id is an identifier for the order associated with this transaction, if any. */\n  orderId?: string;\n}\n\nexport const transactionSchema: Schema<Transaction> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  tenders: ['tenders', optional(array(lazy(() => tenderSchema)))],\n  refunds: ['refunds', optional(array(lazy(() => refundSchema)))],\n  referenceId: ['reference_id', optional(string())],\n  product: ['product', optional(string())],\n  clientId: ['client_id', optional(string())],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  orderId: ['order_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Transaction, transactionSchema } from './transaction';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [ListTransactions]($e/Transactions/ListTransactions) endpoint.\n * One of `errors` or `transactions` is present in a given response (never both).\n */\nexport interface ListTransactionsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** An array of transactions that match your query. */\n  transactions?: Transaction[];\n  /**\n   * A pagination cursor for retrieving the next set of results,\n   * if any remain. Provide this value as the `cursor` parameter in a subsequent\n   * request to this endpoint.\n   * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listTransactionsResponseSchema: Schema<ListTransactionsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    transactions: [\n      'transactions',\n      optional(array(lazy(() => transactionSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Transaction, transactionSchema } from './transaction';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RetrieveTransaction]($e/Transactions/RetrieveTransaction) endpoint.\n * One of `errors` or `transaction` is present in a given response (never both).\n */\nexport interface RetrieveTransactionResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a transaction processed with Square, either with the\n   * Connect API or with Square Point of Sale.\n   * The `tenders` field of this object lists all methods of payment used to pay in\n   * the transaction.\n   */\n  transaction?: Transaction;\n}\n\nexport const retrieveTransactionResponseSchema: Schema<RetrieveTransactionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    transaction: ['transaction', optional(lazy(() => transactionSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [VoidTransaction]($e/Transactions/VoidTransaction) endpoint.\n */\nexport interface VoidTransactionResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const voidTransactionResponseSchema: Schema<VoidTransactionResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  CaptureTransactionResponse,\n  captureTransactionResponseSchema,\n} from '../models/captureTransactionResponse';\nimport {\n  ListTransactionsResponse,\n  listTransactionsResponseSchema,\n} from '../models/listTransactionsResponse';\nimport {\n  RetrieveTransactionResponse,\n  retrieveTransactionResponseSchema,\n} from '../models/retrieveTransactionResponse';\nimport {\n  VoidTransactionResponse,\n  voidTransactionResponseSchema,\n} from '../models/voidTransactionResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class TransactionsApi extends BaseApi {\n  /**\n   * Lists transactions for a particular location.\n   *\n   * Transactions include payment information from sales and exchanges and refund\n   * information from returns and exchanges.\n   *\n   * Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50\n   *\n   * @param locationId  The ID of the location to list transactions for.\n   * @param beginTime   The beginning of the requested reporting period, in RFC 3339 format.  See [Date\n   *                              ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for\n   *                              details on date inclusivity/exclusivity.  Default value: The current time minus one\n   *                              year.\n   * @param endTime     The end of the requested reporting period, in RFC 3339 format.  See [Date\n   *                              ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for\n   *                              details on date inclusivity/exclusivity.  Default value: The current time.\n   * @param sortOrder   The order in which results are listed in the response (`ASC` for oldest first,\n   *                              `DESC` for newest first).  Default value: `DESC`\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this to\n   *                              retrieve the next set of results for your original query.  See [Paginating\n   *                              results](https://developer.squareup.com/docs/working-with-apis/pagination) for more\n   *                              information.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listTransactions(\n    locationId: string,\n    beginTime?: string,\n    endTime?: string,\n    sortOrder?: string,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListTransactionsResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions`;\n    req.deprecated('TransactionsApi.listTransactions');\n    return req.callAsJson(listTransactionsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves details for a single transaction.\n   *\n   * @param locationId     The ID of the transaction's associated location.\n   * @param transactionId  The ID of the transaction to retrieve.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveTransaction(\n    locationId: string,\n    transactionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveTransactionResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      transactionId: [transactionId, string()],\n    });\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions/${mapped.transactionId}`;\n    req.deprecated('TransactionsApi.retrieveTransaction');\n    return req.callAsJson(retrieveTransactionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Captures a transaction that was created with the [Charge]($e/Transactions/Charge)\n   * endpoint with a `delay_capture` value of `true`.\n   *\n   *\n   * See [Delayed capture transactions](https://developer.squareup.\n   * com/docs/payments/transactions/overview#delayed-capture)\n   * for more information.\n   *\n   * @param locationId\n   * @param transactionId\n   * @return Response from the API call\n   * @deprecated\n   */\n  async captureTransaction(\n    locationId: string,\n    transactionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CaptureTransactionResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      transactionId: [transactionId, string()],\n    });\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions/${mapped.transactionId}/capture`;\n    req.deprecated('TransactionsApi.captureTransaction');\n    return req.callAsJson(captureTransactionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels a transaction that was created with the [Charge]($e/Transactions/Charge)\n   * endpoint with a `delay_capture` value of `true`.\n   *\n   *\n   * See [Delayed capture transactions](https://developer.squareup.\n   * com/docs/payments/transactions/overview#delayed-capture)\n   * for more information.\n   *\n   * @param locationId\n   * @param transactionId\n   * @return Response from the API call\n   * @deprecated\n   */\n  async voidTransaction(\n    locationId: string,\n    transactionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<VoidTransactionResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      transactionId: [transactionId, string()],\n    });\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions/${mapped.transactionId}/void`;\n    req.deprecated('TransactionsApi.voidTransaction');\n    return req.callAsJson(voidTransactionResponseSchema, requestOptions);\n  }\n}\n","import { number, object, optional, Schema, string } from '../schema';\n\nexport interface V1Money {\n  /**\n   * Amount in the lowest denominated value of this Currency. E.g. in USD\n   * these are cents, in JPY they are Yen (which do not have a 'cent' concept).\n   */\n  amount?: number;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currencyCode?: string;\n}\n\nexport const v1MoneySchema: Schema<V1Money> = object({\n  amount: ['amount', optional(number())],\n  currencyCode: ['currency_code', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1CreateRefundRequest */\nexport interface V1CreateRefundRequest {\n  /**\n   * The ID of the payment to refund. If you are creating a `PARTIAL`\n   * refund for a split tender payment, instead provide the id of the\n   * particular tender you want to refund.\n   */\n  paymentId: string;\n  type: string;\n  /** The reason for the refund. */\n  reason: string;\n  refundedMoney?: V1Money;\n  /** An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once. */\n  requestIdempotenceKey?: string;\n}\n\nexport const v1CreateRefundRequestSchema: Schema<V1CreateRefundRequest> = object(\n  {\n    paymentId: ['payment_id', string()],\n    type: ['type', string()],\n    reason: ['reason', string()],\n    refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],\n    requestIdempotenceKey: ['request_idempotence_key', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1OrderHistoryEntry */\nexport interface V1OrderHistoryEntry {\n  action?: string;\n  /** The time when the action was performed, in ISO 8601 format. */\n  createdAt?: string;\n}\n\nexport const v1OrderHistoryEntrySchema: Schema<V1OrderHistoryEntry> = object({\n  action: ['action', optional(string())],\n  createdAt: ['created_at', optional(string())],\n});\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/**\n * A tender represents a discrete monetary exchange. Square represents this\n * exchange as a money object with a specific currency and amount, where the\n * amount is given in the smallest denomination of the given currency.\n * Square POS can accept more than one form of tender for a single payment (such\n * as by splitting a bill between a credit card and a gift card). The `tender`\n * field of the Payment object lists all forms of tender used for the payment.\n * Split tender payments behave slightly differently from single tender payments:\n * The receipt_url for a split tender corresponds only to the first tender listed\n * in the tender field. To get the receipt URLs for the remaining tenders, use\n * the receipt_url fields of the corresponding Tender objects.\n * *A note on gift cards**: when a customer purchases a Square gift card from a\n * merchant, the merchant receives the full amount of the gift card in the\n * associated payment.\n * When that gift card is used as a tender, the balance of the gift card is\n * reduced and the merchant receives no funds. A `Tender` object with a type of\n * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the\n * associated payment.\n */\nexport interface V1Tender {\n  /** The tender's unique ID. */\n  id?: string;\n  type?: string;\n  /** A human-readable description of the tender. */\n  name?: string;\n  /** The ID of the employee that processed the tender. */\n  employeeId?: string;\n  /** The URL of the receipt for the tender. */\n  receiptUrl?: string;\n  /** The brand of a credit card. */\n  cardBrand?: string;\n  /** The last four digits of the provided credit card's account number. */\n  panSuffix?: string;\n  entryMethod?: string;\n  /** Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER. */\n  paymentNote?: string;\n  totalMoney?: V1Money;\n  tenderedMoney?: V1Money;\n  /** The time when the tender was created, in ISO 8601 format. */\n  tenderedAt?: string;\n  /** The time when the tender was settled, in ISO 8601 format. */\n  settledAt?: string;\n  changeBackMoney?: V1Money;\n  refundedMoney?: V1Money;\n  /** Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange. */\n  isExchange?: boolean;\n}\n\nexport const v1TenderSchema: Schema<V1Tender> = object({\n  id: ['id', optional(string())],\n  type: ['type', optional(string())],\n  name: ['name', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  receiptUrl: ['receipt_url', optional(string())],\n  cardBrand: ['card_brand', optional(string())],\n  panSuffix: ['pan_suffix', optional(string())],\n  entryMethod: ['entry_method', optional(string())],\n  paymentNote: ['payment_note', optional(string())],\n  totalMoney: ['total_money', optional(lazy(() => v1MoneySchema))],\n  tenderedMoney: ['tendered_money', optional(lazy(() => v1MoneySchema))],\n  tenderedAt: ['tendered_at', optional(string())],\n  settledAt: ['settled_at', optional(string())],\n  changeBackMoney: ['change_back_money', optional(lazy(() => v1MoneySchema))],\n  refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],\n  isExchange: ['is_exchange', optional(boolean())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Address, addressSchema } from './address';\nimport { Error, errorSchema } from './error';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1OrderHistoryEntry,\n  v1OrderHistoryEntrySchema,\n} from './v1OrderHistoryEntry';\nimport { V1Tender, v1TenderSchema } from './v1Tender';\n\n/** V1Order */\nexport interface V1Order {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The order's unique identifier. */\n  id?: string;\n  /** The email address of the order's buyer. */\n  buyerEmail?: string;\n  /** The name of the order's buyer. */\n  recipientName?: string;\n  /** The phone number to use for the order's delivery. */\n  recipientPhoneNumber?: string;\n  state?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  shippingAddress?: Address;\n  subtotalMoney?: V1Money;\n  totalShippingMoney?: V1Money;\n  totalTaxMoney?: V1Money;\n  totalPriceMoney?: V1Money;\n  totalDiscountMoney?: V1Money;\n  /** The time when the order was created, in ISO 8601 format. */\n  createdAt?: string;\n  /** The time when the order was last modified, in ISO 8601 format. */\n  updatedAt?: string;\n  /** The time when the order expires if no action is taken, in ISO 8601 format. */\n  expiresAt?: string;\n  /** The unique identifier of the payment associated with the order. */\n  paymentId?: string;\n  /** A note provided by the buyer when the order was created, if any. */\n  buyerNote?: string;\n  /** A note provided by the merchant when the order's state was set to COMPLETED, if any */\n  completedNote?: string;\n  /** A note provided by the merchant when the order's state was set to REFUNDED, if any. */\n  refundedNote?: string;\n  /** A note provided by the merchant when the order's state was set to CANCELED, if any. */\n  canceledNote?: string;\n  /**\n   * A tender represents a discrete monetary exchange. Square represents this\n   * exchange as a money object with a specific currency and amount, where the\n   * amount is given in the smallest denomination of the given currency.\n   * Square POS can accept more than one form of tender for a single payment (such\n   * as by splitting a bill between a credit card and a gift card). The `tender`\n   * field of the Payment object lists all forms of tender used for the payment.\n   * Split tender payments behave slightly differently from single tender payments:\n   * The receipt_url for a split tender corresponds only to the first tender listed\n   * in the tender field. To get the receipt URLs for the remaining tenders, use\n   * the receipt_url fields of the corresponding Tender objects.\n   * *A note on gift cards**: when a customer purchases a Square gift card from a\n   * merchant, the merchant receives the full amount of the gift card in the\n   * associated payment.\n   * When that gift card is used as a tender, the balance of the gift card is\n   * reduced and the merchant receives no funds. A `Tender` object with a type of\n   * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the\n   * associated payment.\n   */\n  tender?: V1Tender;\n  /** The history of actions associated with the order. */\n  orderHistory?: V1OrderHistoryEntry[];\n  /** The promo code provided by the buyer, if any. */\n  promoCode?: string;\n  /** For Bitcoin transactions, the address that the buyer sent Bitcoin to. */\n  btcReceiveAddress?: string;\n  /** For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC). */\n  btcPriceSatoshi?: number;\n}\n\nexport const v1OrderSchema: Schema<V1Order> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  id: ['id', optional(string())],\n  buyerEmail: ['buyer_email', optional(string())],\n  recipientName: ['recipient_name', optional(string())],\n  recipientPhoneNumber: ['recipient_phone_number', optional(string())],\n  state: ['state', optional(string())],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  subtotalMoney: ['subtotal_money', optional(lazy(() => v1MoneySchema))],\n  totalShippingMoney: [\n    'total_shipping_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => v1MoneySchema))],\n  totalPriceMoney: ['total_price_money', optional(lazy(() => v1MoneySchema))],\n  totalDiscountMoney: [\n    'total_discount_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  expiresAt: ['expires_at', optional(string())],\n  paymentId: ['payment_id', optional(string())],\n  buyerNote: ['buyer_note', optional(string())],\n  completedNote: ['completed_note', optional(string())],\n  refundedNote: ['refunded_note', optional(string())],\n  canceledNote: ['canceled_note', optional(string())],\n  tender: ['tender', optional(lazy(() => v1TenderSchema))],\n  orderHistory: [\n    'order_history',\n    optional(array(lazy(() => v1OrderHistoryEntrySchema))),\n  ],\n  promoCode: ['promo_code', optional(string())],\n  btcReceiveAddress: ['btc_receive_address', optional(string())],\n  btcPriceSatoshi: ['btc_price_satoshi', optional(number())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface Device {\n  /** The device's Square-issued ID. */\n  id?: string;\n  /** The device's merchant-specified name. */\n  name?: string;\n}\n\nexport const deviceSchema: Schema<Device> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1PaymentDiscount */\nexport interface V1PaymentDiscount {\n  /** The discount's name. */\n  name?: string;\n  appliedMoney?: V1Money;\n  /** The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID. */\n  discountId?: string;\n}\n\nexport const v1PaymentDiscountSchema: Schema<V1PaymentDiscount> = object({\n  name: ['name', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => v1MoneySchema))],\n  discountId: ['discount_id', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1PaymentItemDetail */\nexport interface V1PaymentItemDetail {\n  /** The name of the item's merchant-defined category, if any. */\n  categoryName?: string;\n  /** The item's merchant-defined SKU, if any. */\n  sku?: string;\n  /** The unique ID of the item purchased, if any. */\n  itemId?: string;\n  /** The unique ID of the item variation purchased, if any. */\n  itemVariationId?: string;\n}\n\nexport const v1PaymentItemDetailSchema: Schema<V1PaymentItemDetail> = object({\n  categoryName: ['category_name', optional(string())],\n  sku: ['sku', optional(string())],\n  itemId: ['item_id', optional(string())],\n  itemVariationId: ['item_variation_id', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1PaymentModifier */\nexport interface V1PaymentModifier {\n  /** The modifier option's name. */\n  name?: string;\n  appliedMoney?: V1Money;\n  /** The ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID. */\n  modifierOptionId?: string;\n}\n\nexport const v1PaymentModifierSchema: Schema<V1PaymentModifier> = object({\n  name: ['name', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => v1MoneySchema))],\n  modifierOptionId: ['modifier_option_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1PaymentTax */\nexport interface V1PaymentTax {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The merchant-defined name of the tax. */\n  name?: string;\n  appliedMoney?: V1Money;\n  /** The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. */\n  rate?: string;\n  inclusionType?: string;\n  /** The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID. */\n  feeId?: string;\n}\n\nexport const v1PaymentTaxSchema: Schema<V1PaymentTax> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  name: ['name', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => v1MoneySchema))],\n  rate: ['rate', optional(string())],\n  inclusionType: ['inclusion_type', optional(string())],\n  feeId: ['fee_id', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1PaymentDiscount,\n  v1PaymentDiscountSchema,\n} from './v1PaymentDiscount';\nimport {\n  V1PaymentItemDetail,\n  v1PaymentItemDetailSchema,\n} from './v1PaymentItemDetail';\nimport {\n  V1PaymentModifier,\n  v1PaymentModifierSchema,\n} from './v1PaymentModifier';\nimport { V1PaymentTax, v1PaymentTaxSchema } from './v1PaymentTax';\n\n/**\n * Payment include an` itemizations` field that lists the items purchased,\n * along with associated fees, modifiers, and discounts. Each itemization has an\n * `itemization_type` field that indicates which of the following the itemization\n * represents:\n * <ul>\n * <li>An item variation from the merchant's item library</li>\n * <li>A custom monetary amount</li>\n * <li>\n * An action performed on a Square gift card, such as activating or\n * reloading it.\n * </li>\n * </ul>\n * *Note**: itemization information included in a `Payment` object reflects\n * details collected **at the time of the payment**. Details such as the name or\n * price of items might have changed since the payment was processed.\n */\nexport interface V1PaymentItemization {\n  /** The item's name. */\n  name?: string;\n  /** The quantity of the item purchased. This can be a decimal value. */\n  quantity?: number;\n  itemizationType?: string;\n  /** V1PaymentItemDetail */\n  itemDetail?: V1PaymentItemDetail;\n  /** Notes entered by the merchant about the item at the time of payment, if any. */\n  notes?: string;\n  /** The name of the item variation purchased, if any. */\n  itemVariationName?: string;\n  totalMoney?: V1Money;\n  singleQuantityMoney?: V1Money;\n  grossSalesMoney?: V1Money;\n  discountMoney?: V1Money;\n  netSalesMoney?: V1Money;\n  /** All taxes applied to this itemization. */\n  taxes?: V1PaymentTax[];\n  /** All discounts applied to this itemization. */\n  discounts?: V1PaymentDiscount[];\n  /** All modifier options applied to this itemization. */\n  modifiers?: V1PaymentModifier[];\n}\n\nexport const v1PaymentItemizationSchema: Schema<V1PaymentItemization> = object({\n  name: ['name', optional(string())],\n  quantity: ['quantity', optional(number())],\n  itemizationType: ['itemization_type', optional(string())],\n  itemDetail: ['item_detail', optional(lazy(() => v1PaymentItemDetailSchema))],\n  notes: ['notes', optional(string())],\n  itemVariationName: ['item_variation_name', optional(string())],\n  totalMoney: ['total_money', optional(lazy(() => v1MoneySchema))],\n  singleQuantityMoney: [\n    'single_quantity_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  grossSalesMoney: ['gross_sales_money', optional(lazy(() => v1MoneySchema))],\n  discountMoney: ['discount_money', optional(lazy(() => v1MoneySchema))],\n  netSalesMoney: ['net_sales_money', optional(lazy(() => v1MoneySchema))],\n  taxes: ['taxes', optional(array(lazy(() => v1PaymentTaxSchema)))],\n  discounts: [\n    'discounts',\n    optional(array(lazy(() => v1PaymentDiscountSchema))),\n  ],\n  modifiers: [\n    'modifiers',\n    optional(array(lazy(() => v1PaymentModifierSchema))),\n  ],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport { V1PaymentTax, v1PaymentTaxSchema } from './v1PaymentTax';\n\n/** V1PaymentSurcharge */\nexport interface V1PaymentSurcharge {\n  /** The name of the surcharge. */\n  name?: string;\n  appliedMoney?: V1Money;\n  /** The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \"0.7\" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set. */\n  rate?: string;\n  amountMoney?: V1Money;\n  type?: string;\n  /** Indicates whether the surcharge is taxable. */\n  taxable?: boolean;\n  /** The list of taxes that should be applied to the surcharge. */\n  taxes?: V1PaymentTax[];\n  /** A Square-issued unique identifier associated with the surcharge. */\n  surchargeId?: string;\n}\n\nexport const v1PaymentSurchargeSchema: Schema<V1PaymentSurcharge> = object({\n  name: ['name', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => v1MoneySchema))],\n  rate: ['rate', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => v1MoneySchema))],\n  type: ['type', optional(string())],\n  taxable: ['taxable', optional(boolean())],\n  taxes: ['taxes', optional(array(lazy(() => v1PaymentTaxSchema)))],\n  surchargeId: ['surcharge_id', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1PaymentSurcharge,\n  v1PaymentSurchargeSchema,\n} from './v1PaymentSurcharge';\nimport { V1PaymentTax, v1PaymentTaxSchema } from './v1PaymentTax';\n\n/** V1Refund */\nexport interface V1Refund {\n  type?: string;\n  /** The merchant-specified reason for the refund. */\n  reason?: string;\n  refundedMoney?: V1Money;\n  refundedProcessingFeeMoney?: V1Money;\n  refundedTaxMoney?: V1Money;\n  refundedAdditiveTaxMoney?: V1Money;\n  /** All of the additive taxes associated with the refund. */\n  refundedAdditiveTax?: V1PaymentTax[];\n  refundedInclusiveTaxMoney?: V1Money;\n  /** All of the inclusive taxes associated with the refund. */\n  refundedInclusiveTax?: V1PaymentTax[];\n  refundedTipMoney?: V1Money;\n  refundedDiscountMoney?: V1Money;\n  refundedSurchargeMoney?: V1Money;\n  /** A list of all surcharges associated with the refund. */\n  refundedSurcharges?: V1PaymentSurcharge[];\n  /** The time when the merchant initiated the refund for Square to process, in ISO 8601 format. */\n  createdAt?: string;\n  /** The time when Square processed the refund on behalf of the merchant, in ISO 8601 format. */\n  processedAt?: string;\n  /** A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders. */\n  paymentId?: string;\n  merchantId?: string;\n  /** Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded. */\n  isExchange?: boolean;\n}\n\nexport const v1RefundSchema: Schema<V1Refund> = object({\n  type: ['type', optional(string())],\n  reason: ['reason', optional(string())],\n  refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],\n  refundedProcessingFeeMoney: [\n    'refunded_processing_fee_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedTaxMoney: ['refunded_tax_money', optional(lazy(() => v1MoneySchema))],\n  refundedAdditiveTaxMoney: [\n    'refunded_additive_tax_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedAdditiveTax: [\n    'refunded_additive_tax',\n    optional(array(lazy(() => v1PaymentTaxSchema))),\n  ],\n  refundedInclusiveTaxMoney: [\n    'refunded_inclusive_tax_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedInclusiveTax: [\n    'refunded_inclusive_tax',\n    optional(array(lazy(() => v1PaymentTaxSchema))),\n  ],\n  refundedTipMoney: ['refunded_tip_money', optional(lazy(() => v1MoneySchema))],\n  refundedDiscountMoney: [\n    'refunded_discount_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedSurchargeMoney: [\n    'refunded_surcharge_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedSurcharges: [\n    'refunded_surcharges',\n    optional(array(lazy(() => v1PaymentSurchargeSchema))),\n  ],\n  createdAt: ['created_at', optional(string())],\n  processedAt: ['processed_at', optional(string())],\n  paymentId: ['payment_id', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  isExchange: ['is_exchange', optional(boolean())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Device, deviceSchema } from './device';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1PaymentItemization,\n  v1PaymentItemizationSchema,\n} from './v1PaymentItemization';\nimport {\n  V1PaymentSurcharge,\n  v1PaymentSurchargeSchema,\n} from './v1PaymentSurcharge';\nimport { V1PaymentTax, v1PaymentTaxSchema } from './v1PaymentTax';\nimport { V1Refund, v1RefundSchema } from './v1Refund';\nimport { V1Tender, v1TenderSchema } from './v1Tender';\n\n/**\n * A payment represents a paid transaction between a Square merchant and a\n * customer. Payment details are usually available from Connect API endpoints\n * within a few minutes after the transaction completes.\n * Each Payment object includes several fields that end in `_money`. These fields\n * describe the various amounts of money that contribute to the payment total:\n * <ul>\n * <li>\n * Monetary values are <b>positive</b> if they represent an\n * <em>increase</em> in the amount of money the merchant receives (e.g.,\n * <code>tax_money</code>, <code>tip_money</code>).\n * </li>\n * <li>\n * Monetary values are <b>negative</b> if they represent an\n * <em>decrease</em> in the amount of money the merchant receives (e.g.,\n * <code>discount_money</code>, <code>refunded_money</code>).\n * </li>\n * </ul>\n */\nexport interface V1Payment {\n  /** The payment's unique identifier. */\n  id?: string;\n  /** The unique identifier of the merchant that took the payment. */\n  merchantId?: string;\n  /** The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise. */\n  createdAt?: string;\n  /** The unique identifier of the Square account that took the payment. */\n  creatorId?: string;\n  device?: Device;\n  /** The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page. */\n  paymentUrl?: string;\n  /**\n   * The URL of the receipt for the payment. Note that for split tender\n   * payments, this URL corresponds to the receipt for the first tender\n   * listed in the payment's tender field. Each Tender object has its own\n   * receipt_url field you can use to get the other receipts associated with\n   * a split tender payment.\n   */\n  receiptUrl?: string;\n  inclusiveTaxMoney?: V1Money;\n  additiveTaxMoney?: V1Money;\n  taxMoney?: V1Money;\n  tipMoney?: V1Money;\n  discountMoney?: V1Money;\n  totalCollectedMoney?: V1Money;\n  processingFeeMoney?: V1Money;\n  netTotalMoney?: V1Money;\n  refundedMoney?: V1Money;\n  swedishRoundingMoney?: V1Money;\n  grossSalesMoney?: V1Money;\n  netSalesMoney?: V1Money;\n  /** All of the inclusive taxes associated with the payment. */\n  inclusiveTax?: V1PaymentTax[];\n  /** All of the additive taxes associated with the payment. */\n  additiveTax?: V1PaymentTax[];\n  /** All of the tenders associated with the payment. */\n  tender?: V1Tender[];\n  /** All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange. */\n  refunds?: V1Refund[];\n  /** The items purchased in the payment. */\n  itemizations?: V1PaymentItemization[];\n  surchargeMoney?: V1Money;\n  /** A list of all surcharges associated with the payment. */\n  surcharges?: V1PaymentSurcharge[];\n  /**\n   * Indicates whether or not the payment is only partially paid for.\n   * If true, this payment will have the tenders collected so far, but the\n   * itemizations will be empty until the payment is completed.\n   */\n  isPartial?: boolean;\n}\n\nexport const v1PaymentSchema: Schema<V1Payment> = object({\n  id: ['id', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  creatorId: ['creator_id', optional(string())],\n  device: ['device', optional(lazy(() => deviceSchema))],\n  paymentUrl: ['payment_url', optional(string())],\n  receiptUrl: ['receipt_url', optional(string())],\n  inclusiveTaxMoney: [\n    'inclusive_tax_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  additiveTaxMoney: ['additive_tax_money', optional(lazy(() => v1MoneySchema))],\n  taxMoney: ['tax_money', optional(lazy(() => v1MoneySchema))],\n  tipMoney: ['tip_money', optional(lazy(() => v1MoneySchema))],\n  discountMoney: ['discount_money', optional(lazy(() => v1MoneySchema))],\n  totalCollectedMoney: [\n    'total_collected_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  processingFeeMoney: [\n    'processing_fee_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  netTotalMoney: ['net_total_money', optional(lazy(() => v1MoneySchema))],\n  refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],\n  swedishRoundingMoney: [\n    'swedish_rounding_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  grossSalesMoney: ['gross_sales_money', optional(lazy(() => v1MoneySchema))],\n  netSalesMoney: ['net_sales_money', optional(lazy(() => v1MoneySchema))],\n  inclusiveTax: [\n    'inclusive_tax',\n    optional(array(lazy(() => v1PaymentTaxSchema))),\n  ],\n  additiveTax: [\n    'additive_tax',\n    optional(array(lazy(() => v1PaymentTaxSchema))),\n  ],\n  tender: ['tender', optional(array(lazy(() => v1TenderSchema)))],\n  refunds: ['refunds', optional(array(lazy(() => v1RefundSchema)))],\n  itemizations: [\n    'itemizations',\n    optional(array(lazy(() => v1PaymentItemizationSchema))),\n  ],\n  surchargeMoney: ['surcharge_money', optional(lazy(() => v1MoneySchema))],\n  surcharges: [\n    'surcharges',\n    optional(array(lazy(() => v1PaymentSurchargeSchema))),\n  ],\n  isPartial: ['is_partial', optional(boolean())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1SettlementEntry */\nexport interface V1SettlementEntry {\n  /** The settlement's unique identifier. */\n  paymentId?: string;\n  type?: string;\n  amountMoney?: V1Money;\n  feeMoney?: V1Money;\n}\n\nexport const v1SettlementEntrySchema: Schema<V1SettlementEntry> = object({\n  paymentId: ['payment_id', optional(string())],\n  type: ['type', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => v1MoneySchema))],\n  feeMoney: ['fee_money', optional(lazy(() => v1MoneySchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1SettlementEntry,\n  v1SettlementEntrySchema,\n} from './v1SettlementEntry';\n\n/** V1Settlement */\nexport interface V1Settlement {\n  /** The settlement's unique identifier. */\n  id?: string;\n  status?: string;\n  totalMoney?: V1Money;\n  /** The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format. */\n  initiatedAt?: string;\n  /** The Square-issued unique identifier for the bank account associated with the settlement. */\n  bankAccountId?: string;\n  /** The entries included in this settlement. */\n  entries?: V1SettlementEntry[];\n}\n\nexport const v1SettlementSchema: Schema<V1Settlement> = object({\n  id: ['id', optional(string())],\n  status: ['status', optional(string())],\n  totalMoney: ['total_money', optional(lazy(() => v1MoneySchema))],\n  initiatedAt: ['initiated_at', optional(string())],\n  bankAccountId: ['bank_account_id', optional(string())],\n  entries: ['entries', optional(array(lazy(() => v1SettlementEntrySchema)))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1UpdateOrderRequest */\nexport interface V1UpdateOrderRequest {\n  action: string;\n  /** The tracking number of the shipment associated with the order. Only valid if action is COMPLETE. */\n  shippedTrackingNumber?: string;\n  /** A merchant-specified note about the completion of the order. Only valid if action is COMPLETE. */\n  completedNote?: string;\n  /** A merchant-specified note about the refunding of the order. Only valid if action is REFUND. */\n  refundedNote?: string;\n  /** A merchant-specified note about the canceling of the order. Only valid if action is CANCEL. */\n  canceledNote?: string;\n}\n\nexport const v1UpdateOrderRequestSchema: Schema<V1UpdateOrderRequest> = object({\n  action: ['action', string()],\n  shippedTrackingNumber: ['shipped_tracking_number', optional(string())],\n  completedNote: ['completed_note', optional(string())],\n  refundedNote: ['refunded_note', optional(string())],\n  canceledNote: ['canceled_note', optional(string())],\n});\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  V1CreateRefundRequest,\n  v1CreateRefundRequestSchema,\n} from '../models/v1CreateRefundRequest';\nimport { V1Order, v1OrderSchema } from '../models/v1Order';\nimport { V1Payment, v1PaymentSchema } from '../models/v1Payment';\nimport { V1Refund, v1RefundSchema } from '../models/v1Refund';\nimport { V1Settlement, v1SettlementSchema } from '../models/v1Settlement';\nimport {\n  V1UpdateOrderRequest,\n  v1UpdateOrderRequestSchema,\n} from '../models/v1UpdateOrderRequest';\nimport { array, boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class V1TransactionsApi extends BaseApi {\n  /**\n   * Provides summary information for a merchant's online store orders.\n   *\n   * @param locationId  The ID of the location to list online store orders for.\n   * @param order       The order in which payments are listed in the response.\n   * @param limit       The maximum number of payments to return in a single response. This value cannot\n   *                              exceed 200.\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listOrders(\n    locationId: string,\n    order?: string,\n    limit?: number,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Order[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    req.appendTemplatePath`/v1/${mapped.locationId}/orders`;\n    req.deprecated('V1TransactionsApi.listOrders');\n    return req.callAsJson(array(v1OrderSchema), requestOptions);\n  }\n\n  /**\n   * Provides comprehensive information for a single online store order, including the order's history.\n   *\n   * @param locationId  The ID of the order's associated location.\n   * @param orderId     The order's Square-issued ID. You obtain this value from Order objects returned by\n   *                              the List Orders endpoint\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveOrder(\n    locationId: string,\n    orderId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Order>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      orderId: [orderId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/orders/${mapped.orderId}`;\n    req.deprecated('V1TransactionsApi.retrieveOrder');\n    return req.callAsJson(v1OrderSchema, requestOptions);\n  }\n\n  /**\n   * Updates the details of an online store order. Every update you perform on an order corresponds to\n   * one of three actions:\n   *\n   * @param locationId   The ID of the order's associated location.\n   * @param orderId      The order's Square-issued ID. You obtain this value from Order\n   *                                                    objects returned by the List Orders endpoint\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateOrder(\n    locationId: string,\n    orderId: string,\n    body: V1UpdateOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Order>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      orderId: [orderId, string()],\n      body: [body, v1UpdateOrderRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/orders/${mapped.orderId}`;\n    req.deprecated('V1TransactionsApi.updateOrder');\n    return req.callAsJson(v1OrderSchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information for all payments taken for a given\n   * Square account during a date range. Date ranges cannot exceed 1 year in\n   * length. See Date ranges for details of inclusive and exclusive dates.\n   *\n   * *Note**: Details for payments processed with Square Point of Sale while\n   * in offline mode may not be transmitted to Square for up to 72 hours.\n   * Offline payments have a `created_at` value that reflects the time the\n   * payment was originally processed, not the time it was subsequently\n   * transmitted to Square. Consequently, the ListPayments endpoint might\n   * list an offline payment chronologically between online payments that\n   * were seen in a previous request.\n   *\n   * @param locationId      The ID of the location to list payments for. If you specify me, this endpoint\n   *                                   returns payments aggregated from all of the business's locations.\n   * @param order           The order in which payments are listed in the response.\n   * @param beginTime       The beginning of the requested reporting period, in ISO 8601 format. If this\n   *                                   value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an\n   *                                   error. Default value: The current time minus one year.\n   * @param endTime         The end of the requested reporting period, in ISO 8601 format. If this value is\n   *                                   more than one year greater than begin_time, this endpoint returns an error.\n   *                                   Default value: The current time.\n   * @param limit           The maximum number of payments to return in a single response. This value\n   *                                   cannot exceed 200.\n   * @param batchToken      A pagination cursor to retrieve the next set of results for your original query\n   *                                   to the endpoint.\n   * @param includePartial  Indicates whether or not to include partial payments in the response. Partial\n   *                                   payments will have the tenders collected so far, but the itemizations will be\n   *                                   empty until the payment is completed.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listPayments(\n    locationId: string,\n    order?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    batchToken?: string,\n    includePartial?: boolean,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Payment[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n      includePartial: [includePartial, optional(boolean())],\n    });\n    req.query('order', mapped.order);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    req.query('include_partial', mapped.includePartial);\n    req.appendTemplatePath`/v1/${mapped.locationId}/payments`;\n    req.deprecated('V1TransactionsApi.listPayments');\n    return req.callAsJson(array(v1PaymentSchema), requestOptions);\n  }\n\n  /**\n   * Provides comprehensive information for a single payment.\n   *\n   * @param locationId  The ID of the payment's associated location.\n   * @param paymentId   The Square-issued payment ID. payment_id comes from Payment objects returned by the\n   *                              List Payments endpoint, Settlement objects returned by the List Settlements endpoint,\n   *                              or Refund objects returned by the List Refunds endpoint.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrievePayment(\n    locationId: string,\n    paymentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Payment>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      paymentId: [paymentId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/payments/${mapped.paymentId}`;\n    req.deprecated('V1TransactionsApi.retrievePayment');\n    return req.callAsJson(v1PaymentSchema, requestOptions);\n  }\n\n  /**\n   * Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff\n   * during a date range. Date ranges cannot exceed one year in length.\n   *\n   * @param locationId  The ID of the location to list refunds for.\n   * @param order       The order in which payments are listed in the response.\n   * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. If this value\n   *                              is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error.\n   *                              Default value: The current time minus one year.\n   * @param endTime     The end of the requested reporting period, in ISO 8601 format. If this value is more\n   *                              than one year greater than begin_time, this endpoint returns an error. Default value:\n   *                              The current time.\n   * @param limit       The approximate number of refunds to return in a single response. Default: 100. Max:\n   *                              200. Response may contain more results than the prescribed limit when refunds are\n   *                              made simultaneously to multiple tenders in a payment or when refunds are generated in\n   *                              an exchange to account for the value of returned goods.\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listRefunds(\n    locationId: string,\n    order?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Refund[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    req.appendTemplatePath`/v1/${mapped.locationId}/refunds`;\n    req.deprecated('V1TransactionsApi.listRefunds');\n    return req.callAsJson(array(v1RefundSchema), requestOptions);\n  }\n\n  /**\n   * Issues a refund for a previously processed payment. You must issue\n   * a refund within 60 days of the associated payment.\n   *\n   * You cannot issue a partial refund for a split tender payment. You must\n   * instead issue a full or partial refund for a particular tender, by\n   * providing the applicable tender id to the V1CreateRefund endpoint.\n   * Issuing a full refund for a split tender payment refunds all tenders\n   * associated with the payment.\n   *\n   * Issuing a refund for a card payment is not reversible. For development\n   * purposes, you can create fake cash payments in Square Point of Sale and\n   * refund them.\n   *\n   * @param locationId   The ID of the original payment's associated location.\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createRefund(\n    locationId: string,\n    body: V1CreateRefundRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Refund>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, v1CreateRefundRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/refunds`;\n    req.deprecated('V1TransactionsApi.createRefund');\n    return req.callAsJson(v1RefundSchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information for all deposits and withdrawals\n   * initiated by Square to a linked bank account during a date range. Date\n   * ranges cannot exceed one year in length.\n   *\n   * *Note**: the ListSettlements endpoint does not provide entry\n   * information.\n   *\n   * @param locationId  The ID of the location to list settlements for. If you specify me, this endpoint\n   *                              returns settlements aggregated from all of the business's locations.\n   * @param order       The order in which settlements are listed in the response.\n   * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. If this value\n   *                              is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error.\n   *                              Default value: The current time minus one year.\n   * @param endTime     The end of the requested reporting period, in ISO 8601 format. If this value is more\n   *                              than one year greater than begin_time, this endpoint returns an error. Default value:\n   *                              The current time.\n   * @param limit       The maximum number of settlements to return in a single response. This value cannot\n   *                              exceed 200.\n   * @param status      Provide this parameter to retrieve only settlements with a particular status (SENT\n   *                              or FAILED).\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listSettlements(\n    locationId: string,\n    order?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    status?: string,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Settlement[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      status: [status, optional(string())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('status', mapped.status);\n    req.query('batch_token', mapped.batchToken);\n    req.appendTemplatePath`/v1/${mapped.locationId}/settlements`;\n    req.deprecated('V1TransactionsApi.listSettlements');\n    return req.callAsJson(array(v1SettlementSchema), requestOptions);\n  }\n\n  /**\n   * Provides comprehensive information for a single settlement.\n   *\n   * The returned `Settlement` objects include an `entries` field that lists\n   * the transactions that contribute to the settlement total. Most\n   * settlement entries correspond to a payment payout, but settlement\n   * entries are also generated for less common events, like refunds, manual\n   * adjustments, or chargeback holds.\n   *\n   * Square initiates its regular deposits as indicated in the\n   * [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)\n   * help article. Details for a regular deposit are usually not available\n   * from Connect API endpoints before 10 p.m. PST the same day.\n   *\n   * Square does not know when an initiated settlement **completes**, only\n   * whether it has failed. A completed settlement is typically reflected in\n   * a bank account within 3 business days, but in exceptional cases it may\n   * take longer.\n   *\n   * @param locationId    The ID of the settlements's associated location.\n   * @param settlementId  The settlement's Square-issued ID. You obtain this value from Settlement objects\n   *                                returned by the List Settlements endpoint.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveSettlement(\n    locationId: string,\n    settlementId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Settlement>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      settlementId: [settlementId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/settlements/${mapped.settlementId}`;\n    req.deprecated('V1TransactionsApi.retrieveSettlement');\n    return req.callAsJson(v1SettlementSchema, requestOptions);\n  }\n}\n","import { boolean, number, object, optional, Schema, string } from '../schema';\n\n/** Represents a contact of a [Vendor]($m/Vendor). */\nexport interface VendorContact {\n  /**\n   * A unique Square-generated ID for the [VendorContact]($m/VendorContact).\n   * This field is required when attempting to update a [VendorContact]($m/VendorContact).\n   */\n  id?: string;\n  /**\n   * The name of the [VendorContact]($m/VendorContact).\n   * This field is required when attempting to create a [Vendor]($m/Vendor).\n   */\n  name?: string;\n  /** The email address of the [VendorContact]($m/VendorContact). */\n  emailAddress?: string;\n  /** The phone number of the [VendorContact]($m/VendorContact). */\n  phoneNumber?: string;\n  /** The state of the [VendorContact]($m/VendorContact). */\n  removed?: boolean;\n  /** The ordinal of the [VendorContact]($m/VendorContact). */\n  ordinal: number;\n}\n\nexport const vendorContactSchema: Schema<VendorContact> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  emailAddress: ['email_address', optional(string())],\n  phoneNumber: ['phone_number', optional(string())],\n  removed: ['removed', optional(boolean())],\n  ordinal: ['ordinal', number()],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Address, addressSchema } from './address';\nimport { VendorContact, vendorContactSchema } from './vendorContact';\n\n/** Represents a supplier to a seller. */\nexport interface Vendor {\n  /**\n   * A unique Square-generated ID for the [Vendor]($m/Vendor).\n   * This field is required when attempting to update a [Vendor]($m/Vendor).\n   */\n  id?: string;\n  /**\n   * An RFC 3339-formatted timestamp that indicates when the\n   * [Vendor]($m/Vendor) was created.\n   */\n  createdAt?: string;\n  /**\n   * An RFC 3339-formatted timestamp that indicates when the\n   * [Vendor]($m/Vendor) was last updated.\n   */\n  updatedAt?: string;\n  /**\n   * The name of the [Vendor]($m/Vendor).\n   * This field is required when attempting to create or update a [Vendor]($m/Vendor).\n   */\n  name?: string;\n  /**\n   * Represents a postal address in a country.\n   * For more information, see [Working with Addresses](https://developer.squareup.com/docs/build-basics/working-with-addresses).\n   */\n  address?: Address;\n  /** The contacts of the [Vendor]($m/Vendor). */\n  contacts?: VendorContact[];\n  /** The account number of the [Vendor]($m/Vendor). */\n  accountNumber?: string;\n  /** A note detailing information about the [Vendor]($m/Vendor). */\n  note?: string;\n  /** The version of the [Vendor]($m/Vendor). */\n  version?: number;\n  /**\n   * The status of the [Vendor]($m/Vendor),\n   * whether a [Vendor]($m/Vendor) is active or inactive.\n   */\n  status?: string;\n}\n\nexport const vendorSchema: Schema<Vendor> = object({\n  id: ['id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  name: ['name', optional(string())],\n  address: ['address', optional(lazy(() => addressSchema))],\n  contacts: ['contacts', optional(array(lazy(() => vendorContactSchema)))],\n  accountNumber: ['account_number', optional(string())],\n  note: ['note', optional(string())],\n  version: ['version', optional(number())],\n  status: ['status', optional(string())],\n});\n","import { dict, lazy, object, Schema } from '../schema';\nimport { Vendor, vendorSchema } from './vendor';\n\n/** Represents an input to a call to [BulkCreateVendors]($e/Vendors/BulkCreateVendors). */\nexport interface BulkCreateVendorsRequest {\n  /** Specifies a set of new [Vendor]($m/Vendor) objects as represented by a collection of idempotency-key/`Vendor`-object pairs. */\n  vendors: Record<string, Vendor>;\n}\n\nexport const bulkCreateVendorsRequestSchema: Schema<BulkCreateVendorsRequest> = object(\n  { vendors: ['vendors', dict(lazy(() => vendorSchema))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Vendor, vendorSchema } from './vendor';\n\n/** Represents an output from a call to [CreateVendor]($e/Vendors/CreateVendor). */\nexport interface CreateVendorResponse {\n  /** Errors encountered when the request fails. */\n  errors?: Error[];\n  /** Represents a supplier to a seller. */\n  vendor?: Vendor;\n}\n\nexport const createVendorResponseSchema: Schema<CreateVendorResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  vendor: ['vendor', optional(lazy(() => vendorSchema))],\n});\n","import { array, dict, lazy, object, optional, Schema } from '../schema';\nimport {\n  CreateVendorResponse,\n  createVendorResponseSchema,\n} from './createVendorResponse';\nimport { Error, errorSchema } from './error';\n\n/** Represents an output from a call to [BulkCreateVendors]($e/Vendors/BulkCreateVendors). */\nexport interface BulkCreateVendorsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * A set of [CreateVendorResponse]($m/CreateVendorResponse) objects encapsulating successfully created [Vendor]($m/Vendor)\n   * objects or error responses for failed attempts. The set is represented by\n   * a collection of idempotency-key/`Vendor`-object or idempotency-key/error-object pairs. The idempotency keys correspond to those specified\n   * in the input.\n   */\n  responses?: Record<string, CreateVendorResponse>;\n}\n\nexport const bulkCreateVendorsResponseSchema: Schema<BulkCreateVendorsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    responses: [\n      'responses',\n      optional(dict(lazy(() => createVendorResponseSchema))),\n    ],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Represents an input to a call to [BulkRetrieveVendors]($e/Vendors/BulkRetrieveVendors). */\nexport interface BulkRetrieveVendorsRequest {\n  /** IDs of the [Vendor]($m/Vendor) objects to retrieve. */\n  vendorIds?: string[];\n}\n\nexport const bulkRetrieveVendorsRequestSchema: Schema<BulkRetrieveVendorsRequest> = object(\n  { vendorIds: ['vendor_ids', optional(array(string()))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Vendor, vendorSchema } from './vendor';\n\n/** Represents an output from a call to [RetrieveVendor]($e/Vendors/RetrieveVendor). */\nexport interface RetrieveVendorResponse {\n  /** Errors encountered when the request fails. */\n  errors?: Error[];\n  /** Represents a supplier to a seller. */\n  vendor?: Vendor;\n}\n\nexport const retrieveVendorResponseSchema: Schema<RetrieveVendorResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    vendor: ['vendor', optional(lazy(() => vendorSchema))],\n  }\n);\n","import { array, dict, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  RetrieveVendorResponse,\n  retrieveVendorResponseSchema,\n} from './retrieveVendorResponse';\n\n/** Represents an output from a call to [BulkRetrieveVendors]($e/Vendors/BulkRetrieveVendors). */\nexport interface BulkRetrieveVendorsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The set of [RetrieveVendorResponse]($m/RetrieveVendorResponse) objects encapsulating successfully retrieved [Vendor]($m/Vendor)\n   * objects or error responses for failed attempts. The set is represented by\n   * a collection of `Vendor`-ID/`Vendor`-object or `Vendor`-ID/error-object pairs.\n   */\n  responses?: Record<string, RetrieveVendorResponse>;\n}\n\nexport const bulkRetrieveVendorsResponseSchema: Schema<BulkRetrieveVendorsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    responses: [\n      'responses',\n      optional(dict(lazy(() => retrieveVendorResponseSchema))),\n    ],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Vendor, vendorSchema } from './vendor';\n\n/** Represents an input to a call to [UpdateVendor]($e/Vendors/UpdateVendor). */\nexport interface UpdateVendorRequest {\n  /**\n   * A client-supplied, universally unique identifier (UUID) for the\n   * request.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the\n   * [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more\n   * information.\n   */\n  idempotencyKey?: string;\n  /** Represents a supplier to a seller. */\n  vendor: Vendor;\n}\n\nexport const updateVendorRequestSchema: Schema<UpdateVendorRequest> = object({\n  idempotencyKey: ['idempotency_key', optional(string())],\n  vendor: ['vendor', lazy(() => vendorSchema)],\n});\n","import { dict, lazy, object, Schema } from '../schema';\nimport {\n  UpdateVendorRequest,\n  updateVendorRequestSchema,\n} from './updateVendorRequest';\n\n/** Represents an input to a call to [BulkUpdateVendors]($e/Vendors/BulkUpdateVendors). */\nexport interface BulkUpdateVendorsRequest {\n  /**\n   * A set of [UpdateVendorRequest]($m/UpdateVendorRequest) objects encapsulating to-be-updated [Vendor]($m/Vendor)\n   * objects. The set is represented by  a collection of `Vendor`-ID/`UpdateVendorRequest`-object pairs.\n   */\n  vendors: Record<string, UpdateVendorRequest>;\n}\n\nexport const bulkUpdateVendorsRequestSchema: Schema<BulkUpdateVendorsRequest> = object(\n  { vendors: ['vendors', dict(lazy(() => updateVendorRequestSchema))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Vendor, vendorSchema } from './vendor';\n\n/** Represents an output from a call to [UpdateVendor]($e/Vendors/UpdateVendor). */\nexport interface UpdateVendorResponse {\n  /** Errors occurred when the request fails. */\n  errors?: Error[];\n  /** Represents a supplier to a seller. */\n  vendor?: Vendor;\n}\n\nexport const updateVendorResponseSchema: Schema<UpdateVendorResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  vendor: ['vendor', optional(lazy(() => vendorSchema))],\n});\n","import { array, dict, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  UpdateVendorResponse,\n  updateVendorResponseSchema,\n} from './updateVendorResponse';\n\n/** Represents an output from a call to [BulkUpdateVendors]($e/Vendors/BulkUpdateVendors). */\nexport interface BulkUpdateVendorsResponse {\n  /** Errors encountered when the request fails. */\n  errors?: Error[];\n  /**\n   * A set of [UpdateVendorResponse]($m/UpdateVendorResponse) objects encapsulating successfully created [Vendor]($m/Vendor)\n   * objects or error responses for failed attempts. The set is represented by a collection of `Vendor`-ID/`UpdateVendorResponse`-object or\n   * `Vendor`-ID/error-object pairs.\n   */\n  responses?: Record<string, UpdateVendorResponse>;\n}\n\nexport const bulkUpdateVendorsResponseSchema: Schema<BulkUpdateVendorsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    responses: [\n      'responses',\n      optional(dict(lazy(() => updateVendorResponseSchema))),\n    ],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Vendor, vendorSchema } from './vendor';\n\n/** Represents an input to a call to [CreateVendor]($e/Vendors/CreateVendor). */\nexport interface CreateVendorRequest {\n  /**\n   * A client-supplied, universally unique identifier (UUID) to make this [CreateVendor]($e/Vendors/CreateVendor) call idempotent.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the\n   * [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more\n   * information.\n   */\n  idempotencyKey: string;\n  /** Represents a supplier to a seller. */\n  vendor?: Vendor;\n}\n\nexport const createVendorRequestSchema: Schema<CreateVendorRequest> = object({\n  idempotencyKey: ['idempotency_key', string()],\n  vendor: ['vendor', optional(lazy(() => vendorSchema))],\n});\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Defines supported query expressions to search for vendors by. */\nexport interface SearchVendorsRequestFilter {\n  /** The names of the [Vendor]($m/Vendor) objects to retrieve. */\n  name?: string[];\n  /**\n   * The statuses of the [Vendor]($m/Vendor) objects to retrieve.\n   * See [VendorStatus](#type-vendorstatus) for possible values\n   */\n  status?: string[];\n}\n\nexport const searchVendorsRequestFilterSchema: Schema<SearchVendorsRequestFilter> = object(\n  {\n    name: ['name', optional(array(string()))],\n    status: ['status', optional(array(string()))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Defines a sorter used to sort results from [SearchVendors]($e/Vendors/SearchVendors). */\nexport interface SearchVendorsRequestSort {\n  /** The field to sort the returned [Vendor]($m/Vendor) objects by. */\n  field?: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  order?: string;\n}\n\nexport const searchVendorsRequestSortSchema: Schema<SearchVendorsRequestSort> = object(\n  { field: ['field', optional(string())], order: ['order', optional(string())] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  SearchVendorsRequestFilter,\n  searchVendorsRequestFilterSchema,\n} from './searchVendorsRequestFilter';\nimport {\n  SearchVendorsRequestSort,\n  searchVendorsRequestSortSchema,\n} from './searchVendorsRequestSort';\n\n/** Represents an input into a call to [SearchVendors]($e/Vendors/SearchVendors). */\nexport interface SearchVendorsRequest {\n  /** Defines supported query expressions to search for vendors by. */\n  filter?: SearchVendorsRequestFilter;\n  /** Defines a sorter used to sort results from [SearchVendors]($e/Vendors/SearchVendors). */\n  sort?: SearchVendorsRequestSort;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for the original query.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const searchVendorsRequestSchema: Schema<SearchVendorsRequest> = object({\n  filter: ['filter', optional(lazy(() => searchVendorsRequestFilterSchema))],\n  sort: ['sort', optional(lazy(() => searchVendorsRequestSortSchema))],\n  cursor: ['cursor', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Vendor, vendorSchema } from './vendor';\n\n/** Represents an output from a call to [SearchVendors]($e/Vendors/SearchVendors). */\nexport interface SearchVendorsResponse {\n  /** Errors encountered when the request fails. */\n  errors?: Error[];\n  /** The [Vendor]($m/Vendor) objects matching the specified search filter. */\n  vendors?: Vendor[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const searchVendorsResponseSchema: Schema<SearchVendorsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    vendors: ['vendors', optional(array(lazy(() => vendorSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse, RequestOptions } from '../core';\nimport {\n  BulkCreateVendorsRequest,\n  bulkCreateVendorsRequestSchema,\n} from '../models/bulkCreateVendorsRequest';\nimport {\n  BulkCreateVendorsResponse,\n  bulkCreateVendorsResponseSchema,\n} from '../models/bulkCreateVendorsResponse';\nimport {\n  BulkRetrieveVendorsRequest,\n  bulkRetrieveVendorsRequestSchema,\n} from '../models/bulkRetrieveVendorsRequest';\nimport {\n  BulkRetrieveVendorsResponse,\n  bulkRetrieveVendorsResponseSchema,\n} from '../models/bulkRetrieveVendorsResponse';\nimport {\n  BulkUpdateVendorsRequest,\n  bulkUpdateVendorsRequestSchema,\n} from '../models/bulkUpdateVendorsRequest';\nimport {\n  BulkUpdateVendorsResponse,\n  bulkUpdateVendorsResponseSchema,\n} from '../models/bulkUpdateVendorsResponse';\nimport {\n  CreateVendorRequest,\n  createVendorRequestSchema,\n} from '../models/createVendorRequest';\nimport {\n  CreateVendorResponse,\n  createVendorResponseSchema,\n} from '../models/createVendorResponse';\nimport {\n  RetrieveVendorResponse,\n  retrieveVendorResponseSchema,\n} from '../models/retrieveVendorResponse';\nimport {\n  SearchVendorsRequest,\n  searchVendorsRequestSchema,\n} from '../models/searchVendorsRequest';\nimport {\n  SearchVendorsResponse,\n  searchVendorsResponseSchema,\n} from '../models/searchVendorsResponse';\nimport {\n  UpdateVendorRequest,\n  updateVendorRequestSchema,\n} from '../models/updateVendorRequest';\nimport {\n  UpdateVendorResponse,\n  updateVendorResponseSchema,\n} from '../models/updateVendorResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class VendorsApi extends BaseApi {\n  /**\n   * Creates one or more [Vendor]($m/Vendor) objects to represent suppliers to a seller.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                        See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async bulkCreateVendors(\n    body: BulkCreateVendorsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BulkCreateVendorsResponse>> {\n    const req = this.createRequest('POST', '/v2/vendors/bulk-create');\n    const mapped = req.prepareArgs({\n      body: [body, bulkCreateVendorsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(bulkCreateVendorsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves one or more vendors of specified [Vendor]($m/Vendor) IDs.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async bulkRetrieveVendors(\n    body: BulkRetrieveVendorsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BulkRetrieveVendorsResponse>> {\n    const req = this.createRequest('POST', '/v2/vendors/bulk-retrieve');\n    const mapped = req.prepareArgs({\n      body: [body, bulkRetrieveVendorsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(bulkRetrieveVendorsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates one or more of existing [Vendor]($m/Vendor) objects as suppliers to a seller.\n   *\n   * @param body         An object containing the fields to POST for the request.\n   *                                                        See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async bulkUpdateVendors(\n    body: BulkUpdateVendorsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BulkUpdateVendorsResponse>> {\n    const req = this.createRequest('PUT', '/v2/vendors/bulk-update');\n    const mapped = req.prepareArgs({\n      body: [body, bulkUpdateVendorsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(bulkUpdateVendorsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a single [Vendor]($m/Vendor) object to represent a supplier to a seller.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createVendor(\n    body: CreateVendorRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateVendorResponse>> {\n    const req = this.createRequest('POST', '/v2/vendors/create');\n    const mapped = req.prepareArgs({ body: [body, createVendorRequestSchema] });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(createVendorResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for vendors using a filter against supported [Vendor]($m/Vendor) properties and a supported\n   * sorter.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchVendors(\n    body: SearchVendorsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchVendorsResponse>> {\n    const req = this.createRequest('POST', '/v2/vendors/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchVendorsRequestSchema],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    return req.callAsJson(searchVendorsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves the vendor of a specified [Vendor]($m/Vendor) ID.\n   *\n   * @param vendorId  ID of the [Vendor]($m/Vendor) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveVendor(\n    vendorId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveVendorResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ vendorId: [vendorId, string()] });\n    req.appendTemplatePath`/v2/vendors/${mapped.vendorId}`;\n    return req.callAsJson(retrieveVendorResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an existing [Vendor]($m/Vendor) object as a supplier to a seller.\n   *\n   * @param body         An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @param vendorId\n   * @return Response from the API call\n   */\n  async updateVendor(\n    body: UpdateVendorRequest,\n    vendorId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateVendorResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      body: [body, updateVendorRequestSchema],\n      vendorId: [vendorId, string()],\n    });\n    req.header('Content-Type', 'application/json');\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/vendors/${mapped.vendorId}`;\n    return req.callAsJson(updateVendorResponseSchema, requestOptions);\n  }\n}\n","import { AUTHORIZATION_HEADER, setHeader } from './core';\nimport { passThroughInterceptor } from './core';\nimport { AuthenticatorInterface } from './core';\n\n/** None authentication provider */\nexport const noneAuthenticationProvider = () => passThroughInterceptor;\n\nexport const accessTokenAuthenticationProvider = ({\n  accessToken,\n}: {\n  accessToken: string;\n}): AuthenticatorInterface<boolean> => {\n  return (requiresAuth?: boolean) => {\n    if (!requiresAuth) {\n      return passThroughInterceptor;\n    }\n\n    return (request, options, next) => {\n      request.headers = request.headers ?? {};\n      setHeader(request.headers, AUTHORIZATION_HEADER, `Bearer ${accessToken}`);\n\n      return next(request, options);\n    };\n  };\n};\n","import { HttpClientOptions } from './core';\n\n/** An interface for all configuration parameters required by the SDK. */\nexport interface Configuration {\n  timeout: number;\n  squareVersion: string;\n  additionalHeaders: Readonly<Record<string, string>>;\n  userAgentDetail: string;\n  environment: Environment;\n  customUrl: string;\n  accessToken: string;\n  httpClientOptions?: Partial<HttpClientOptions>;\n  unstable_httpClientOptions?: any;\n}\n\n/** Environments available for API */\nexport enum Environment {\n  Production = 'production',\n  Sandbox = 'sandbox',\n  Custom = 'custom',\n}\n","import { Configuration, Environment } from './configuration';\nimport { RetryConfiguration } from './core';\n\n/** Default values for the configuration parameters of the client. */\nexport const DEFAULT_CONFIGURATION: Configuration = {\n  timeout: 60000,\n  squareVersion: '2022-04-20',\n  additionalHeaders: {},\n  userAgentDetail: '',\n  environment: Environment.Production,\n  customUrl: 'https://connect.squareup.com',\n  accessToken: '',\n};\n\n/** Default values for retry configuration parameters. */\nexport const DEFAULT_RETRY_CONFIG: RetryConfiguration = {\n  maxNumberOfRetries: 0,\n  retryOnTimeout: true,\n  retryInterval: 1,\n  maximumRetryWaitTime: 0,\n  backoffFactor: 2,\n  httpStatusCodesToRetry: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],\n  httpMethodsToRetry: ['GET', 'PUT'],\n};\n","import JSONBig from '@apimatic/json-bigint';\nimport { ApiResponse, HttpContext, HttpRequest } from '../core';\nimport { Error as SquareError } from '../models/error';\n\n/**\n * Thrown when the HTTP status code is not okay.\n *\n * The ApiError extends the ApiResponse interface, so all ApiResponse\n * properties are available.\n */\nexport class ApiError<T = {}> extends Error\n  implements ApiResponse<T | undefined> {\n  public request: HttpRequest;\n  public statusCode: number;\n  public headers: Record<string, string>;\n  public result: T | undefined;\n  public body: string | Blob | NodeJS.ReadableStream;\n  public errors?: SquareError[];\n\n  constructor(context: HttpContext, message: string) {\n    super(message);\n\n    const { request, response } = context;\n    this.request = request;\n    this.statusCode = response.statusCode;\n    this.headers = response.headers;\n    this.body = response.body;\n\n    if (typeof response.body === 'string' && response.body !== '') {\n      const JSON = JSONBig();\n      try {\n        this.result = JSON.parse(response.body);\n\n        if (typeof this.result === 'object') {\n          const result = this.result as Record<string, unknown>;\n          if ('errors' in result) {\n            this.errors = result['errors'] as SquareError[];\n          } else {\n            this.errors = [\n              {\n                category: 'V1_ERROR',\n                code: (result['type'] as string) ?? 'Unknown',\n                detail: result['message'] as string,\n                field: result['field'] as string,\n              },\n            ];\n          }\n        }\n      } catch (error) {\n        if (__DEV__) {\n          if (console) {\n            console.warn(\n              `Unexpected error: Could not parse HTTP response body as JSON. ${error.message}`\n            );\n          }\n        }\n      }\n    }\n  }\n}\n","export class XmlSerialization {\n  public xmlSerialize(_rootName: string, _value: unknown): string {\n    throw new Error('XML serialization is not available.');\n  }\n\n  public xmlDeserialize(_rootName: string, _xmlString: string): Promise<any> {\n    throw new Error('XML deserialization is not available.');\n  }\n}\n","import { ApplePayApi } from './api/applePayApi';\nimport { BankAccountsApi } from './api/bankAccountsApi';\nimport { BookingsApi } from './api/bookingsApi';\nimport { CardsApi } from './api/cardsApi';\nimport { CashDrawersApi } from './api/cashDrawersApi';\nimport { CatalogApi } from './api/catalogApi';\nimport { CheckoutApi } from './api/checkoutApi';\nimport { CustomerGroupsApi } from './api/customerGroupsApi';\nimport { CustomersApi } from './api/customersApi';\nimport { CustomerSegmentsApi } from './api/customerSegmentsApi';\nimport { DevicesApi } from './api/devicesApi';\nimport { DisputesApi } from './api/disputesApi';\nimport { EmployeesApi } from './api/employeesApi';\nimport { GiftCardActivitiesApi } from './api/giftCardActivitiesApi';\nimport { GiftCardsApi } from './api/giftCardsApi';\nimport { InventoryApi } from './api/inventoryApi';\nimport { InvoicesApi } from './api/invoicesApi';\nimport { LaborApi } from './api/laborApi';\nimport { LocationsApi } from './api/locationsApi';\nimport { LoyaltyApi } from './api/loyaltyApi';\nimport { MerchantsApi } from './api/merchantsApi';\nimport { MobileAuthorizationApi } from './api/mobileAuthorizationApi';\nimport { OAuthApi } from './api/oAuthApi';\nimport { OrdersApi } from './api/ordersApi';\nimport { PaymentsApi } from './api/paymentsApi';\nimport { PayoutsApi } from './api/payoutsApi';\nimport { RefundsApi } from './api/refundsApi';\nimport { SitesApi } from './api/sitesApi';\nimport { SnippetsApi } from './api/snippetsApi';\nimport { SubscriptionsApi } from './api/subscriptionsApi';\nimport { TeamApi } from './api/teamApi';\nimport { TerminalApi } from './api/terminalApi';\nimport { TransactionsApi } from './api/transactionsApi';\nimport { V1TransactionsApi } from './api/v1TransactionsApi';\nimport { VendorsApi } from './api/vendorsApi';\nimport { accessTokenAuthenticationProvider } from './authentication';\nimport {\n  AuthParams,\n  ClientInterface,\n  SdkRequestBuilder,\n  SdkRequestBuilderFactory,\n  Server,\n} from './clientInterface';\nimport { Configuration, Environment } from './configuration';\nimport {\n  DEFAULT_CONFIGURATION,\n  DEFAULT_RETRY_CONFIG,\n} from './defaultConfiguration';\nimport { ApiError } from './errors/apiError';\nimport { assertHeaders, mergeHeaders } from './core';\nimport { pathTemplate, SkipEncode } from './core';\nimport { setHeader } from './core';\nimport { updateUserAgent } from './core';\nimport {\n  AuthenticatorInterface,\n  createRequestBuilderFactory,\n  HttpClient,\n  HttpClientInterface,\n  RetryConfiguration,\n  XmlSerializerInterface,\n} from './core';\nimport { XmlSerialization } from './http/xmlSerialization';\n\n/** Current SDK version */\nexport const SDK_VERSION = '18.0.0';\nexport class Client implements ClientInterface {\n  private _config: Readonly<Configuration>;\n  private _timeout: number;\n  private _retryConfig: RetryConfiguration;\n  private _requestBuilderFactory: SdkRequestBuilderFactory;\n  private _userAgent: string;\n\n  public readonly applePayApi: ApplePayApi;\n  public readonly bankAccountsApi: BankAccountsApi;\n  public readonly bookingsApi: BookingsApi;\n  public readonly cardsApi: CardsApi;\n  public readonly cashDrawersApi: CashDrawersApi;\n  public readonly catalogApi: CatalogApi;\n  public readonly checkoutApi: CheckoutApi;\n  public readonly customerGroupsApi: CustomerGroupsApi;\n  public readonly customersApi: CustomersApi;\n  public readonly customerSegmentsApi: CustomerSegmentsApi;\n  public readonly devicesApi: DevicesApi;\n  public readonly disputesApi: DisputesApi;\n  public readonly employeesApi: EmployeesApi;\n  public readonly giftCardActivitiesApi: GiftCardActivitiesApi;\n  public readonly giftCardsApi: GiftCardsApi;\n  public readonly inventoryApi: InventoryApi;\n  public readonly invoicesApi: InvoicesApi;\n  public readonly laborApi: LaborApi;\n  public readonly locationsApi: LocationsApi;\n  public readonly loyaltyApi: LoyaltyApi;\n  public readonly merchantsApi: MerchantsApi;\n  public readonly mobileAuthorizationApi: MobileAuthorizationApi;\n  public readonly oAuthApi: OAuthApi;\n  public readonly ordersApi: OrdersApi;\n  public readonly paymentsApi: PaymentsApi;\n  public readonly payoutsApi: PayoutsApi;\n  public readonly refundsApi: RefundsApi;\n  public readonly sitesApi: SitesApi;\n  public readonly snippetsApi: SnippetsApi;\n  public readonly subscriptionsApi: SubscriptionsApi;\n  public readonly teamApi: TeamApi;\n  public readonly terminalApi: TerminalApi;\n  public readonly transactionsApi: TransactionsApi;\n  public readonly v1TransactionsApi: V1TransactionsApi;\n  public readonly vendorsApi: VendorsApi;\n\n  constructor(config?: Partial<Configuration>) {\n    this._config = {\n      ...DEFAULT_CONFIGURATION,\n      ...config,\n    };\n    this._retryConfig = {\n      ...DEFAULT_RETRY_CONFIG,\n      ...this._config.httpClientOptions?.retryConfig,\n    };\n    this._timeout =\n      typeof this._config.httpClientOptions?.timeout != 'undefined'\n        ? this._config.httpClientOptions.timeout\n        : this._config.timeout;\n    this._userAgent = updateUserAgent(\n      'Square-TypeScript-SDK/18.0.0 ({api-version}) {engine}/{engine-version} ({os-info}) {detail}',\n      this._config.squareVersion,\n      this._config.userAgentDetail\n    );\n    this._requestBuilderFactory = createRequestHandlerFactory(\n      server => getBaseUri(server, this._config),\n      accessTokenAuthenticationProvider(this._config),\n      new HttpClient({\n        timeout: this._timeout,\n        clientConfigOverrides: this._config.unstable_httpClientOptions,\n        httpAgent: this._config.httpClientOptions?.httpAgent,\n        httpsAgent: this._config.httpClientOptions?.httpsAgent,\n      }),\n      [\n        withErrorHandlers,\n        withUserAgent(this._userAgent),\n        withAdditionalHeaders(this._config),\n        withAuthenticationByDefault,\n        withSquareVersion(this._config),\n      ],\n      new XmlSerialization(),\n      this._retryConfig\n    );\n\n    this.applePayApi = new ApplePayApi(this);\n    this.bankAccountsApi = new BankAccountsApi(this);\n    this.bookingsApi = new BookingsApi(this);\n    this.cardsApi = new CardsApi(this);\n    this.cashDrawersApi = new CashDrawersApi(this);\n    this.catalogApi = new CatalogApi(this);\n    this.checkoutApi = new CheckoutApi(this);\n    this.customerGroupsApi = new CustomerGroupsApi(this);\n    this.customersApi = new CustomersApi(this);\n    this.customerSegmentsApi = new CustomerSegmentsApi(this);\n    this.devicesApi = new DevicesApi(this);\n    this.disputesApi = new DisputesApi(this);\n    this.employeesApi = new EmployeesApi(this);\n    this.giftCardActivitiesApi = new GiftCardActivitiesApi(this);\n    this.giftCardsApi = new GiftCardsApi(this);\n    this.inventoryApi = new InventoryApi(this);\n    this.invoicesApi = new InvoicesApi(this);\n    this.laborApi = new LaborApi(this);\n    this.locationsApi = new LocationsApi(this);\n    this.loyaltyApi = new LoyaltyApi(this);\n    this.merchantsApi = new MerchantsApi(this);\n    this.mobileAuthorizationApi = new MobileAuthorizationApi(this);\n    this.oAuthApi = new OAuthApi(this);\n    this.ordersApi = new OrdersApi(this);\n    this.paymentsApi = new PaymentsApi(this);\n    this.payoutsApi = new PayoutsApi(this);\n    this.refundsApi = new RefundsApi(this);\n    this.sitesApi = new SitesApi(this);\n    this.snippetsApi = new SnippetsApi(this);\n    this.subscriptionsApi = new SubscriptionsApi(this);\n    this.teamApi = new TeamApi(this);\n    this.terminalApi = new TerminalApi(this);\n    this.transactionsApi = new TransactionsApi(this);\n    this.v1TransactionsApi = new V1TransactionsApi(this);\n    this.vendorsApi = new VendorsApi(this);\n  }\n\n  public getRequestBuilderFactory(): SdkRequestBuilderFactory {\n    return this._requestBuilderFactory;\n  }\n\n  /**\n   * Clone this client and override given configuration options\n   */\n  public withConfiguration(config: Partial<Configuration>) {\n    return new Client({ ...this._config, ...config });\n  }\n}\n\nfunction createHttpClientAdapter(client: HttpClient): HttpClientInterface {\n  return async (request, requestOptions) => {\n    return await client.executeRequest(request, requestOptions);\n  };\n}\n\nfunction getBaseUri(server: Server = 'default', config: Configuration): string {\n  if (config.environment === Environment.Production) {\n    if (server === 'default') {\n      return 'https://connect.squareup.com';\n    }\n  }\n  if (config.environment === Environment.Sandbox) {\n    if (server === 'default') {\n      return 'https://connect.squareupsandbox.com';\n    }\n  }\n  if (config.environment === Environment.Custom) {\n    if (server === 'default') {\n      return pathTemplate`${new SkipEncode(config.customUrl)}`;\n    }\n  }\n  throw new Error('Could not get Base URL. Invalid environment or server.');\n}\n\nfunction createRequestHandlerFactory(\n  baseUrlProvider: (server?: Server) => string,\n  authProvider: AuthenticatorInterface<AuthParams>,\n  httpClient: HttpClient,\n  addons: ((rb: SdkRequestBuilder) => void)[],\n  xmlSerializer: XmlSerializerInterface,\n  retryConfig: RetryConfiguration\n): SdkRequestBuilderFactory {\n  const requestBuilderFactory = createRequestBuilderFactory(\n    createHttpClientAdapter(httpClient),\n    baseUrlProvider,\n    ApiError,\n    authProvider,\n    xmlSerializer,\n    retryConfig\n  );\n\n  return tap(requestBuilderFactory, ...addons);\n}\n\nfunction tap(\n  requestBuilderFactory: SdkRequestBuilderFactory,\n  ...callback: ((requestBuilder: SdkRequestBuilder) => void)[]\n): SdkRequestBuilderFactory {\n  return (...args) => {\n    const requestBuilder = requestBuilderFactory(...args);\n    callback.forEach(c => c(requestBuilder));\n    return requestBuilder;\n  };\n}\n\nfunction withErrorHandlers(rb: SdkRequestBuilder) {\n  rb.defaultToError(ApiError);\n}\n\nfunction withAdditionalHeaders({\n  additionalHeaders,\n}: {\n  additionalHeaders: Readonly<Record<string, string>>;\n}) {\n  const clone = { ...additionalHeaders };\n  assertHeaders(clone);\n  return (rb: SdkRequestBuilder) => {\n    rb.interceptRequest(request => {\n      const headers = request.headers ?? {};\n      mergeHeaders(headers, clone);\n      return { ...request, headers };\n    });\n  };\n}\n\nfunction withUserAgent(userAgent: string) {\n  return (rb: SdkRequestBuilder) => {\n    rb.interceptRequest(request => {\n      const headers = request.headers ?? {};\n      setHeader(headers, 'user-agent', userAgent);\n      return { ...request, headers };\n    });\n  };\n}\n\nfunction withSquareVersion({ squareVersion }: { squareVersion: string }) {\n  return (rb: SdkRequestBuilder) => {\n    rb.interceptRequest(request => {\n      const headers = request.headers ?? {};\n      setHeader(headers, 'Square-Version', squareVersion);\n      return { ...request, headers };\n    });\n  };\n}\n\nfunction withAuthenticationByDefault(rb: SdkRequestBuilder) {\n  rb.authenticate(true);\n}\n"],"names":["undefined","registerDomainRequestSchema","object","domainName","string","errorSchema","category","code","detail","optional","field","registerDomainResponseSchema","errors","array","lazy","status","BaseApi","client","createRequest","getRequestBuilderFactory","ApplePayApi","registerDomain","body","requestOptions","req","mapped","prepareArgs","header","json","callAsJson","bankAccountSchema","id","accountNumberSuffix","country","currency","accountType","holderName","primaryBankIdentificationNumber","secondaryBankIdentificationNumber","debitMandateReferenceId","referenceId","locationId","creditable","boolean","debitable","fingerprint","version","number","bankName","getBankAccountByV1IdResponseSchema","bankAccount","getBankAccountResponseSchema","listBankAccountsResponseSchema","bankAccounts","cursor","BankAccountsApi","listBankAccounts","limit","query","getBankAccountByV1Id","v1BankAccountId","appendTemplatePath","getBankAccount","bankAccountId","cancelBookingRequestSchema","idempotencyKey","bookingVersion","appointmentSegmentSchema","durationMinutes","serviceVariationId","teamMemberId","serviceVariationVersion","bigint","intermissionMinutes","anyTeamMember","resourceIds","bookingCreatorDetailsSchema","creatorType","customerId","bookingSchema","createdAt","updatedAt","startAt","customerNote","sellerNote","appointmentSegments","transitionTimeMinutes","allDay","locationType","creatorDetails","source","cancelBookingResponseSchema","booking","createBookingRequestSchema","createBookingResponseSchema","listBookingsResponseSchema","bookings","teamMemberBookingProfileSchema","description","displayName","isBookable","profileImageUrl","listTeamMemberBookingProfilesResponseSchema","teamMemberBookingProfiles","retrieveBookingResponseSchema","moneySchema","amount","businessAppointmentSettingsSchema","locationTypes","alignmentTime","minBookingLeadTimeSeconds","maxBookingLeadTimeSeconds","anyTeamMemberBookingEnabled","multipleServiceBookingEnabled","maxAppointmentsPerDayLimitType","maxAppointmentsPerDayLimit","cancellationWindowSeconds","cancellationFeeMoney","cancellationPolicy","cancellationPolicyText","skipBookingFlowStaffSelection","businessBookingProfileSchema","sellerId","bookingEnabled","customerTimezoneChoice","bookingPolicy","allowUserCancel","businessAppointmentSettings","retrieveBusinessBookingProfileResponseSchema","businessBookingProfile","retrieveTeamMemberBookingProfileResponseSchema","teamMemberBookingProfile","filterValueSchema","all","any","none","segmentFilterSchema","teamMemberIdFilter","timeRangeSchema","endAt","searchAvailabilityFilterSchema","startAtRange","segmentFilters","bookingId","searchAvailabilityQuerySchema","filter","searchAvailabilityRequestSchema","availabilitySchema","searchAvailabilityResponseSchema","availabilities","updateBookingRequestSchema","updateBookingResponseSchema","BookingsApi","listBookings","startAtMin","startAtMax","createBooking","searchAvailability","retrieveBusinessBookingProfile","listTeamMemberBookingProfiles","bookableOnly","retrieveTeamMemberBookingProfile","retrieveBooking","updateBooking","cancelBooking","addressSchema","addressLine1","addressLine2","addressLine3","locality","sublocality","administrativeDistrictLevel1","postalCode","cardSchema","cardBrand","last4","expMonth","expYear","cardholderName","billingAddress","merchantId","enabled","cardType","prepaidType","bin","createCardRequestSchema","sourceId","verificationToken","card","createCardResponseSchema","disableCardResponseSchema","listCardsResponseSchema","cards","retrieveCardResponseSchema","CardsApi","listCards","includeDisabled","sortOrder","createCard","retrieveCard","cardId","disableCard","cashDrawerShiftEventSchema","employeeId","eventType","eventMoney","listCashDrawerShiftEventsResponseSchema","events","cashDrawerShiftSummarySchema","state","openedAt","endedAt","closedAt","openedCashMoney","expectedCashMoney","closedCashMoney","listCashDrawerShiftsResponseSchema","items","cashDrawerDeviceSchema","name","cashDrawerShiftSchema","employeeIds","openingEmployeeId","endingEmployeeId","closingEmployeeId","cashPaymentMoney","cashRefundsMoney","cashPaidInMoney","cashPaidOutMoney","device","retrieveCashDrawerShiftResponseSchema","cashDrawerShift","CashDrawersApi","listCashDrawerShifts","beginTime","endTime","retrieveCashDrawerShift","shiftId","listCashDrawerShiftEvents","batchDeleteCatalogObjectsRequestSchema","objectIds","batchDeleteCatalogObjectsResponseSchema","deletedObjectIds","deletedAt","batchRetrieveCatalogObjectsRequestSchema","includeRelatedObjects","catalogVersion","includeDeletedObjects","catalogCategorySchema","imageIds","catalogCustomAttributeDefinitionNumberConfigSchema","precision","catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionSchema","uid","catalogCustomAttributeDefinitionSelectionConfigSchema","maxAllowedSelections","allowedSelections","catalogCustomAttributeDefinitionStringConfigSchema","enforceUniqueness","sourceApplicationSchema","product","applicationId","catalogCustomAttributeDefinitionSchema","type","sourceApplication","allowedObjectTypes","sellerVisibility","appVisibility","stringConfig","numberConfig","selectionConfig","customAttributeUsageCount","key","catalogCustomAttributeValueSchema","stringValue","customAttributeDefinitionId","numberValue","booleanValue","selectionUidValues","catalogDiscountSchema","discountType","percentage","amountMoney","pinRequired","labelColor","modifyTaxBasis","maximumAmountMoney","catalogImageSchema","url","caption","photoStudioOrderId","catalogModifierOverrideSchema","modifierId","onByDefault","catalogItemModifierListInfoSchema","modifierListId","modifierOverrides","minSelectedModifiers","maxSelectedModifiers","catalogItemOptionForItemSchema","itemOptionId","catalogItemSchema","abbreviation","availableOnline","availableForPickup","availableElectronically","categoryId","taxIds","modifierListInfo","variations","catalogObjectSchema","productType","skipModifierScreen","itemOptions","sortName","catalogItemOptionSchema","showColors","values","catalogItemOptionValueSchema","color","ordinal","catalogItemOptionValueForItemVariationSchema","itemOptionValueId","catalogStockConversionSchema","stockableItemVariationId","stockableQuantity","nonstockableQuantity","itemVariationLocationOverridesSchema","priceMoney","pricingType","trackInventory","inventoryAlertType","inventoryAlertThreshold","soldOut","soldOutValidUntil","catalogItemVariationSchema","itemId","sku","upc","locationOverrides","userData","serviceDuration","availableForBooking","itemOptionValues","measurementUnitId","sellable","stockable","teamMemberIds","stockableConversion","measurementUnitCustomSchema","measurementUnitSchema","customUnit","areaUnit","lengthUnit","volumeUnit","weightUnit","genericUnit","timeUnit","catalogMeasurementUnitSchema","measurementUnit","catalogModifierSchema","catalogModifierListSchema","selectionType","modifiers","catalogPricingRuleSchema","timePeriodIds","discountId","matchProductsId","applyProductsId","excludeProductsId","validFromDate","validFromLocalTime","validUntilDate","validUntilLocalTime","excludeStrategy","minimumOrderSubtotalMoney","customerGroupIdsAny","catalogProductSetSchema","productIdsAny","productIdsAll","quantityExact","quantityMin","quantityMax","allProducts","catalogQuickAmountSchema","score","catalogQuickAmountsSettingsSchema","option","eligibleForAutoAmounts","amounts","subscriptionPhaseSchema","cadence","periods","recurringPriceMoney","catalogSubscriptionPlanSchema","phases","catalogTaxSchema","calculationPhase","inclusionType","appliesToCustomAmounts","catalogTimePeriodSchema","event","catalogV1IdSchema","catalogV1Id","isDeleted","customAttributeValues","dict","catalogV1Ids","presentAtAllLocations","presentAtLocationIds","absentAtLocationIds","itemData","categoryData","itemVariationData","taxData","discountData","modifierListData","modifierData","timePeriodData","productSetData","pricingRuleData","imageData","measurementUnitData","subscriptionPlanData","itemOptionData","itemOptionValueData","customAttributeDefinitionData","quickAmountsSettingsData","batchRetrieveCatalogObjectsResponseSchema","objects","relatedObjects","catalogObjectBatchSchema","batchUpsertCatalogObjectsRequestSchema","batches","catalogIdMappingSchema","clientObjectId","objectId","batchUpsertCatalogObjectsResponseSchema","idMappings","catalogInfoResponseLimitsSchema","batchUpsertMaxObjectsPerBatch","batchUpsertMaxTotalObjects","batchRetrieveMaxObjectIds","searchMaxPageLimit","batchDeleteMaxObjectIds","updateItemTaxesMaxItemIds","updateItemTaxesMaxTaxesToEnable","updateItemTaxesMaxTaxesToDisable","updateItemModifierListsMaxItemIds","updateItemModifierListsMaxModifierListsToEnable","updateItemModifierListsMaxModifierListsToDisable","standardUnitDescriptionSchema","unit","standardUnitDescriptionGroupSchema","standardUnitDescriptions","languageCode","catalogInfoResponseSchema","limits","standardUnitDescriptionGroup","createCatalogImageRequestSchema","image","isPrimary","createCatalogImageResponseSchema","deleteCatalogObjectResponseSchema","listCatalogResponseSchema","retrieveCatalogObjectResponseSchema","rangeSchema","min","max","customAttributeFilterSchema","stringFilter","numberFilter","selectionUidsFilter","boolFilter","searchCatalogItemsRequestSchema","textFilter","categoryIds","stockLevels","enabledLocationIds","productTypes","customAttributeFilters","searchCatalogItemsResponseSchema","matchedVariationIds","catalogQueryExactSchema","attributeName","attributeValue","catalogQueryItemsForItemOptionsSchema","itemOptionIds","catalogQueryItemsForModifierListSchema","modifierListIds","catalogQueryItemsForTaxSchema","catalogQueryItemVariationsForItemOptionValuesSchema","itemOptionValueIds","catalogQueryPrefixSchema","attributePrefix","catalogQueryRangeSchema","attributeMinValue","attributeMaxValue","catalogQuerySetSchema","attributeValues","catalogQuerySortedAttributeSchema","initialAttributeValue","catalogQueryTextSchema","keywords","catalogQuerySchema","sortedAttributeQuery","exactQuery","setQuery","prefixQuery","rangeQuery","textQuery","itemsForTaxQuery","itemsForModifierListQuery","itemsForItemOptionsQuery","itemVariationsForItemOptionValuesQuery","searchCatalogObjectsRequestSchema","objectTypes","searchCatalogObjectsResponseSchema","latestTime","updateCatalogImageRequestSchema","updateCatalogImageResponseSchema","updateItemModifierListsRequestSchema","itemIds","modifierListsToEnable","modifierListsToDisable","updateItemModifierListsResponseSchema","updateItemTaxesRequestSchema","taxesToEnable","taxesToDisable","updateItemTaxesResponseSchema","upsertCatalogObjectRequestSchema","upsertCatalogObjectResponseSchema","catalogObject","CatalogApi","batchDeleteCatalogObjects","batchRetrieveCatalogObjects","batchUpsertCatalogObjects","createCatalogImage","request","imageFile","formData","JSON","stringify","image_file","updateCatalogImage","imageId","catalogInfo","listCatalog","types","upsertCatalogObject","deleteCatalogObject","retrieveCatalogObject","searchCatalogObjects","searchCatalogItems","updateItemModifierLists","updateItemTaxes","chargeRequestAdditionalRecipientSchema","orderFulfillmentFulfillmentEntrySchema","lineItemUid","quantity","metadata","orderFulfillmentPickupDetailsCurbsidePickupDetailsSchema","curbsideDetails","buyerArrivedAt","orderFulfillmentRecipientSchema","emailAddress","phoneNumber","address","orderFulfillmentPickupDetailsSchema","recipient","expiresAt","autoCompleteDuration","scheduleType","pickupAt","pickupWindowDuration","prepTimeDuration","note","placedAt","acceptedAt","rejectedAt","readyAt","expiredAt","pickedUpAt","canceledAt","cancelReason","isCurbsidePickup","curbsidePickupDetails","orderFulfillmentShipmentDetailsSchema","carrier","shippingNote","shippingType","trackingNumber","trackingUrl","inProgressAt","packagedAt","expectedShippedAt","shippedAt","failedAt","failureReason","orderFulfillmentSchema","lineItemApplication","entries","pickupDetails","shipmentDetails","orderLineItemAppliedDiscountSchema","discountUid","appliedMoney","orderLineItemAppliedTaxSchema","taxUid","orderLineItemModifierSchema","catalogObjectId","basePriceMoney","totalPriceMoney","orderLineItemPricingBlocklistsBlockedDiscountSchema","discountCatalogObjectId","orderLineItemPricingBlocklistsBlockedTaxSchema","taxCatalogObjectId","orderLineItemPricingBlocklistsSchema","blockedDiscounts","blockedTaxes","orderQuantityUnitSchema","orderLineItemSchema","quantityUnit","variationName","itemType","appliedTaxes","appliedDiscounts","variationTotalPriceMoney","grossSalesMoney","totalTaxMoney","totalDiscountMoney","totalMoney","pricingBlocklists","orderLineItemDiscountSchema","scope","rewardIds","pricingRuleId","orderLineItemTaxSchema","autoApplied","orderMoneyAmountsSchema","taxMoney","discountMoney","tipMoney","serviceChargeMoney","orderPricingOptionsSchema","autoApplyDiscounts","autoApplyTaxes","orderReturnDiscountSchema","sourceDiscountUid","orderReturnLineItemModifierSchema","sourceModifierUid","orderReturnLineItemSchema","sourceLineItemUid","returnModifiers","grossReturnMoney","orderReturnServiceChargeSchema","sourceServiceChargeUid","taxable","orderReturnTaxSchema","sourceTaxUid","orderRoundingAdjustmentSchema","orderReturnSchema","sourceOrderId","returnLineItems","returnServiceCharges","returnTaxes","returnDiscounts","roundingAdjustment","returnAmounts","orderRewardSchema","rewardTierId","orderServiceChargeSchema","orderSourceSchema","additionalRecipientSchema","receivableId","refundSchema","transactionId","tenderId","reason","processingFeeMoney","additionalRecipients","tenderCardDetailsSchema","entryMethod","tenderCashDetailsSchema","buyerTenderedMoney","changeBackMoney","tenderSchema","cardDetails","cashDetails","paymentId","orderSchema","lineItems","taxes","discounts","serviceCharges","fulfillments","returns","netAmounts","tenders","refunds","totalTipMoney","totalServiceChargeMoney","ticketName","pricingOptions","rewards","createOrderRequestSchema","order","createCheckoutRequestSchema","askForShippingAddress","merchantSupportEmail","prePopulateBuyerEmail","prePopulateShippingAddress","redirectUrl","checkoutSchema","checkoutPageUrl","createCheckoutResponseSchema","checkout","CheckoutApi","createCheckout","customerGroupSchema","createCustomerGroupRequestSchema","group","createCustomerGroupResponseSchema","deleteCustomerGroupResponseSchema","listCustomerGroupsResponseSchema","groups","retrieveCustomerGroupResponseSchema","updateCustomerGroupRequestSchema","updateCustomerGroupResponseSchema","CustomerGroupsApi","listCustomerGroups","createCustomerGroup","deleteCustomerGroup","groupId","retrieveCustomerGroup","updateCustomerGroup","addGroupToCustomerResponseSchema","createCustomerCardRequestSchema","cardNonce","createCustomerCardResponseSchema","customerTaxIdsSchema","euVat","createCustomerRequestSchema","givenName","familyName","companyName","nickname","birthday","customerPreferencesSchema","emailUnsubscribed","customerSchema","preferences","creationSource","groupIds","segmentIds","createCustomerResponseSchema","customer","deleteCustomerCardResponseSchema","deleteCustomerResponseSchema","listCustomersResponseSchema","customers","removeGroupFromCustomerResponseSchema","retrieveCustomerResponseSchema","customerCreationSourceFilterSchema","rule","customerTextFilterSchema","exact","fuzzy","customerFilterSchema","customerSortSchema","customerQuerySchema","sort","searchCustomersRequestSchema","searchCustomersResponseSchema","updateCustomerRequestSchema","updateCustomerResponseSchema","CustomersApi","listCustomers","sortField","createCustomer","searchCustomers","deleteCustomer","retrieveCustomer","updateCustomer","createCustomerCard","deprecated","deleteCustomerCard","removeGroupFromCustomer","addGroupToCustomer","customerSegmentSchema","listCustomerSegmentsResponseSchema","segments","retrieveCustomerSegmentResponseSchema","segment","CustomerSegmentsApi","listCustomerSegments","retrieveCustomerSegment","segmentId","deviceCodeSchema","deviceId","pairBy","statusChangedAt","pairedAt","createDeviceCodeRequestSchema","deviceCode","createDeviceCodeResponseSchema","getDeviceCodeResponseSchema","listDeviceCodesResponseSchema","deviceCodes","DevicesApi","listDeviceCodes","createDeviceCode","getDeviceCode","disputedPaymentSchema","disputeSchema","disputeId","dueAt","disputedPayment","evidenceIds","brandDisputeId","reportedDate","reportedAt","acceptDisputeResponseSchema","dispute","createDisputeEvidenceFileRequestSchema","evidenceType","contentType","disputeEvidenceFileSchema","filename","filetype","disputeEvidenceSchema","evidenceId","evidenceFile","evidenceText","uploadedAt","createDisputeEvidenceFileResponseSchema","evidence","createDisputeEvidenceTextRequestSchema","createDisputeEvidenceTextResponseSchema","deleteDisputeEvidenceResponseSchema","listDisputeEvidenceResponseSchema","listDisputesResponseSchema","disputes","retrieveDisputeEvidenceResponseSchema","retrieveDisputeResponseSchema","submitEvidenceResponseSchema","DisputesApi","listDisputes","states","retrieveDispute","acceptDispute","listDisputeEvidence","createDisputeEvidenceFile","createDisputeEvidenceText","deleteDisputeEvidence","retrieveDisputeEvidence","submitEvidence","employeeSchema","firstName","lastName","email","locationIds","isOwner","listEmployeesResponseSchema","employees","retrieveEmployeeResponseSchema","employee","EmployeesApi","listEmployees","retrieveEmployee","giftCardActivityActivateSchema","orderId","buyerPaymentInstrumentIds","giftCardActivityAdjustDecrementSchema","giftCardActivityAdjustIncrementSchema","giftCardActivityBlockSchema","giftCardActivityClearBalanceSchema","giftCardActivityDeactivateSchema","giftCardActivityImportSchema","giftCardActivityImportReversalSchema","giftCardActivityLoadSchema","giftCardActivityRedeemSchema","giftCardActivityRefundSchema","redeemActivityId","giftCardActivityUnblockSchema","giftCardActivityUnlinkedActivityRefundSchema","giftCardActivitySchema","giftCardId","giftCardGan","giftCardBalanceMoney","loadActivityDetails","activateActivityDetails","redeemActivityDetails","clearBalanceActivityDetails","deactivateActivityDetails","adjustIncrementActivityDetails","adjustDecrementActivityDetails","refundActivityDetails","unlinkedActivityRefundActivityDetails","importActivityDetails","blockActivityDetails","unblockActivityDetails","importReversalActivityDetails","createGiftCardActivityRequestSchema","giftCardActivity","createGiftCardActivityResponseSchema","listGiftCardActivitiesResponseSchema","giftCardActivities","GiftCardActivitiesApi","listGiftCardActivities","createGiftCardActivity","giftCardSchema","ganSource","balanceMoney","gan","customerIds","createGiftCardRequestSchema","giftCard","createGiftCardResponseSchema","linkCustomerToGiftCardRequestSchema","linkCustomerToGiftCardResponseSchema","listGiftCardsResponseSchema","giftCards","retrieveGiftCardFromGANRequestSchema","retrieveGiftCardFromGANResponseSchema","retrieveGiftCardFromNonceRequestSchema","nonce","retrieveGiftCardFromNonceResponseSchema","retrieveGiftCardResponseSchema","unlinkCustomerFromGiftCardRequestSchema","unlinkCustomerFromGiftCardResponseSchema","GiftCardsApi","listGiftCards","createGiftCard","retrieveGiftCardFromGAN","retrieveGiftCardFromNonce","linkCustomerToGiftCard","unlinkCustomerFromGiftCard","retrieveGiftCard","inventoryAdjustmentGroupSchema","rootAdjustmentId","fromState","toState","inventoryAdjustmentSchema","catalogObjectType","occurredAt","refundId","purchaseOrderId","goodsReceiptId","adjustmentGroup","inventoryPhysicalCountSchema","inventoryTransferSchema","fromLocationId","toLocationId","inventoryChangeSchema","physicalCount","adjustment","transfer","batchChangeInventoryRequestSchema","changes","ignoreUnchangedCounts","inventoryCountSchema","calculatedAt","isEstimated","batchChangeInventoryResponseSchema","counts","batchRetrieveInventoryChangesRequestSchema","catalogObjectIds","updatedAfter","updatedBefore","batchRetrieveInventoryChangesResponseSchema","batchRetrieveInventoryCountsRequestSchema","batchRetrieveInventoryCountsResponseSchema","retrieveInventoryAdjustmentResponseSchema","retrieveInventoryChangesResponseSchema","retrieveInventoryCountResponseSchema","retrieveInventoryPhysicalCountResponseSchema","count","retrieveInventoryTransferResponseSchema","InventoryApi","deprecatedRetrieveInventoryAdjustment","adjustmentId","retrieveInventoryAdjustment","deprecatedBatchChangeInventory","deprecatedBatchRetrieveInventoryChanges","deprecatedBatchRetrieveInventoryCounts","batchChangeInventory","batchRetrieveInventoryChanges","batchRetrieveInventoryCounts","deprecatedRetrieveInventoryPhysicalCount","physicalCountId","retrieveInventoryPhysicalCount","retrieveInventoryTransfer","transferId","retrieveInventoryCount","retrieveInventoryChanges","cancelInvoiceRequestSchema","invoiceAcceptedPaymentMethodsSchema","squareGiftCard","invoiceCustomFieldSchema","label","value","placement","invoicePaymentReminderSchema","relativeScheduledDays","message","sentAt","invoicePaymentRequestSchema","requestMethod","requestType","dueDate","fixedAmountRequestedMoney","percentageRequested","tippingEnabled","automaticPaymentSource","reminders","computedAmountMoney","totalCompletedAmountMoney","roundingAdjustmentIncludedMoney","invoiceRecipientTaxIdsSchema","invoiceRecipientSchema","invoiceSchema","primaryRecipient","paymentRequests","deliveryMethod","invoiceNumber","title","scheduledAt","publicUrl","nextPaymentAmountMoney","timezone","acceptedPaymentMethods","customFields","subscriptionId","saleOrServiceDate","paymentConditions","cancelInvoiceResponseSchema","invoice","createInvoiceRequestSchema","createInvoiceResponseSchema","deleteInvoiceResponseSchema","getInvoiceResponseSchema","listInvoicesResponseSchema","invoices","publishInvoiceRequestSchema","publishInvoiceResponseSchema","invoiceFilterSchema","invoiceSortSchema","invoiceQuerySchema","searchInvoicesRequestSchema","searchInvoicesResponseSchema","updateInvoiceRequestSchema","fieldsToClear","updateInvoiceResponseSchema","InvoicesApi","listInvoices","createInvoice","searchInvoices","deleteInvoice","invoiceId","getInvoice","updateInvoice","cancelInvoice","publishInvoice","breakTypeSchema","breakName","expectedDuration","isPaid","createBreakTypeRequestSchema","breakType","createBreakTypeResponseSchema","breakSchema","breakTypeId","shiftWageSchema","hourlyRate","shiftSchema","wage","breaks","createShiftRequestSchema","shift","createShiftResponseSchema","deleteBreakTypeResponseSchema","deleteShiftResponseSchema","getBreakTypeResponseSchema","employeeWageSchema","getEmployeeWageResponseSchema","employeeWage","getShiftResponseSchema","teamMemberWageSchema","getTeamMemberWageResponseSchema","teamMemberWage","listBreakTypesResponseSchema","breakTypes","listEmployeeWagesResponseSchema","employeeWages","listTeamMemberWagesResponseSchema","teamMemberWages","workweekConfigSchema","startOfWeek","startOfDayLocalTime","listWorkweekConfigsResponseSchema","workweekConfigs","dateRangeSchema","startDate","endDate","shiftWorkdaySchema","dateRange","matchShiftsBy","defaultTimezone","shiftFilterSchema","start","end","workday","shiftSortSchema","shiftQuerySchema","searchShiftsRequestSchema","searchShiftsResponseSchema","shifts","updateBreakTypeRequestSchema","updateBreakTypeResponseSchema","updateShiftRequestSchema","updateShiftResponseSchema","updateWorkweekConfigRequestSchema","workweekConfig","updateWorkweekConfigResponseSchema","LaborApi","listBreakTypes","createBreakType","deleteBreakType","getBreakType","updateBreakType","listEmployeeWages","getEmployeeWage","createShift","searchShifts","deleteShift","getShift","updateShift","listTeamMemberWages","getTeamMemberWage","listWorkweekConfigs","updateWorkweekConfig","businessHoursPeriodSchema","dayOfWeek","startLocalTime","endLocalTime","businessHoursSchema","coordinatesSchema","latitude","longitude","taxIdsSchema","frSiret","frNaf","esNif","locationSchema","capabilities","businessName","websiteUrl","businessHours","businessEmail","twitterUsername","instagramUsername","facebookUrl","coordinates","logoUrl","posBackgroundUrl","mcc","fullFormatLogoUrl","createLocationRequestSchema","location","createLocationResponseSchema","listLocationsResponseSchema","locations","retrieveLocationResponseSchema","updateLocationRequestSchema","updateLocationResponseSchema","LocationsApi","listLocations","createLocation","retrieveLocation","updateLocation","loyaltyEventAccumulatePointsSchema","loyaltyProgramId","points","accumulateLoyaltyPointsRequestSchema","accumulatePoints","loyaltyEventAdjustPointsSchema","loyaltyEventCreateRewardSchema","rewardId","loyaltyEventDeleteRewardSchema","loyaltyEventExpirePointsSchema","loyaltyEventOtherSchema","loyaltyEventRedeemRewardSchema","loyaltyEventSchema","createReward","redeemReward","deleteReward","adjustPoints","loyaltyAccountId","expirePoints","otherEvent","accumulateLoyaltyPointsResponseSchema","adjustLoyaltyPointsRequestSchema","adjustLoyaltyPointsResponseSchema","calculateLoyaltyPointsRequestSchema","transactionAmountMoney","calculateLoyaltyPointsResponseSchema","loyaltyAccountExpiringPointDeadlineSchema","loyaltyAccountMappingSchema","loyaltyAccountSchema","programId","balance","lifetimePoints","enrolledAt","mapping","expiringPointDeadlines","createLoyaltyAccountRequestSchema","loyaltyAccount","createLoyaltyAccountResponseSchema","loyaltyRewardSchema","redeemedAt","createLoyaltyRewardRequestSchema","reward","createLoyaltyRewardResponseSchema","deleteLoyaltyRewardResponseSchema","loyaltyProgramAccrualRuleCategoryDataSchema","loyaltyProgramAccrualRuleItemVariationDataSchema","itemVariationId","loyaltyProgramAccrualRuleSpendDataSchema","excludedCategoryIds","excludedItemVariationIds","taxMode","loyaltyProgramAccrualRuleVisitDataSchema","minimumAmountMoney","loyaltyProgramAccrualRuleSchema","accrualType","visitData","spendData","loyaltyProgramExpirationPolicySchema","expirationDuration","catalogObjectReferenceSchema","loyaltyProgramRewardDefinitionSchema","percentageDiscount","fixedDiscountMoney","maxDiscountMoney","loyaltyProgramRewardTierSchema","definition","pricingRuleReference","loyaltyProgramTerminologySchema","one","other","loyaltyProgramSchema","rewardTiers","expirationPolicy","terminology","accrualRules","listLoyaltyProgramsResponseSchema","programs","redeemLoyaltyRewardRequestSchema","redeemLoyaltyRewardResponseSchema","retrieveLoyaltyAccountResponseSchema","retrieveLoyaltyProgramResponseSchema","program","retrieveLoyaltyRewardResponseSchema","searchLoyaltyAccountsRequestLoyaltyAccountQuerySchema","mappings","searchLoyaltyAccountsRequestSchema","searchLoyaltyAccountsResponseSchema","loyaltyAccounts","loyaltyEventDateTimeFilterSchema","loyaltyEventLocationFilterSchema","loyaltyEventLoyaltyAccountFilterSchema","loyaltyEventOrderFilterSchema","loyaltyEventTypeFilterSchema","loyaltyEventFilterSchema","loyaltyAccountFilter","typeFilter","dateTimeFilter","locationFilter","orderFilter","loyaltyEventQuerySchema","searchLoyaltyEventsRequestSchema","searchLoyaltyEventsResponseSchema","searchLoyaltyRewardsRequestLoyaltyRewardQuerySchema","searchLoyaltyRewardsRequestSchema","searchLoyaltyRewardsResponseSchema","LoyaltyApi","createLoyaltyAccount","searchLoyaltyAccounts","retrieveLoyaltyAccount","accountId","accumulateLoyaltyPoints","adjustLoyaltyPoints","searchLoyaltyEvents","listLoyaltyPrograms","retrieveLoyaltyProgram","calculateLoyaltyPoints","createLoyaltyReward","searchLoyaltyRewards","deleteLoyaltyReward","retrieveLoyaltyReward","redeemLoyaltyReward","merchantSchema","mainLocationId","listMerchantsResponseSchema","merchant","retrieveMerchantResponseSchema","MerchantsApi","listMerchants","retrieveMerchant","createMobileAuthorizationCodeRequestSchema","createMobileAuthorizationCodeResponseSchema","authorizationCode","error","MobileAuthorizationApi","createMobileAuthorizationCode","obtainTokenRequestSchema","clientId","clientSecret","redirectUri","grantType","refreshToken","migrationToken","scopes","shortLived","obtainTokenResponseSchema","accessToken","tokenType","planId","idToken","renewTokenRequestSchema","renewTokenResponseSchema","revokeTokenRequestSchema","revokeOnlyAccessToken","revokeTokenResponseSchema","success","OAuthApi","renewToken","authorization","authenticate","revokeToken","obtainToken","batchRetrieveOrdersRequestSchema","orderIds","batchRetrieveOrdersResponseSchema","orders","calculateOrderRequestSchema","proposedRewards","calculateOrderResponseSchema","cloneOrderRequestSchema","cloneOrderResponseSchema","createOrderResponseSchema","payOrderRequestSchema","orderVersion","paymentIds","payOrderResponseSchema","retrieveOrderResponseSchema","searchOrdersCustomerFilterSchema","searchOrdersDateTimeFilterSchema","searchOrdersFulfillmentFilterSchema","fulfillmentTypes","fulfillmentStates","searchOrdersSourceFilterSchema","sourceNames","searchOrdersStateFilterSchema","searchOrdersFilterSchema","stateFilter","fulfillmentFilter","sourceFilter","customerFilter","searchOrdersSortSchema","searchOrdersQuerySchema","searchOrdersRequestSchema","returnEntries","orderEntrySchema","searchOrdersResponseSchema","orderEntries","updateOrderRequestSchema","updateOrderResponseSchema","OrdersApi","createOrder","batchRetrieveOrders","calculateOrder","cloneOrder","searchOrders","retrieveOrder","updateOrder","payOrder","cancelPaymentByIdempotencyKeyRequestSchema","cancelPaymentByIdempotencyKeyResponseSchema","applicationDetailsSchema","squareProduct","aCHDetailsSchema","routingNumber","bankAccountPaymentDetailsSchema","transferType","accountOwnershipType","statementDescription","achDetails","afterpayDetailsSchema","buyNowPayLaterDetailsSchema","brand","afterpayDetails","cardPaymentTimelineSchema","authorizedAt","capturedAt","voidedAt","deviceDetailsSchema","deviceInstallationId","deviceName","cardPaymentDetailsSchema","cvvStatus","avsStatus","authResultCode","applicationIdentifier","applicationName","applicationCryptogram","verificationMethod","verificationResults","deviceDetails","cardPaymentTimeline","refundRequiresCardPresence","cashPaymentDetailsSchema","buyerSuppliedMoney","digitalWalletDetailsSchema","externalPaymentDetailsSchema","sourceFeeMoney","processingFeeSchema","effectiveAt","riskEvaluationSchema","riskLevel","paymentSchema","appFeeMoney","approvedMoney","processingFee","refundedMoney","delayDuration","delayAction","delayedUntil","sourceType","bankAccountDetails","externalDetails","walletDetails","buyNowPayLaterDetails","refundIds","riskEvaluation","buyerEmailAddress","shippingAddress","statementDescriptionIdentifier","receiptNumber","receiptUrl","applicationDetails","versionToken","cancelPaymentResponseSchema","payment","completePaymentRequestSchema","completePaymentResponseSchema","createPaymentRequestSchema","autocomplete","acceptPartialAuthorization","createPaymentResponseSchema","getPaymentResponseSchema","listPaymentsResponseSchema","payments","updatePaymentRequestSchema","updatePaymentResponseSchema","PaymentsApi","listPayments","total","createPayment","cancelPaymentByIdempotencyKey","getPayment","updatePayment","cancelPayment","completePayment","destinationSchema","payoutFeeSchema","payoutSchema","destination","payoutFee","arrivalDate","getPayoutResponseSchema","payout","paymentBalanceActivityAutomaticSavingsDetailSchema","payoutId","paymentBalanceActivityAutomaticSavingsReversedDetailSchema","paymentBalanceActivityChargeDetailSchema","paymentBalanceActivityDepositFeeDetailSchema","paymentBalanceActivityDisputeDetailSchema","paymentBalanceActivityFeeDetailSchema","paymentBalanceActivityFreeProcessingDetailSchema","paymentBalanceActivityHoldAdjustmentDetailSchema","paymentBalanceActivityOpenDisputeDetailSchema","paymentBalanceActivityOtherAdjustmentDetailSchema","paymentBalanceActivityOtherDetailSchema","paymentBalanceActivityRefundDetailSchema","paymentBalanceActivityReleaseAdjustmentDetailSchema","paymentBalanceActivityReserveHoldDetailSchema","paymentBalanceActivityReserveReleaseDetailSchema","paymentBalanceActivitySquareCapitalPaymentDetailSchema","paymentBalanceActivitySquareCapitalReversedPaymentDetailSchema","paymentBalanceActivityTaxOnFeeDetailSchema","paymentBalanceActivityThirdPartyFeeDetailSchema","paymentBalanceActivityThirdPartyFeeRefundDetailSchema","payoutEntrySchema","grossAmountMoney","feeAmountMoney","netAmountMoney","typeAutomaticSavingsDetails","typeAutomaticSavingsReversedDetails","typeChargeDetails","typeDepositFeeDetails","typeDisputeDetails","typeFeeDetails","typeFreeProcessingDetails","typeHoldAdjustmentDetails","typeOpenDisputeDetails","typeOtherDetails","typeOtherAdjustmentDetails","typeRefundDetails","typeReleaseAdjustmentDetails","typeReserveHoldDetails","typeReserveReleaseDetails","typeSquareCapitalPaymentDetails","typeSquareCapitalReversedPaymentDetails","typeTaxOnFeeDetails","typeThirdPartyFeeDetails","typeThirdPartyFeeRefundDetails","listPayoutEntriesResponseSchema","payoutEntries","listPayoutsResponseSchema","payouts","PayoutsApi","listPayouts","getPayout","listPayoutEntries","paymentRefundSchema","getPaymentRefundResponseSchema","refund","listPaymentRefundsResponseSchema","refundPaymentRequestSchema","paymentVersionToken","refundPaymentResponseSchema","RefundsApi","listPaymentRefunds","refundPayment","getPaymentRefund","siteSchema","siteTitle","domain","isPublished","listSitesResponseSchema","sites","SitesApi","listSites","deleteSnippetResponseSchema","snippetSchema","siteId","content","retrieveSnippetResponseSchema","snippet","upsertSnippetRequestSchema","upsertSnippetResponseSchema","SnippetsApi","deleteSnippet","retrieveSnippet","upsertSnippet","subscriptionActionSchema","effectiveDate","newPlanId","subscriptionSourceSchema","subscriptionSchema","canceledDate","chargedThroughDate","taxPercentage","invoiceIds","priceOverrideMoney","actions","cancelSubscriptionResponseSchema","subscription","createSubscriptionRequestSchema","createSubscriptionResponseSchema","deleteSubscriptionActionResponseSchema","subscriptionEventInfoSchema","subscriptionEventSchema","subscriptionEventType","info","listSubscriptionEventsResponseSchema","subscriptionEvents","pauseSubscriptionRequestSchema","pauseEffectiveDate","pauseCycleDuration","resumeEffectiveDate","resumeChangeTiming","pauseReason","pauseSubscriptionResponseSchema","resumeSubscriptionRequestSchema","resumeSubscriptionResponseSchema","retrieveSubscriptionResponseSchema","searchSubscriptionsFilterSchema","searchSubscriptionsQuerySchema","searchSubscriptionsRequestSchema","include","searchSubscriptionsResponseSchema","subscriptions","swapPlanRequestSchema","swapPlanResponseSchema","updateSubscriptionRequestSchema","updateSubscriptionResponseSchema","SubscriptionsApi","createSubscription","searchSubscriptions","retrieveSubscription","updateSubscription","deleteSubscriptionAction","actionId","cancelSubscription","listSubscriptionEvents","pauseSubscription","resumeSubscription","swapPlan","teamMemberAssignedLocationsSchema","assignmentType","teamMemberSchema","assignedLocations","createTeamMemberRequestSchema","teamMember","bulkCreateTeamMembersRequestSchema","teamMembers","createTeamMemberResponseSchema","bulkCreateTeamMembersResponseSchema","updateTeamMemberRequestSchema","bulkUpdateTeamMembersRequestSchema","updateTeamMemberResponseSchema","bulkUpdateTeamMembersResponseSchema","retrieveTeamMemberResponseSchema","jobAssignmentSchema","jobTitle","payType","annualRate","weeklyHours","wageSettingSchema","jobAssignments","isOvertimeExempt","retrieveWageSettingResponseSchema","wageSetting","searchTeamMembersFilterSchema","searchTeamMembersQuerySchema","searchTeamMembersRequestSchema","searchTeamMembersResponseSchema","updateWageSettingRequestSchema","updateWageSettingResponseSchema","TeamApi","createTeamMember","bulkCreateTeamMembers","bulkUpdateTeamMembers","searchTeamMembers","retrieveTeamMember","updateTeamMember","retrieveWageSetting","updateWageSetting","tipSettingsSchema","allowTipping","separateTipScreen","customTipField","tipPercentages","smartTipping","deviceCheckoutOptionsSchema","skipReceiptScreen","collectSignature","tipSettings","terminalCheckoutSchema","deviceOptions","deadlineDuration","appId","paymentType","cancelTerminalCheckoutResponseSchema","terminalRefundSchema","cancelTerminalRefundResponseSchema","createTerminalCheckoutRequestSchema","createTerminalCheckoutResponseSchema","createTerminalRefundRequestSchema","createTerminalRefundResponseSchema","getTerminalCheckoutResponseSchema","getTerminalRefundResponseSchema","terminalCheckoutQueryFilterSchema","terminalCheckoutQuerySortSchema","terminalCheckoutQuerySchema","searchTerminalCheckoutsRequestSchema","searchTerminalCheckoutsResponseSchema","checkouts","terminalRefundQueryFilterSchema","terminalRefundQuerySortSchema","terminalRefundQuerySchema","searchTerminalRefundsRequestSchema","searchTerminalRefundsResponseSchema","TerminalApi","createTerminalCheckout","searchTerminalCheckouts","getTerminalCheckout","checkoutId","cancelTerminalCheckout","createTerminalRefund","searchTerminalRefunds","getTerminalRefund","terminalRefundId","cancelTerminalRefund","captureTransactionResponseSchema","transactionSchema","listTransactionsResponseSchema","transactions","retrieveTransactionResponseSchema","transaction","voidTransactionResponseSchema","TransactionsApi","listTransactions","retrieveTransaction","captureTransaction","voidTransaction","v1MoneySchema","currencyCode","v1CreateRefundRequestSchema","requestIdempotenceKey","v1OrderHistoryEntrySchema","action","v1TenderSchema","panSuffix","paymentNote","tenderedMoney","tenderedAt","settledAt","isExchange","v1OrderSchema","buyerEmail","recipientName","recipientPhoneNumber","subtotalMoney","totalShippingMoney","buyerNote","completedNote","refundedNote","canceledNote","tender","orderHistory","promoCode","btcReceiveAddress","btcPriceSatoshi","deviceSchema","v1PaymentDiscountSchema","v1PaymentItemDetailSchema","categoryName","v1PaymentModifierSchema","modifierOptionId","v1PaymentTaxSchema","rate","feeId","v1PaymentItemizationSchema","itemizationType","itemDetail","notes","itemVariationName","singleQuantityMoney","netSalesMoney","v1PaymentSurchargeSchema","surchargeId","v1RefundSchema","refundedProcessingFeeMoney","refundedTaxMoney","refundedAdditiveTaxMoney","refundedAdditiveTax","refundedInclusiveTaxMoney","refundedInclusiveTax","refundedTipMoney","refundedDiscountMoney","refundedSurchargeMoney","refundedSurcharges","processedAt","v1PaymentSchema","creatorId","paymentUrl","inclusiveTaxMoney","additiveTaxMoney","totalCollectedMoney","netTotalMoney","swedishRoundingMoney","inclusiveTax","additiveTax","itemizations","surchargeMoney","surcharges","isPartial","v1SettlementEntrySchema","feeMoney","v1SettlementSchema","initiatedAt","v1UpdateOrderRequestSchema","shippedTrackingNumber","V1TransactionsApi","listOrders","batchToken","includePartial","retrievePayment","listRefunds","createRefund","listSettlements","retrieveSettlement","settlementId","vendorContactSchema","removed","vendorSchema","contacts","accountNumber","bulkCreateVendorsRequestSchema","vendors","createVendorResponseSchema","vendor","bulkCreateVendorsResponseSchema","responses","bulkRetrieveVendorsRequestSchema","vendorIds","retrieveVendorResponseSchema","bulkRetrieveVendorsResponseSchema","updateVendorRequestSchema","bulkUpdateVendorsRequestSchema","updateVendorResponseSchema","bulkUpdateVendorsResponseSchema","createVendorRequestSchema","searchVendorsRequestFilterSchema","searchVendorsRequestSortSchema","searchVendorsRequestSchema","searchVendorsResponseSchema","VendorsApi","bulkCreateVendors","bulkRetrieveVendors","bulkUpdateVendors","createVendor","searchVendors","retrieveVendor","vendorId","updateVendor","accessTokenAuthenticationProvider","requiresAuth","passThroughInterceptor","options","next","headers","setHeader","AUTHORIZATION_HEADER","Environment","DEFAULT_CONFIGURATION","timeout","squareVersion","additionalHeaders","userAgentDetail","environment","Production","customUrl","DEFAULT_RETRY_CONFIG","maxNumberOfRetries","retryOnTimeout","retryInterval","maximumRetryWaitTime","backoffFactor","httpStatusCodesToRetry","httpMethodsToRetry","ApiError","context","response","statusCode","JSONBig","result","parse","console","warn","Error","XmlSerialization","xmlSerialize","_rootName","_value","xmlDeserialize","_xmlString","SDK_VERSION","Client","config","_config","_retryConfig","httpClientOptions","retryConfig","_timeout","_userAgent","updateUserAgent","_requestBuilderFactory","createRequestHandlerFactory","server","getBaseUri","HttpClient","clientConfigOverrides","unstable_httpClientOptions","httpAgent","httpsAgent","withErrorHandlers","withUserAgent","withAdditionalHeaders","withAuthenticationByDefault","withSquareVersion","applePayApi","bankAccountsApi","bookingsApi","cardsApi","cashDrawersApi","catalogApi","checkoutApi","customerGroupsApi","customersApi","customerSegmentsApi","devicesApi","disputesApi","employeesApi","giftCardActivitiesApi","giftCardsApi","inventoryApi","invoicesApi","laborApi","locationsApi","loyaltyApi","merchantsApi","mobileAuthorizationApi","oAuthApi","ordersApi","paymentsApi","payoutsApi","refundsApi","sitesApi","snippetsApi","subscriptionsApi","teamApi","terminalApi","transactionsApi","v1TransactionsApi","vendorsApi","withConfiguration","createHttpClientAdapter","executeRequest","Sandbox","Custom","pathTemplate","SkipEncode","baseUrlProvider","authProvider","httpClient","addons","xmlSerializer","requestBuilderFactory","createRequestBuilderFactory","tap","callback","requestBuilder","forEach","c","rb","defaultToError","clone","assertHeaders","interceptRequest","mergeHeaders","userAgent"],"mappings":"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"}